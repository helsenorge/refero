/* tslint:disable */
// ReSharper disable RedundantEmptyConstructor
// ReSharper disable InconsistentNaming
/*
 * This file is automatically generated with cxsd (https://github.com/charto/cxsd#readme)
 * and the fhir xsd (https://www.hl7.org/fhir/fhir-all.xsd)
 *
 * To regenerate this file follow the instructions on the cxsd homepage and use the fhir xsd.
 *
 * 29.05.2017: Changed datatypes of answerInteger, answerDate, answerDateTime answerDecimal to js types number and string
 * 29.05.2017: Changed datatypes of valueDate, valueDateTime, valueDecimal, valueInteger on enableWhen to js types number and string
 * 29.05.2017: Changed code value to type string
 * 30.05.2017: Changed QuestionnaireItem type to QuestionnaireItemTypeList and _QuestionnaireResponse status to QuestionnaireResponseStatusList
 * 31.05.2017: Added resourceType to Questionnaire and QuestionnaireResponse
 * 21.08.2018: Added valueReference to QuestionnaireOption
 *
 */
import * as Primitive from './xml-primitives';
import * as xhtml from './www.w3.org/1999/xhtml';

// Source files:
// http://hl7.org/fhir/account.xsd
// http://hl7.org/fhir/activitydefinition.xsd
// http://hl7.org/fhir/adverseevent.xsd
// http://hl7.org/fhir/allergyintolerance.xsd
// http://hl7.org/fhir/appointment.xsd
// http://hl7.org/fhir/appointmentresponse.xsd
// http://hl7.org/fhir/auditevent.xsd
// http://hl7.org/fhir/basic.xsd
// http://hl7.org/fhir/binary.xsd
// http://hl7.org/fhir/bodysite.xsd
// http://hl7.org/fhir/bundle.xsd
// http://hl7.org/fhir/capabilitystatement.xsd
// http://hl7.org/fhir/careplan.xsd
// http://hl7.org/fhir/careteam.xsd
// http://hl7.org/fhir/chargeitem.xsd
// http://hl7.org/fhir/claim.xsd
// http://hl7.org/fhir/claimresponse.xsd
// http://hl7.org/fhir/clinicalimpression.xsd
// http://hl7.org/fhir/codesystem.xsd
// http://hl7.org/fhir/communication.xsd
// http://hl7.org/fhir/communicationrequest.xsd
// http://hl7.org/fhir/compartmentdefinition.xsd
// http://hl7.org/fhir/composition.xsd
// http://hl7.org/fhir/conceptmap.xsd
// http://hl7.org/fhir/condition.xsd
// http://hl7.org/fhir/consent.xsd
// http://hl7.org/fhir/contract.xsd
// http://hl7.org/fhir/coverage.xsd
// http://hl7.org/fhir/dataelement.xsd
// http://hl7.org/fhir/detectedissue.xsd
// http://hl7.org/fhir/device.xsd
// http://hl7.org/fhir/devicecomponent.xsd
// http://hl7.org/fhir/devicemetric.xsd
// http://hl7.org/fhir/devicerequest.xsd
// http://hl7.org/fhir/deviceusestatement.xsd
// http://hl7.org/fhir/diagnosticreport.xsd
// http://hl7.org/fhir/documentmanifest.xsd
// http://hl7.org/fhir/documentreference.xsd
// http://hl7.org/fhir/eligibilityrequest.xsd
// http://hl7.org/fhir/eligibilityresponse.xsd
// http://hl7.org/fhir/encounter.xsd
// http://hl7.org/fhir/endpoint.xsd
// http://hl7.org/fhir/enrollmentrequest.xsd
// http://hl7.org/fhir/enrollmentresponse.xsd
// http://hl7.org/fhir/episodeofcare.xsd
// http://hl7.org/fhir/expansionprofile.xsd
// http://hl7.org/fhir/explanationofbenefit.xsd
// http://hl7.org/fhir/familymemberhistory.xsd
// http://hl7.org/fhir/fhir-all.xsd
// http://hl7.org/fhir/fhir-base.xsd
// http://hl7.org/fhir/flag.xsd
// http://hl7.org/fhir/goal.xsd
// http://hl7.org/fhir/graphdefinition.xsd
// http://hl7.org/fhir/group.xsd
// http://hl7.org/fhir/guidanceresponse.xsd
// http://hl7.org/fhir/healthcareservice.xsd
// http://hl7.org/fhir/imagingmanifest.xsd
// http://hl7.org/fhir/imagingstudy.xsd
// http://hl7.org/fhir/immunization.xsd
// http://hl7.org/fhir/immunizationrecommendation.xsd
// http://hl7.org/fhir/implementationguide.xsd
// http://hl7.org/fhir/library.xsd
// http://hl7.org/fhir/linkage.xsd
// http://hl7.org/fhir/list.xsd
// http://hl7.org/fhir/location.xsd
// http://hl7.org/fhir/measure.xsd
// http://hl7.org/fhir/measurereport.xsd
// http://hl7.org/fhir/media.xsd
// http://hl7.org/fhir/medication.xsd
// http://hl7.org/fhir/medicationadministration.xsd
// http://hl7.org/fhir/medicationdispense.xsd
// http://hl7.org/fhir/medicationrequest.xsd
// http://hl7.org/fhir/medicationstatement.xsd
// http://hl7.org/fhir/messagedefinition.xsd
// http://hl7.org/fhir/messageheader.xsd
// http://hl7.org/fhir/namingsystem.xsd
// http://hl7.org/fhir/nutritionorder.xsd
// http://hl7.org/fhir/observation.xsd
// http://hl7.org/fhir/operationdefinition.xsd
// http://hl7.org/fhir/operationoutcome.xsd
// http://hl7.org/fhir/organization.xsd
// http://hl7.org/fhir/parameters.xsd
// http://hl7.org/fhir/patient.xsd
// http://hl7.org/fhir/paymentnotice.xsd
// http://hl7.org/fhir/paymentreconciliation.xsd
// http://hl7.org/fhir/person.xsd
// http://hl7.org/fhir/plandefinition.xsd
// http://hl7.org/fhir/practitioner.xsd
// http://hl7.org/fhir/practitionerrole.xsd
// http://hl7.org/fhir/procedure.xsd
// http://hl7.org/fhir/procedurerequest.xsd
// http://hl7.org/fhir/processrequest.xsd
// http://hl7.org/fhir/processresponse.xsd
// http://hl7.org/fhir/provenance.xsd
// http://hl7.org/fhir/questionnaire.xsd
// http://hl7.org/fhir/questionnaireresponse.xsd
// http://hl7.org/fhir/referralrequest.xsd
// http://hl7.org/fhir/relatedperson.xsd
// http://hl7.org/fhir/requestgroup.xsd
// http://hl7.org/fhir/researchstudy.xsd
// http://hl7.org/fhir/researchsubject.xsd
// http://hl7.org/fhir/riskassessment.xsd
// http://hl7.org/fhir/schedule.xsd
// http://hl7.org/fhir/searchparameter.xsd
// http://hl7.org/fhir/sequence.xsd
// http://hl7.org/fhir/servicedefinition.xsd
// http://hl7.org/fhir/slot.xsd
// http://hl7.org/fhir/specimen.xsd
// http://hl7.org/fhir/structuredefinition.xsd
// http://hl7.org/fhir/structuremap.xsd
// http://hl7.org/fhir/subscription.xsd
// http://hl7.org/fhir/substance.xsd
// http://hl7.org/fhir/supplydelivery.xsd
// http://hl7.org/fhir/supplyrequest.xsd
// http://hl7.org/fhir/task.xsd
// http://hl7.org/fhir/testreport.xsd
// http://hl7.org/fhir/testscript.xsd
// http://hl7.org/fhir/valueset.xsd
// http://hl7.org/fhir/visionprescription.xsd

interface BaseType {
  _exists?: boolean;
  _namespace?: string;
}
/** A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.If the element is present, it must have either a @value, an @id, or extensions */
interface _Account extends _DomainResource {
  /** Indicates the period of time over which the account is allowed to have transactions posted to it.
   * This period may be different to the coveragePeriod which is the duration of time that services may occur. */
  active?: Period;
  /** Represents the sum of all credits less all debits associated with the account.  Might be positive, zero or negative. */
  balance?: Money;
  /** The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account. */
  coverage?: AccountCoverage[];
  /** Provides additional information about what the account tracks and how it is used. */
  description?: string;
  /** Parties financially responsible for the account. */
  guarantor?: AccountGuarantor[];
  /** Unique identifier used to reference the account.  May or may not be intended for human use (e.g. credit card number). */
  identifier?: Identifier[];
  /** Name used for the account when displaying it to humans in reports, etc. */
  name?: string;
  /** Indicates the organization, department, etc. with responsibility for the account. */
  owner?: Reference;
  /** Identifies the period of time the account applies to; e.g. accounts created per fiscal year, quarter, etc. */
  period?: Period;
  /** Indicates whether the account is presently used/usable or not. */
  status?: AccountStatus;
  /** Identifies the patient, device, practitioner, location or other object the account is associated with. */
  subject?: Reference;
  /** Categorizes the account for reporting and searching purposes. */
  type?: CodeableConcept;
}
export interface Account extends _Account {
  constructor: { new (): Account };
}
export var Account: { new (): Account };

/** A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc. */
interface _AccountCoverage extends _BackboneElement {
  /** The party(s) that are responsible for payment (or part of) of charges applied to this account (including self-pay).
   *
   * A coverage may only be resposible for specific types of charges, and the sequence of the coverages in the account could be important when processing billing. */
  coverage: Reference;
  /** The priority of the coverage in the context of this account. */
  priority?: positiveInt;
}
export interface AccountCoverage extends _AccountCoverage {
  constructor: { new (): AccountCoverage };
}
export var AccountCoverage: { new (): AccountCoverage };

/** A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc. */
interface _AccountGuarantor extends _BackboneElement {
  /** A guarantor may be placed on credit hold or otherwise have their role temporarily suspended. */
  onHold?: boolean;
  /** The entity who is responsible. */
  party: Reference;
  /** The timeframe during which the guarantor accepts responsibility for the account. */
  period?: Period;
}
export interface AccountGuarantor extends _AccountGuarantor {
  constructor: { new (): AccountGuarantor };
}
export var AccountGuarantor: { new (): AccountGuarantor };

/** Indicates whether the account is available to be used.If the element is present, it must have either a @value, an @id, or extensions */
interface _AccountStatus extends _Element {
  value?: AccountStatusList;
}
export interface AccountStatus extends _AccountStatus {
  constructor: { new (): AccountStatus };
}
export var AccountStatus: { new (): AccountStatus };

export type AccountStatusList = 'active' | 'inactive' | 'entered-in-error';
interface _AccountStatusList extends _codePrimitive {
  content: AccountStatusList;
}

/** Defines behavior for an action or a group for how many times that item may be repeatedIf the element is present, it must have either a @value, an @id, or extensions */
interface _ActionCardinalityBehavior extends _Element {
  value?: ActionCardinalityBehaviorList;
}
export interface ActionCardinalityBehavior extends _ActionCardinalityBehavior {
  constructor: { new (): ActionCardinalityBehavior };
}
export var ActionCardinalityBehavior: { new (): ActionCardinalityBehavior };

export type ActionCardinalityBehaviorList = 'single' | 'multiple';
interface _ActionCardinalityBehaviorList extends _codePrimitive {
  content: ActionCardinalityBehaviorList;
}

/** Defines the kinds of conditions that can appear on actionsIf the element is present, it must have either a @value, an @id, or extensions */
interface _ActionConditionKind extends _Element {
  value?: ActionConditionKindList;
}
export interface ActionConditionKind extends _ActionConditionKind {
  constructor: { new (): ActionConditionKind };
}
export var ActionConditionKind: { new (): ActionConditionKind };

export type ActionConditionKindList = 'applicability' | 'start' | 'stop';
interface _ActionConditionKindList extends _codePrimitive {
  content: ActionConditionKindList;
}

/** Defines organization behavior of a groupIf the element is present, it must have either a @value, an @id, or extensions */
interface _ActionGroupingBehavior extends _Element {
  value?: ActionGroupingBehaviorList;
}
export interface ActionGroupingBehavior extends _ActionGroupingBehavior {
  constructor: { new (): ActionGroupingBehavior };
}
export var ActionGroupingBehavior: { new (): ActionGroupingBehavior };

export type ActionGroupingBehaviorList = 'visual-group' | 'logical-group' | 'sentence-group';
interface _ActionGroupingBehaviorList extends _codePrimitive {
  content: ActionGroupingBehaviorList;
}

/** List of allowable action which this resource can request.If the element is present, it must have either a @value, an @id, or extensions */
interface _ActionList extends _Element {
  value?: ActionListList;
}
export interface ActionList extends _ActionList {
  constructor: { new (): ActionList };
}
export var ActionList: { new (): ActionList };

export type ActionListList = 'cancel' | 'poll' | 'reprocess' | 'status';
interface _ActionListList extends _codePrimitive {
  content: ActionListList;
}

/** The type of participant in the activityIf the element is present, it must have either a @value, an @id, or extensions */
interface _ActionParticipantType extends _Element {
  value?: ActionParticipantTypeList;
}
export interface ActionParticipantType extends _ActionParticipantType {
  constructor: { new (): ActionParticipantType };
}
export var ActionParticipantType: { new (): ActionParticipantType };

export type ActionParticipantTypeList = 'patient' | 'practitioner' | 'related-person';
interface _ActionParticipantTypeList extends _codePrimitive {
  content: ActionParticipantTypeList;
}

/** Defines selection frequency behavior for an action or groupIf the element is present, it must have either a @value, an @id, or extensions */
interface _ActionPrecheckBehavior extends _Element {
  value?: ActionPrecheckBehaviorList;
}
export interface ActionPrecheckBehavior extends _ActionPrecheckBehavior {
  constructor: { new (): ActionPrecheckBehavior };
}
export var ActionPrecheckBehavior: { new (): ActionPrecheckBehavior };

export type ActionPrecheckBehaviorList = 'yes' | 'no';
interface _ActionPrecheckBehaviorList extends _codePrimitive {
  content: ActionPrecheckBehaviorList;
}

/** Defines the types of relationships between actionsIf the element is present, it must have either a @value, an @id, or extensions */
interface _ActionRelationshipType extends _Element {
  value?: ActionRelationshipTypeList;
}
export interface ActionRelationshipType extends _ActionRelationshipType {
  constructor: { new (): ActionRelationshipType };
}
export var ActionRelationshipType: { new (): ActionRelationshipType };

export type ActionRelationshipTypeList =
  | 'before-start'
  | 'before'
  | 'before-end'
  | 'concurrent-with-start'
  | 'concurrent'
  | 'concurrent-with-end'
  | 'after-start'
  | 'after'
  | 'after-end';
interface _ActionRelationshipTypeList extends _codePrimitive {
  content: ActionRelationshipTypeList;
}

/** Defines requiredness behavior for selecting an action or an action groupIf the element is present, it must have either a @value, an @id, or extensions */
interface _ActionRequiredBehavior extends _Element {
  value?: ActionRequiredBehaviorList;
}
export interface ActionRequiredBehavior extends _ActionRequiredBehavior {
  constructor: { new (): ActionRequiredBehavior };
}
export var ActionRequiredBehavior: { new (): ActionRequiredBehavior };

export type ActionRequiredBehaviorList = 'must' | 'could' | 'must-unless-documented';
interface _ActionRequiredBehaviorList extends _codePrimitive {
  content: ActionRequiredBehaviorList;
}

/** Defines selection behavior of a groupIf the element is present, it must have either a @value, an @id, or extensions */
interface _ActionSelectionBehavior extends _Element {
  value?: ActionSelectionBehaviorList;
}
export interface ActionSelectionBehavior extends _ActionSelectionBehavior {
  constructor: { new (): ActionSelectionBehavior };
}
export var ActionSelectionBehavior: { new (): ActionSelectionBehavior };

export type ActionSelectionBehaviorList = 'any' | 'all' | 'all-or-none' | 'exactly-one' | 'at-most-one' | 'one-or-more';
interface _ActionSelectionBehaviorList extends _codePrimitive {
  content: ActionSelectionBehaviorList;
}

/** This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context.If the element is present, it must have either a @value, an @id, or extensions */
interface _ActivityDefinition extends _DomainResource {
  /** The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
  approvalDate?: date;
  /** Indicates the sites on the subject's body where the procedure should be performed (I.e. the target sites). */
  bodySite?: CodeableConcept[];
  /** Detailed description of the type of activity; e.g. What lab test, what procedure, what kind of encounter. */
  code?: CodeableConcept;
  /** Contact details to assist a user in finding and communicating with the publisher. */
  contact?: ContactDetail[];
  /** A contributor to the content of the asset, including authors, editors, reviewers, and endorsers. */
  contributor?: Contributor[];
  /** A copyright statement relating to the activity definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the activity definition. */
  copyright?: markdown;
  /** The date  (and optionally time) when the activity definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the activity definition changes. */
  date?: dateTime;
  /** A free text natural language description of the activity definition from a consumer's perspective. */
  description?: markdown;
  /** Provides detailed dosage instructions in the same way that they are described for MedicationRequest resources. */
  dosage?: Dosage[];
  /** Dynamic values that will be evaluated to produce values for elements of the resulting resource. For example, if the dosage of a medication must be computed based on the patient's weight, a dynamic value would be used to specify an expression that calculated the weight, and the path on the intent resource that would contain the result. */
  dynamicValue?: ActivityDefinitionDynamicValue[];
  /** The period during which the activity definition content was or is planned to be in active use. */
  effectivePeriod?: Period;
  /** A boolean value to indicate that this activity definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage. */
  experimental?: boolean;
  /** A formal identifier that is used to identify this activity definition when it is represented in other formats, or referenced in a specification, model, design or an instance. */
  identifier?: Identifier[];
  /** A legal or geographic region in which the activity definition is intended to be used. */
  jurisdiction?: CodeableConcept[];
  /** A description of the kind of resource the activity definition is representing. For example, a MedicationRequest, a ProcedureRequest, or a CommunicationRequest. Typically, but not always, this is a Request resource. */
  kind?: ResourceType;
  /** The date on which the resource content was last reviewed. Review happens periodically after approval, but doesn't change the original approval date. */
  lastReviewDate?: date;
  /** A reference to a Library resource containing any formal logic used by the asset. */
  library?: Reference[];
  /** Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc. */
  location?: Reference;
  /** A natural language name identifying the activity definition. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
  name?: string;
  /** Indicates who should participate in performing the action described. */
  participant?: ActivityDefinitionParticipant[];
  productCodeableConcept?: CodeableConcept;
  productReference?: Reference;
  /** The name of the individual or organization that published the activity definition. */
  publisher?: string;
  /** Explaination of why this activity definition is needed and why it has been designed as it has. */
  purpose?: markdown;
  /** Identifies the quantity expected to be consumed at once (per dose, per meal, etc.). */
  quantity?: Quantity;
  /** Related artifacts such as additional documentation, justification, or bibliographic references. */
  relatedArtifact?: RelatedArtifact[];
  /** The status of this activity definition. Enables tracking the life-cycle of the content. */
  status: PublicationStatus;
  timingDateTime?: dateTime;
  timingPeriod?: Period;
  timingRange?: Range;
  timingTiming?: Timing;
  /** A short, descriptive, user-friendly title for the activity definition. */
  title?: string;
  /** Descriptive topics related to the content of the activity. Topics provide a high-level categorization of the activity that can be useful for filtering and searching. */
  topic?: CodeableConcept[];
  /** A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input. */
  transform?: Reference;
  /** An absolute URI that is used to identify this activity definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this activity definition is (or will be) published. The URL SHOULD include the major version of the activity definition. For more information see [Technical and Business Versions](resource.html#versions). */
  url?: uri;
  /** A detailed description of how the asset is used from a clinical perspective. */
  usage?: string;
  /** The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate activity definition instances. */
  useContext?: UsageContext[];
  /** The identifier that is used to identify this version of the activity definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the activity definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active assets. */
  version?: string;
}
export interface ActivityDefinition extends _ActivityDefinition {
  constructor: { new (): ActivityDefinition };
}
export var ActivityDefinition: { new (): ActivityDefinition };

/** This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context. */
interface _ActivityDefinitionDynamicValue extends _BackboneElement {
  /** A brief, natural language description of the intended semantics of the dynamic value. */
  description?: string;
  /** An expression specifying the value of the customized element. */
  expression?: string;
  /** The media type of the language for the expression. */
  language?: string;
  /** The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression. */
  path?: string;
}
export interface ActivityDefinitionDynamicValue extends _ActivityDefinitionDynamicValue {
  constructor: { new (): ActivityDefinitionDynamicValue };
}
export var ActivityDefinitionDynamicValue: { new (): ActivityDefinitionDynamicValue };

/** This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context. */
interface _ActivityDefinitionParticipant extends _BackboneElement {
  /** The role the participant should play in performing the described action. */
  role?: CodeableConcept;
  /** The type of participant in the action. */
  type: ActionParticipantType;
}
export interface ActivityDefinitionParticipant extends _ActivityDefinitionParticipant {
  constructor: { new (): ActivityDefinitionParticipant };
}
export var ActivityDefinitionParticipant: { new (): ActivityDefinitionParticipant };

/** An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _Address extends _Element {
  /** The name of the city, town, village or other community or delivery center. */
  city?: string;
  /** Country - a nation as commonly understood or generally accepted. */
  country?: string;
  /** The name of the administrative area (county). */
  district?: string;
  /** This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information. */
  line?: string[];
  /** Time period when address was/is in use. */
  period?: Period;
  /** A postal code designating a region defined by the postal service. */
  postalCode?: string;
  /** Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (i.e. US 2 letter state codes). */
  state?: string;
  /** A full text representation of the address. */
  text?: string;
  /** Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both. */
  type?: AddressType;
  /** The purpose of this address. */
  use?: AddressUse;
}
export interface Address extends _Address {
  constructor: { new (): Address };
}
export var Address: { new (): Address };

/** The type of an address (physical / postal)If the element is present, it must have either a @value, an @id, or extensions */
interface _AddressType extends _Element {
  value?: AddressTypeList;
}
export interface AddressType extends _AddressType {
  constructor: { new (): AddressType };
}
export var AddressType: { new (): AddressType };

export type AddressTypeList = 'postal' | 'physical' | 'both';
interface _AddressTypeList extends _codePrimitive {
  content: AddressTypeList;
}

/** The use of an addressIf the element is present, it must have either a @value, an @id, or extensions */
interface _AddressUse extends _Element {
  value?: AddressUseList;
}
export interface AddressUse extends _AddressUse {
  constructor: { new (): AddressUse };
}
export var AddressUse: { new (): AddressUse };

export type AddressUseList = 'home' | 'work' | 'temp' | 'old';
interface _AddressUseList extends _codePrimitive {
  content: AddressUseList;
}

/** If the element is present, it must have either a @value, an @id, or extensions */
interface _AdministrativeGender extends _Element {
  value?: AdministrativeGenderList;
}
export interface AdministrativeGender extends _AdministrativeGender {
  constructor: { new (): AdministrativeGender };
}
export var AdministrativeGender: { new (): AdministrativeGender };

export type AdministrativeGenderList = 'male' | 'female' | 'other' | 'unknown';
interface _AdministrativeGenderList extends _codePrimitive {
  content: AdministrativeGenderList;
}

/** Actual or  potential/avoided event causing unintended physical injury resulting from or contributed to by medical care, a research study or other healthcare setting factors that requires additional monitoring, treatment, or hospitalization, or that results in death.If the element is present, it must have either a @value, an @id, or extensions */
interface _AdverseEvent extends _DomainResource {
  /** The type of event which is important to characterize what occurred and caused harm to the subject, or had the potential to cause harm to the subject. */
  category?: AdverseEventCategory;
  /** The date (and perhaps time) when the adverse event occurred. */
  date?: dateTime;
  /** Describes the adverse event in text. */
  description?: string;
  /** Parties that may or should contribute or have contributed information to the Act. Such information includes information leading to the decision to perform the Act and how to perform the Act (e.g. consultant), information that the Act itself seeks to reveal (e.g. informant of clinical history), or information about what Act was performed (e.g. informant witness). */
  eventParticipant?: Reference;
  /** The identifier(s) of this adverse event that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itsefl is not appropriate. */
  identifier?: Identifier;
  /** The information about where the adverse event occurred. */
  location?: Reference;
  /** Describes the type of outcome from the adverse event. */
  outcome?: CodeableConcept;
  /** Includes information about the reaction that occurred as a result of exposure to a substance (for example, a drug or a chemical). */
  reaction?: Reference[];
  /** Information on who recorded the adverse event.  May be the patient or a practitioner. */
  recorder?: Reference;
  /** AdverseEvent.referenceDocument. */
  referenceDocument?: Reference[];
  /** Describes the seriousness or severity of the adverse event. */
  seriousness?: CodeableConcept;
  /** AdverseEvent.study. */
  study?: Reference[];
  /** This subject or group impacted by the event.  With a prospective adverse event, there will be no subject as the adverse event was prevented. */
  subject?: Reference;
  /** AdverseEvent.subjectMedicalHistory. */
  subjectMedicalHistory?: Reference[];
  /** Describes the entity that is suspected to have caused the adverse event. */
  suspectEntity?: AdverseEventSuspectEntity[];
  /** This element defines the specific type of event that occurred or that was prevented from occurring. */
  type?: CodeableConcept;
}
export interface AdverseEvent extends _AdverseEvent {
  constructor: { new (): AdverseEvent };
}
export var AdverseEvent: { new (): AdverseEvent };

/** Overall categorization of the event, e.g. real or potentialIf the element is present, it must have either a @value, an @id, or extensions */
interface _AdverseEventCategory extends _Element {
  value?: AdverseEventCategoryList;
}
export interface AdverseEventCategory extends _AdverseEventCategory {
  constructor: { new (): AdverseEventCategory };
}
export var AdverseEventCategory: { new (): AdverseEventCategory };

export type AdverseEventCategoryList = 'AE' | 'PAE';
interface _AdverseEventCategoryList extends _codePrimitive {
  content: AdverseEventCategoryList;
}

/** TODOIf the element is present, it must have either a @value, an @id, or extensions */
interface _AdverseEventCausality extends _Element {
  value?: AdverseEventCausalityList;
}
export interface AdverseEventCausality extends _AdverseEventCausality {
  constructor: { new (): AdverseEventCausality };
}
export var AdverseEventCausality: { new (): AdverseEventCausality };

export type AdverseEventCausalityList = 'causality1' | 'causality2';
interface _AdverseEventCausalityList extends _codePrimitive {
  content: AdverseEventCausalityList;
}

/** Actual or  potential/avoided event causing unintended physical injury resulting from or contributed to by medical care, a research study or other healthcare setting factors that requires additional monitoring, treatment, or hospitalization, or that results in death. */
interface _AdverseEventSuspectEntity extends _BackboneElement {
  /** causality1 | causality2. */
  causality?: AdverseEventCausality;
  /** assess1 | assess2. */
  causalityAssessment?: CodeableConcept;
  /** AdverseEvent.suspectEntity.causalityAuthor. */
  causalityAuthor?: Reference;
  /** method1 | method2. */
  causalityMethod?: CodeableConcept;
  /** AdverseEvent.suspectEntity.causalityProductRelatedness. */
  causalityProductRelatedness?: string;
  /** result1 | result2. */
  causalityResult?: CodeableConcept;
  /** Identifies the actual instance of what caused the adverse event.  May be a substance, medication, medication administration, medication statement or a device. */
  instance: Reference;
}
export interface AdverseEventSuspectEntity extends _AdverseEventSuspectEntity {
  constructor: { new (): AdverseEventSuspectEntity };
}
export var AdverseEventSuspectEntity: { new (): AdverseEventSuspectEntity };

/** A duration of time during which an organism (or a process) has existed.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _Age extends _Quantity {}
export interface Age extends _Age {
  constructor: { new (): Age };
}
export var Age: { new (): Age };

/** How resource references can be aggregated.If the element is present, it must have either a @value, an @id, or extensions */
interface _AggregationMode extends _Element {
  value?: AggregationModeList;
}
export interface AggregationMode extends _AggregationMode {
  constructor: { new (): AggregationMode };
}
export var AggregationMode: { new (): AggregationMode };

export type AggregationModeList = 'contained' | 'referenced' | 'bundled';
interface _AggregationModeList extends _codePrimitive {
  content: AggregationModeList;
}

/** Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.If the element is present, it must have either a @value, an @id, or extensions */
interface _AllergyIntolerance extends _DomainResource {
  /** The date on which the existance of the AllergyIntolerance was first asserted or acknowledged. */
  assertedDate?: dateTime;
  /** The source of the information about the allergy that is recorded. */
  asserter?: Reference;
  /** Category of the identified substance. */
  category?: AllergyIntoleranceCategory[];
  /** The clinical status of the allergy or intolerance. */
  clinicalStatus?: AllergyIntoleranceClinicalStatus;
  /** Code for an allergy or intolerance statement (either a positive or a negated/excluded statement).  This may be a code for a substance or pharmaceutical product that is considered to be responsible for the adverse reaction risk (e.g., "Latex"), an allergy or intolerance condition (e.g., "Latex allergy"), or a negated/excluded code for a specific substance or class (e.g., "No latex allergy") or a general or categorical negated statement (e.g.,  "No known allergy", "No known drug allergies"). */
  code?: CodeableConcept;
  /** Estimate of the potential clinical harm, or seriousness, of the reaction to the identified substance. */
  criticality?: AllergyIntoleranceCriticality;
  /** This records identifiers associated with this allergy/intolerance concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation). */
  identifier?: Identifier[];
  /** Represents the date and/or time of the last known occurrence of a reaction event. */
  lastOccurrence?: dateTime;
  /** Additional narrative about the propensity for the Adverse Reaction, not captured in other fields. */
  note?: Annotation[];
  onsetAge?: Age;
  onsetDateTime?: dateTime;
  onsetPeriod?: Period;
  onsetRange?: Range;
  onsetString?: string;
  /** The patient who has the allergy or intolerance. */
  patient: Reference;
  /** Details about each adverse reaction event linked to exposure to the identified substance. */
  reaction?: AllergyIntoleranceReaction[];
  /** Individual who recorded the record and takes responsibility for its content. */
  recorder?: Reference;
  /** Identification of the underlying physiological mechanism for the reaction risk. */
  type?: AllergyIntoleranceType;
  /** Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified substance (including pharmaceutical product). */
  verificationStatus: AllergyIntoleranceVerificationStatus;
}
export interface AllergyIntolerance extends _AllergyIntolerance {
  constructor: { new (): AllergyIntolerance };
}
export var AllergyIntolerance: { new (): AllergyIntolerance };

/** Category of an identified substance.If the element is present, it must have either a @value, an @id, or extensions */
interface _AllergyIntoleranceCategory extends _Element {
  value?: AllergyIntoleranceCategoryList;
}
export interface AllergyIntoleranceCategory extends _AllergyIntoleranceCategory {
  constructor: { new (): AllergyIntoleranceCategory };
}
export var AllergyIntoleranceCategory: { new (): AllergyIntoleranceCategory };

export type AllergyIntoleranceCategoryList = 'food' | 'medication' | 'environment' | 'biologic';
interface _AllergyIntoleranceCategoryList extends _codePrimitive {
  content: AllergyIntoleranceCategoryList;
}

/** The clinical status of the allergy or intolerance.If the element is present, it must have either a @value, an @id, or extensions */
interface _AllergyIntoleranceClinicalStatus extends _Element {
  value?: AllergyIntoleranceClinicalStatusList;
}
export interface AllergyIntoleranceClinicalStatus extends _AllergyIntoleranceClinicalStatus {
  constructor: { new (): AllergyIntoleranceClinicalStatus };
}
export var AllergyIntoleranceClinicalStatus: { new (): AllergyIntoleranceClinicalStatus };

export type AllergyIntoleranceClinicalStatusList = 'active' | 'inactive' | 'resolved';
interface _AllergyIntoleranceClinicalStatusList extends _codePrimitive {
  content: AllergyIntoleranceClinicalStatusList;
}

/** Estimate of the potential clinical harm, or seriousness, of a reaction to an identified substance.If the element is present, it must have either a @value, an @id, or extensions */
interface _AllergyIntoleranceCriticality extends _Element {
  value?: AllergyIntoleranceCriticalityList;
}
export interface AllergyIntoleranceCriticality extends _AllergyIntoleranceCriticality {
  constructor: { new (): AllergyIntoleranceCriticality };
}
export var AllergyIntoleranceCriticality: { new (): AllergyIntoleranceCriticality };

export type AllergyIntoleranceCriticalityList = 'low' | 'high' | 'unable-to-assess';
interface _AllergyIntoleranceCriticalityList extends _codePrimitive {
  content: AllergyIntoleranceCriticalityList;
}

/** Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance. */
interface _AllergyIntoleranceReaction extends _BackboneElement {
  /** Text description about the reaction as a whole, including details of the manifestation if required. */
  description?: string;
  /** Identification of the route by which the subject was exposed to the substance. */
  exposureRoute?: CodeableConcept;
  /** Clinical symptoms and/or signs that are observed or associated with the adverse reaction event. */
  manifestation: CodeableConcept[];
  /** Additional text about the adverse reaction event not captured in other fields. */
  note?: Annotation[];
  /** Record of the date and/or time of the onset of the Reaction. */
  onset?: dateTime;
  /** Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations. */
  severity?: AllergyIntoleranceSeverity;
  /** Identification of the specific substance (or pharmaceutical product) considered to be responsible for the Adverse Reaction event. Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'. */
  substance?: CodeableConcept;
}
export interface AllergyIntoleranceReaction extends _AllergyIntoleranceReaction {
  constructor: { new (): AllergyIntoleranceReaction };
}
export var AllergyIntoleranceReaction: { new (): AllergyIntoleranceReaction };

/** Clinical assessment of the severity of a reaction event as a whole, potentially considering multiple different manifestations.If the element is present, it must have either a @value, an @id, or extensions */
interface _AllergyIntoleranceSeverity extends _Element {
  value?: AllergyIntoleranceSeverityList;
}
export interface AllergyIntoleranceSeverity extends _AllergyIntoleranceSeverity {
  constructor: { new (): AllergyIntoleranceSeverity };
}
export var AllergyIntoleranceSeverity: { new (): AllergyIntoleranceSeverity };

export type AllergyIntoleranceSeverityList = 'mild' | 'moderate' | 'severe';
interface _AllergyIntoleranceSeverityList extends _codePrimitive {
  content: AllergyIntoleranceSeverityList;
}

/** Identification of the underlying physiological mechanism for a Reaction Risk.If the element is present, it must have either a @value, an @id, or extensions */
interface _AllergyIntoleranceType extends _Element {
  value?: AllergyIntoleranceTypeList;
}
export interface AllergyIntoleranceType extends _AllergyIntoleranceType {
  constructor: { new (): AllergyIntoleranceType };
}
export var AllergyIntoleranceType: { new (): AllergyIntoleranceType };

export type AllergyIntoleranceTypeList = 'allergy' | 'intolerance';
interface _AllergyIntoleranceTypeList extends _codePrimitive {
  content: AllergyIntoleranceTypeList;
}

/** Assertion about certainty associated with a propensity, or potential risk, of a reaction to the identified substance.If the element is present, it must have either a @value, an @id, or extensions */
interface _AllergyIntoleranceVerificationStatus extends _Element {
  value?: AllergyIntoleranceVerificationStatusList;
}
export interface AllergyIntoleranceVerificationStatus extends _AllergyIntoleranceVerificationStatus {
  constructor: { new (): AllergyIntoleranceVerificationStatus };
}
export var AllergyIntoleranceVerificationStatus: { new (): AllergyIntoleranceVerificationStatus };

export type AllergyIntoleranceVerificationStatusList = 'unconfirmed' | 'confirmed' | 'refuted' | 'entered-in-error';
interface _AllergyIntoleranceVerificationStatusList extends _codePrimitive {
  content: AllergyIntoleranceVerificationStatusList;
}

/** A  text note which also  contains information about who made the statement and when.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _Annotation extends _Element {
  authorReference?: Reference;
  authorString?: string;
  /** The text of the annotation. */
  text: string;
  /** Indicates when this particular annotation was made. */
  time?: dateTime;
}
export interface Annotation extends _Annotation {
  constructor: { new (): Annotation };
}
export var Annotation: { new (): Annotation };

/** A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).If the element is present, it must have either a @value, an @id, or extensions */
interface _Appointment extends _DomainResource {
  /** The style of appointment or patient that has been booked in the slot (not service type). */
  appointmentType?: CodeableConcept;
  /** Additional comments about the appointment. */
  comment?: string;
  /** The date that this appointment was initially created. This could be different to the meta.lastModified value on the initial entry, as this could have been before the resource was created on the FHIR server, and should remain unchanged over the lifespan of the appointment. */
  created?: dateTime;
  /** The brief description of the appointment as would be shown on a subject line in a meeting request, or appointment list. Detailed or expanded information should be put in the comment field. */
  description?: string;
  /** Date/Time that the appointment is to conclude. */
  end?: instant;
  /** This records identifiers associated with this appointment concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation). */
  identifier?: Identifier[];
  /** The referral request this appointment is allocated to assess (incoming referral). */
  incomingReferral?: Reference[];
  /** Reason the appointment has been scheduled to take place, as specified using information from another resource. When the patient arrives and the encounter begins it may be used as the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure. */
  indication?: Reference[];
  /** Number of minutes that the appointment is to take. This can be less than the duration between the start and end times (where actual time of appointment is only an estimate or is a planned appointment request). */
  minutesDuration?: positiveInt;
  /** List of participants involved in the appointment. */
  participant: AppointmentParticipant[];
  /** The priority of the appointment. Can be used to make informed decisions if needing to re-prioritize appointments. (The iCal Standard specifies 0 as undefined, 1 as highest, 9 as lowest priority). */
  priority?: unsignedInt;
  /** The reason that this appointment is being scheduled. This is more clinical than administrative. */
  reason?: CodeableConcept[];
  /** A set of date ranges (potentially including times) that the appointment is preferred to be scheduled within. When using these values, the minutes duration should be provided to indicate the length of the appointment to fill and populate the start/end times for the actual allocated time. */
  requestedPeriod?: Period[];
  /** A broad categorisation of the service that is to be performed during this appointment. */
  serviceCategory?: CodeableConcept;
  /** The specific service that is to be performed during this appointment. */
  serviceType?: CodeableConcept[];
  /** The slots from the participants' schedules that will be filled by the appointment. */
  slot?: Reference[];
  /** The specialty of a practitioner that would be required to perform the service requested in this appointment. */
  specialty?: CodeableConcept[];
  /** Date/Time that the appointment is to take place. */
  start?: instant;
  /** The overall status of the Appointment. Each of the participants has their own participation status which indicates their involvement in the process, however this status indicates the shared status. */
  status: AppointmentStatus;
  /** Additional information to support the appointment provided when making the appointment. */
  supportingInformation?: Reference[];
}
export interface Appointment extends _Appointment {
  constructor: { new (): Appointment };
}
export var Appointment: { new (): Appointment };

/** A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s). */
interface _AppointmentParticipant extends _BackboneElement {
  /** A Person, Location/HealthcareService or Device that is participating in the appointment. */
  actor?: Reference;
  /** Is this participant required to be present at the meeting. This covers a use-case where 2 doctors need to meet to discuss the results for a specific patient, and the patient is not required to be present. */
  required?: ParticipantRequired;
  /** Participation status of the actor. */
  status: ParticipationStatus;
  /** Role of participant in the appointment. */
  type?: CodeableConcept[];
}
export interface AppointmentParticipant extends _AppointmentParticipant {
  constructor: { new (): AppointmentParticipant };
}
export var AppointmentParticipant: { new (): AppointmentParticipant };

/** A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.If the element is present, it must have either a @value, an @id, or extensions */
interface _AppointmentResponse extends _DomainResource {
  /** A Person, Location/HealthcareService or Device that is participating in the appointment. */
  actor?: Reference;
  /** Appointment that this response is replying to. */
  appointment: Reference;
  /** Additional comments about the appointment. */
  comment?: string;
  /** This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time. */
  end?: instant;
  /** This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate. */
  identifier?: Identifier[];
  /** Participation status of the participant. When the status is declined or tentative if the start/end times are different to the appointment, then these times should be interpreted as a requested time change. When the status is accepted, the times can either be the time of the appointment (as a confirmation of the time) or can be empty. */
  participantStatus: ParticipationStatus;
  /** Role of participant in the appointment. */
  participantType?: CodeableConcept[];
  /** Date/Time that the appointment is to take place, or requested new start time. */
  start?: instant;
}
export interface AppointmentResponse extends _AppointmentResponse {
  constructor: { new (): AppointmentResponse };
}
export var AppointmentResponse: { new (): AppointmentResponse };

/** The free/busy status of an appointment.If the element is present, it must have either a @value, an @id, or extensions */
interface _AppointmentStatus extends _Element {
  value?: AppointmentStatusList;
}
export interface AppointmentStatus extends _AppointmentStatus {
  constructor: { new (): AppointmentStatus };
}
export var AppointmentStatus: { new (): AppointmentStatus };

export type AppointmentStatusList =
  | 'proposed'
  | 'pending'
  | 'booked'
  | 'arrived'
  | 'fulfilled'
  | 'cancelled'
  | 'noshow'
  | 'entered-in-error';
interface _AppointmentStatusList extends _codePrimitive {
  content: AppointmentStatusList;
}

/** The type of direction to use for assertion.If the element is present, it must have either a @value, an @id, or extensions */
interface _AssertionDirectionType extends _Element {
  value?: AssertionDirectionTypeList;
}
export interface AssertionDirectionType extends _AssertionDirectionType {
  constructor: { new (): AssertionDirectionType };
}
export var AssertionDirectionType: { new (): AssertionDirectionType };

export type AssertionDirectionTypeList = 'response' | 'request';
interface _AssertionDirectionTypeList extends _codePrimitive {
  content: AssertionDirectionTypeList;
}

/** The type of operator to use for assertion.If the element is present, it must have either a @value, an @id, or extensions */
interface _AssertionOperatorType extends _Element {
  value?: AssertionOperatorTypeList;
}
export interface AssertionOperatorType extends _AssertionOperatorType {
  constructor: { new (): AssertionOperatorType };
}
export var AssertionOperatorType: { new (): AssertionOperatorType };

export type AssertionOperatorTypeList =
  | 'equals'
  | 'notEquals'
  | 'in'
  | 'notIn'
  | 'greaterThan'
  | 'lessThan'
  | 'empty'
  | 'notEmpty'
  | 'contains'
  | 'notContains'
  | 'eval';
interface _AssertionOperatorTypeList extends _codePrimitive {
  content: AssertionOperatorTypeList;
}

/** The type of response code to use for assertion.If the element is present, it must have either a @value, an @id, or extensions */
interface _AssertionResponseTypes extends _Element {
  value?: AssertionResponseTypesList;
}
export interface AssertionResponseTypes extends _AssertionResponseTypes {
  constructor: { new (): AssertionResponseTypes };
}
export var AssertionResponseTypes: { new (): AssertionResponseTypes };

export type AssertionResponseTypesList =
  | 'okay'
  | 'created'
  | 'noContent'
  | 'notModified'
  | 'bad'
  | 'forbidden'
  | 'notFound'
  | 'methodNotAllowed'
  | 'conflict'
  | 'gone'
  | 'preconditionFailed'
  | 'unprocessable';
interface _AssertionResponseTypesList extends _codePrimitive {
  content: AssertionResponseTypesList;
}

/** For referring to data content defined in other formats.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _Attachment extends _Element {
  /** Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate. */
  contentType?: code;
  /** The date that the attachment was first created. */
  creation?: dateTime;
  /** The actual data of the attachment - a sequence of bytes. In XML, represented using base64. */
  data?: base64Binary;
  /** The calculated hash of the data using SHA-1. Represented using base64. */
  hash?: base64Binary;
  /** The human language of the content. The value can be any valid value according to BCP 47. */
  language?: code;
  /** The number of bytes of data that make up this attachment (before base64 encoding, if that is done). */
  size?: unsignedInt;
  /** A label or set of text to display in place of the data. */
  title?: string;
  /** An alternative location where the data can be accessed. */
  url?: string;
}
export interface Attachment extends _Attachment {
  constructor: { new (): Attachment };
}
export var Attachment: { new (): Attachment };

/** A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.If the element is present, it must have either a @value, an @id, or extensions */
interface _AuditEvent extends _DomainResource {
  /** Indicator for type of action performed during the event that generated the audit. */
  action?: AuditEventAction;
  /** An actor taking an active role in the event or activity that is logged. */
  agent: AuditEventAgent[];
  /** Specific instances of data or objects that have been accessed. */
  entity?: AuditEventEntity[];
  /** Indicates whether the event succeeded or failed. */
  outcome?: AuditEventOutcome;
  /** A free text description of the outcome of the event. */
  outcomeDesc?: string;
  /** The purposeOfUse (reason) that was used during the event being recorded. */
  purposeOfEvent?: CodeableConcept[];
  /** The time when the event occurred on the source. */
  recorded: instant;
  /** The system that is reporting the event. */
  source: AuditEventSource;
  /** Identifier for the category of event. */
  subtype?: Coding[];
  /** Identifier for a family of the event.  For example, a menu item, program, rule, policy, function code, application name or URL. It identifies the performed function. */
  type: Coding;
}
export interface AuditEvent extends _AuditEvent {
  constructor: { new (): AuditEvent };
}
export var AuditEvent: { new (): AuditEvent };

/** Indicator for type of action performed during the event that generated the eventIf the element is present, it must have either a @value, an @id, or extensions */
interface _AuditEventAction extends _Element {
  value?: AuditEventActionList;
}
export interface AuditEventAction extends _AuditEventAction {
  constructor: { new (): AuditEventAction };
}
export var AuditEventAction: { new (): AuditEventAction };

export type AuditEventActionList = 'C' | 'R' | 'U' | 'D' | 'E';
interface _AuditEventActionList extends _codePrimitive {
  content: AuditEventActionList;
}

/** A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage. */
interface _AuditEventAgent extends _BackboneElement {
  /** Alternative agent Identifier. For a human, this should be a user identifier text string from authentication system. This identifier would be one known to a common authentication system (e.g. single sign-on), if available. */
  altId?: string;
  /** Where the event occurred. */
  location?: Reference;
  /** Type of media involved. Used when the event is about exporting/importing onto media. */
  media?: Coding;
  /** Human-meaningful name for the agent. */
  name?: string;
  /** Logical network location for application activity, if the activity has a network location. */
  network?: AuditEventNetwork;
  /** The policy or plan that authorized the activity being recorded. Typically, a single activity may have multiple applicable policies, such as patient consent, guarantor funding, etc. The policy would also indicate the security token used. */
  policy?: uri[];
  /** The reason (purpose of use), specific to this agent, that was used during the event being recorded. */
  purposeOfUse?: CodeableConcept[];
  /** Direct reference to a resource that identifies the agent. */
  reference?: Reference;
  /** Indicator that the user is or is not the requestor, or initiator, for the event being audited. */
  requestor: boolean;
  /** The security role that the user was acting under, that come from local codes defined by the access control security system (e.g. RBAC, ABAC) used in the local context. */
  role?: CodeableConcept[];
  /** Unique identifier for the user actively participating in the event. */
  userId?: Identifier;
}
export interface AuditEventAgent extends _AuditEventAgent {
  constructor: { new (): AuditEventAgent };
}
export var AuditEventAgent: { new (): AuditEventAgent };

/** The type of network access point of this agent in the audit eventIf the element is present, it must have either a @value, an @id, or extensions */
interface _AuditEventAgentNetworkType extends _Element {
  value?: AuditEventAgentNetworkTypeList;
}
export interface AuditEventAgentNetworkType extends _AuditEventAgentNetworkType {
  constructor: { new (): AuditEventAgentNetworkType };
}
export var AuditEventAgentNetworkType: { new (): AuditEventAgentNetworkType };

export type AuditEventAgentNetworkTypeList = '1' | '2' | '3' | '4' | '5';
interface _AuditEventAgentNetworkTypeList extends _codePrimitive {
  content: AuditEventAgentNetworkTypeList;
}

/** A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage. */
interface _AuditEventDetail extends _BackboneElement {
  /** The type of extra detail provided in the value. */
  type: string;
  /** The details, base64 encoded. Used to carry bulk information. */
  value: base64Binary;
}
export interface AuditEventDetail extends _AuditEventDetail {
  constructor: { new (): AuditEventDetail };
}
export var AuditEventDetail: { new (): AuditEventDetail };

/** A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage. */
interface _AuditEventEntity extends _BackboneElement {
  /** Text that describes the entity in more detail. */
  description?: string;
  /** Tagged value pairs for conveying additional information about the entity. */
  detail?: AuditEventDetail[];
  /** Identifies a specific instance of the entity. The reference should always be version specific. */
  identifier?: Identifier;
  /** Identifier for the data life-cycle stage for the entity. */
  lifecycle?: Coding;
  /** A name of the entity in the audit event. */
  name?: string;
  /** The query parameters for a query-type entities. */
  query?: base64Binary;
  /** Identifies a specific instance of the entity. The reference should be version specific. */
  reference?: Reference;
  /** Code representing the role the entity played in the event being audited. */
  role?: Coding;
  /** Security labels for the identified entity. */
  securityLabel?: Coding[];
  /** The type of the object that was involved in this audit event. */
  type?: Coding;
}
export interface AuditEventEntity extends _AuditEventEntity {
  constructor: { new (): AuditEventEntity };
}
export var AuditEventEntity: { new (): AuditEventEntity };

/** A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage. */
interface _AuditEventNetwork extends _BackboneElement {
  /** An identifier for the network access point of the user device for the audit event. */
  address?: string;
  /** An identifier for the type of network access point that originated the audit event. */
  type?: AuditEventAgentNetworkType;
}
export interface AuditEventNetwork extends _AuditEventNetwork {
  constructor: { new (): AuditEventNetwork };
}
export var AuditEventNetwork: { new (): AuditEventNetwork };

/** Indicates whether the event succeeded or failedIf the element is present, it must have either a @value, an @id, or extensions */
interface _AuditEventOutcome extends _Element {
  value?: AuditEventOutcomeList;
}
export interface AuditEventOutcome extends _AuditEventOutcome {
  constructor: { new (): AuditEventOutcome };
}
export var AuditEventOutcome: { new (): AuditEventOutcome };

export type AuditEventOutcomeList = '0' | '4' | '8' | '12';
interface _AuditEventOutcomeList extends _codePrimitive {
  content: AuditEventOutcomeList;
}

/** A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage. */
interface _AuditEventSource extends _BackboneElement {
  /** Identifier of the source where the event was detected. */
  identifier: Identifier;
  /** Logical source location within the healthcare enterprise network.  For example, a hospital or other provider location within a multi-entity provider group. */
  site?: string;
  /** Code specifying the type of source where event originated. */
  type?: Coding[];
}
export interface AuditEventSource extends _AuditEventSource {
  constructor: { new (): AuditEventSource };
}
export var AuditEventSource: { new (): AuditEventSource };

/** Base definition for all elements that are defined inside a resource - but not those in a data type.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _BackboneElement extends _Element {
  /** May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. */
  modifierExtension?: Extension[];
}
export interface BackboneElement extends _BackboneElement {
  constructor: { new (): BackboneElement };
}
export var BackboneElement: { new (): BackboneElement };

/** A stream of bytesA stream of bytes, base64 encodedIf the element is present, it must have either a @value, an @id, or extensions */
interface _base64Binary extends _Element {
  value?: string;
}
export interface base64Binary extends _base64Binary {
  constructor: { new (): base64Binary };
}
export var base64Binary: { new (): base64Binary };

export type base64BinaryPrimitive = string;
type _base64BinaryPrimitive = Primitive._string;

/** Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.If the element is present, it must have either a @value, an @id, or extensions */
interface _Basic extends _DomainResource {
  /** Indicates who was responsible for creating the resource instance. */
  author?: Reference;
  /** Identifies the 'type' of resource - equivalent to the resource name for other resources. */
  code: CodeableConcept;
  /** Identifies when the resource was first created. */
  created?: date;
  /** Identifier assigned to the resource for business purposes, outside the context of FHIR. */
  identifier?: Identifier[];
  /** Identifies the patient, practitioner, device or any other resource that is the "focus" of this resource. */
  subject?: Reference;
}
export interface Basic extends _Basic {
  constructor: { new (): Basic };
}
export var Basic: { new (): Basic };

/** A binary resource can contain any content, whether text, image, pdf, zip archive, etc.If the element is present, it must have either a @value, an @id, or extensions */
interface _Binary extends _Resource {
  /** The actual content, base64 encoded. */
  content: base64Binary;
  /** MimeType of the binary content represented as a standard MimeType (BCP 13). */
  contentType: code;
  /** Treat this binary as if it was this other resource for access control purposes. */
  securityContext?: Reference;
}
export interface Binary extends _Binary {
  constructor: { new (): Binary };
}
export var Binary: { new (): Binary };

/** Indication of the degree of conformance expectations associated with a binding.If the element is present, it must have either a @value, an @id, or extensions */
interface _BindingStrength extends _Element {
  value?: BindingStrengthList;
}
export interface BindingStrength extends _BindingStrength {
  constructor: { new (): BindingStrength };
}
export var BindingStrength: { new (): BindingStrength };

export type BindingStrengthList = 'required' | 'extensible' | 'preferred' | 'example';
interface _BindingStrengthList extends _codePrimitive {
  content: BindingStrengthList;
}

/** Record details about the anatomical location of a specimen or body part.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.If the element is present, it must have either a @value, an @id, or extensions */
interface _BodySite extends _DomainResource {
  /** Whether this body site is in active use. */
  active?: boolean;
  /** Named anatomical location - ideally coded where possible. */
  code?: CodeableConcept;
  /** A summary, charactarization or explanation of the anatomic location. */
  description?: string;
  /** Identifier for this instance of the anatomical location. */
  identifier?: Identifier[];
  /** Image or images used to identify a location. */
  image?: Attachment[];
  /** The person to which the body site belongs. */
  patient: Reference;
  /** Qualifier to refine the anatomical location.  These include qualifiers for laterality, relative location, directionality, number, and plane. */
  qualifier?: CodeableConcept[];
}
export interface BodySite extends _BodySite {
  constructor: { new (): BodySite };
}
export var BodySite: { new (): BodySite };

/** Value of "true" or "false"If the element is present, it must have either a @value, an @id, or extensions */
interface _boolean extends _Element {
  value?: boolean;
}
export interface fhirboolean extends _boolean {
  constructor: { new (): boolean };
}
export var boolean: { new (): boolean };

export type booleanPrimitive = boolean;
type _booleanPrimitive = Primitive._boolean;

/** A container for a collection of resources.If the element is present, it must have either a @value, an @id, or extensions */
interface _Bundle extends _Resource {
  /** An entry in a bundle resource - will either contain a resource, or information about a resource (transactions and history only). */
  entry?: BundleEntry[];
  /** A persistent identifier for the batch that won't change as a batch is copied from server to server. */
  identifier?: Identifier;
  /** A series of links that provide context to this bundle. */
  link?: BundleLink[];
  /** Digital Signature - base64 encoded. XML-DSIg or a JWT. */
  signature?: Signature;
  /** If a set of search matches, this is the total number of matches for the search (as opposed to the number of results in this bundle). */
  total?: number;
  /** Indicates the purpose of this bundle - how it was intended to be used. */
  type: string;
  resourceType?: string;
}
export interface Bundle extends _Bundle {} //{ constructor: { new (): Bundle } }
export var Bundle: { new (): Bundle };

/** A container for a collection of resources. */
interface _BundleEntry extends _BackboneElement {
  /** The Absolute URL for the resource.  The fullUrl SHALL not disagree with the id in the resource. The fullUrl is a version independent reference to the resource. The fullUrl element SHALL have a value except that:
   * * fullUrl can be empty on a POST (although it does not need to when specifying a temporary id for reference in the bundle)
   * * Results from operations might involve resources that are not identified. */
  fullUrl?: string;
  /** A series of links that provide context to this entry. */
  link?: BundleLink[];
  /** Additional information about how this entry should be processed as part of a transaction. */
  request?: BundleRequest;
  /** The Resources for the entry. */
  resource?: any;
  /** Additional information about how this entry should be processed as part of a transaction. */
  response?: BundleResponse;
  /** Information about the search process that lead to the creation of this entry. */
  search?: BundleSearch;
}
export interface BundleEntry extends _BundleEntry {}
export var BundleEntry: { new (): BundleEntry };

/** A container for a collection of resources. */
interface _BundleLink extends _BackboneElement {
  /** A name which details the functional use for this link - see [http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1](http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1). */
  relation: string;
  /** The reference details for the link. */
  url: uri;
}
export interface BundleLink extends _BundleLink {
  constructor: { new (): BundleLink };
}
export var BundleLink: { new (): BundleLink };

/** A container for a collection of resources. */
interface _BundleRequest extends _BackboneElement {
  /** Only perform the operation if the Etag value matches. For more information, see the API section ["Managing Resource Contention"](http.html#concurrency). */
  ifMatch?: string;
  /** Only perform the operation if the last updated date matches. See the API documentation for ["Conditional Read"](http.html#cread). */
  ifModifiedSince?: instant;
  /** Instruct the server not to perform the create if a specified resource already exists. For further information, see the API documentation for ["Conditional Create"](http.html#ccreate). This is just the query portion of the URL - what follows the "?" (not including the "?"). */
  ifNoneExist?: string;
  /** If the ETag values match, return a 304 Not Modified status. See the API documentation for ["Conditional Read"](http.html#cread). */
  ifNoneMatch?: string;
  /** The HTTP verb for this entry in either a change history, or a transaction/ transaction response. */
  method: HTTPVerb;
  /** The URL for this entry, relative to the root (the address to which the request is posted). */
  url: uri;
}
export interface BundleRequest extends _BundleRequest {
  constructor: { new (): BundleRequest };
}
export var BundleRequest: { new (): BundleRequest };

/** A container for a collection of resources. */
interface _BundleResponse extends _BackboneElement {
  /** The etag for the resource, it the operation for the entry produced a versioned resource (see [Resource Metadata and Versioning](http.html#versioning) and [Managing Resource Contention](http.html#concurrency)). */
  etag?: string;
  /** The date/time that the resource was modified on the server. */
  lastModified?: instant;
  /** The location header created by processing this operation. */
  location?: uri;
  /** An OperationOutcome containing hints and warnings produced as part of processing this entry in a batch or transaction. */
  outcome?: ResourceContainer;
  /** The status code returned by processing this entry. The status SHALL start with a 3 digit HTTP code (e.g. 404) and may contain the standard HTTP description associated with the status code. */
  status: string;
}
export interface BundleResponse extends _BundleResponse {
  constructor: { new (): BundleResponse };
}
export var BundleResponse: { new (): BundleResponse };

/** A container for a collection of resources. */
interface _BundleSearch extends _BackboneElement {
  /** Why this entry is in the result set - whether it's included as a match or because of an _include requirement. */
  mode?: SearchEntryMode;
  /** When searching, the server's search ranking score for the entry. */
  score?: decimal;
}
export interface BundleSearch extends _BundleSearch {
  constructor: { new (): BundleSearch };
}
export var BundleSearch: { new (): BundleSearch };

/** Indicates the purpose of a bundle - how it was intended to be used.If the element is present, it must have either a @value, an @id, or extensions */
interface _BundleType extends _Element {
  value?: BundleTypeList;
}
export interface BundleType extends _BundleType {
  constructor: { new (): BundleType };
}
export var BundleType: { new (): BundleType };

export type BundleTypeList =
  | 'document'
  | 'message'
  | 'transaction'
  | 'transaction-response'
  | 'batch'
  | 'batch-response'
  | 'history'
  | 'searchset'
  | 'collection';
interface _BundleTypeList extends _codePrimitive {
  content: BundleTypeList;
}

/** A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.If the element is present, it must have either a @value, an @id, or extensions */
interface _CapabilityStatement extends _DomainResource {
  /** A code that indicates whether the application accepts unknown elements or extensions when reading resources. */
  acceptUnknown: UnknownContentCode;
  /** Contact details to assist a user in finding and communicating with the publisher. */
  contact?: ContactDetail[];
  /** A copyright statement relating to the capability statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the capability statement. */
  copyright?: markdown;
  /** The date  (and optionally time) when the capability statement was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the capability statement changes. */
  date: dateTime;
  /** A free text natural language description of the capability statement from a consumer's perspective. Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP. */
  description?: markdown;
  /** A document definition. */
  document?: CapabilityStatementDocument[];
  /** A boolean value to indicate that this capability statement is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage. */
  experimental?: boolean;
  /** The version of the FHIR specification on which this capability statement is based. */
  fhirVersion: id;
  /** A list of the formats supported by this implementation using their content types. */
  format: code[];
  /** Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program. */
  implementation?: CapabilityStatementImplementation;
  /** A list of implementation guides that the server does (or should) support in their entirety. */
  implementationGuide?: uri[];
  /** Reference to a canonical URL of another CapabilityStatement that this software implements or uses. This capability statement is a published API description that corresponds to a business service. The rest of the capability statement does not need to repeat the details of the referenced resource, but can do so. */
  instantiates?: uri[];
  /** A legal or geographic region in which the capability statement is intended to be used. */
  jurisdiction?: CodeableConcept[];
  /** The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind not instance of software) or a class of implementation (e.g. a desired purchase). */
  kind: CapabilityStatementKind;
  /** A description of the messaging capabilities of the solution. */
  messaging?: CapabilityStatementMessaging[];
  /** A natural language name identifying the capability statement. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
  name?: string;
  /** A list of the patch formats supported by this implementation using their content types. */
  patchFormat?: code[];
  /** A list of profiles that represent different use cases supported by the system. For a server, "supported by the system" means the system hosts/produces a set of resources that are conformant to a particular profile, and allows clients that use its services to search using this profile and to find appropriate data. For a client, it means the system will search by this profile and process data according to the guidance implicit in the profile. See further discussion in [Using Profiles](profiling.html#profile-uses). */
  profile?: Reference[];
  /** The name of the individual or organization that published the capability statement. */
  publisher?: string;
  /** Explaination of why this capability statement is needed and why it has been designed as it has. */
  purpose?: markdown;
  /** A definition of the restful capabilities of the solution, if any. */
  rest?: CapabilityStatementRest[];
  /** Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation. */
  software?: CapabilityStatementSoftware;
  /** The status of this capability statement. Enables tracking the life-cycle of the content. */
  status: PublicationStatus;
  /** A short, descriptive, user-friendly title for the capability statement. */
  title?: string;
  /** An absolute URI that is used to identify this capability statement when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this capability statement is (or will be) published. The URL SHOULD include the major version of the capability statement. For more information see [Technical and Business Versions](resource.html#versions). */
  url?: uri;
  /** The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate capability statement instances. */
  useContext?: UsageContext[];
  /** The identifier that is used to identify this version of the capability statement when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the capability statement author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
  version?: string;
}
export interface CapabilityStatement extends _CapabilityStatement {
  constructor: { new (): CapabilityStatement };
}
export var CapabilityStatement: { new (): CapabilityStatement };

/** A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
interface _CapabilityStatementCertificate extends _BackboneElement {
  /** Actual certificate. */
  blob?: base64Binary;
  /** Mime type for a certificate. */
  type?: code;
}
export interface CapabilityStatementCertificate extends _CapabilityStatementCertificate {
  constructor: { new (): CapabilityStatementCertificate };
}
export var CapabilityStatementCertificate: { new (): CapabilityStatementCertificate };

/** A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
interface _CapabilityStatementDocument extends _BackboneElement {
  /** A description of how the application supports or uses the specified document profile.  For example, when documents are created, what action is taken with consumed documents, etc. */
  documentation?: string;
  /** Mode of this document declaration - whether an application is a producer or consumer. */
  mode: DocumentMode;
  /** A constraint on a resource used in the document. */
  profile: Reference;
}
export interface CapabilityStatementDocument extends _CapabilityStatementDocument {
  constructor: { new (): CapabilityStatementDocument };
}
export var CapabilityStatementDocument: { new (): CapabilityStatementDocument };

/** A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
interface _CapabilityStatementEndpoint extends _BackboneElement {
  /** The network address of the end-point. For solutions that do not use network addresses for routing, it can be just an identifier. */
  address: uri;
  /** A list of the messaging transport protocol(s) identifiers, supported by this endpoint. */
  protocol: Coding;
}
export interface CapabilityStatementEndpoint extends _CapabilityStatementEndpoint {
  constructor: { new (): CapabilityStatementEndpoint };
}
export var CapabilityStatementEndpoint: { new (): CapabilityStatementEndpoint };

/** A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
interface _CapabilityStatementEvent extends _BackboneElement {
  /** The impact of the content of the message. */
  category?: MessageSignificanceCategory;
  /** A coded identifier of a supported messaging event. */
  code: Coding;
  /** Guidance on how this event is handled, such as internal system trigger points, business rules, etc. */
  documentation?: string;
  /** A resource associated with the event.  This is the resource that defines the event. */
  focus: ResourceType;
  /** The mode of this event declaration - whether an application is a sender or receiver. */
  mode: EventCapabilityMode;
  /** Information about the request for this event. */
  request: Reference;
  /** Information about the response for this event. */
  response: Reference;
}
export interface CapabilityStatementEvent extends _CapabilityStatementEvent {
  constructor: { new (): CapabilityStatementEvent };
}
export var CapabilityStatementEvent: { new (): CapabilityStatementEvent };

/** A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
interface _CapabilityStatementImplementation extends _BackboneElement {
  /** Information about the specific installation that this capability statement relates to. */
  description: string;
  /** An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces. */
  url?: uri;
}
export interface CapabilityStatementImplementation extends _CapabilityStatementImplementation {
  constructor: { new (): CapabilityStatementImplementation };
}
export var CapabilityStatementImplementation: { new (): CapabilityStatementImplementation };

/** A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
interface _CapabilityStatementInteraction extends _BackboneElement {
  /** Coded identifier of the operation, supported by the system resource. */
  code: TypeRestfulInteraction;
  /** Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'. */
  documentation?: string;
}
export interface CapabilityStatementInteraction extends _CapabilityStatementInteraction {
  constructor: { new (): CapabilityStatementInteraction };
}
export var CapabilityStatementInteraction: { new (): CapabilityStatementInteraction };

/** A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
interface _CapabilityStatementInteraction1 extends _BackboneElement {
  /** A coded identifier of the operation, supported by the system. */
  code: SystemRestfulInteraction;
  /** Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented. */
  documentation?: string;
}
export interface CapabilityStatementInteraction1 extends _CapabilityStatementInteraction1 {
  constructor: { new (): CapabilityStatementInteraction1 };
}
export var CapabilityStatementInteraction1: { new (): CapabilityStatementInteraction1 };

/** How a capability statement is intended to be used.If the element is present, it must have either a @value, an @id, or extensions */
interface _CapabilityStatementKind extends _Element {
  value?: CapabilityStatementKindList;
}
export interface CapabilityStatementKind extends _CapabilityStatementKind {
  constructor: { new (): CapabilityStatementKind };
}
export var CapabilityStatementKind: { new (): CapabilityStatementKind };

export type CapabilityStatementKindList = 'instance' | 'capability' | 'requirements';
interface _CapabilityStatementKindList extends _codePrimitive {
  content: CapabilityStatementKindList;
}

/** A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
interface _CapabilityStatementMessaging extends _BackboneElement {
  /** Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the capability statement.  For example, the process for becoming an authorized messaging exchange partner. */
  documentation?: string;
  /** An endpoint (network accessible address) to which messages and/or replies are to be sent. */
  endpoint?: CapabilityStatementEndpoint[];
  /** A description of the solution's support for an event at this end-point. */
  event?: CapabilityStatementEvent[];
  /** Length if the receiver's reliable messaging cache in minutes (if a receiver) or how long the cache length on the receiver should be (if a sender). */
  reliableCache?: unsignedInt;
  /** References to message definitions for messages this system can send or receive. */
  supportedMessage?: CapabilityStatementSupportedMessage[];
}
export interface CapabilityStatementMessaging extends _CapabilityStatementMessaging {
  constructor: { new (): CapabilityStatementMessaging };
}
export var CapabilityStatementMessaging: { new (): CapabilityStatementMessaging };

/** A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
interface _CapabilityStatementOperation extends _BackboneElement {
  /** Where the formal definition can be found. */
  definition: Reference;
  /** The name of the operation or query. For an operation, this is the name  prefixed with $ and used in the URL. For a query, this is the name used in the _query parameter when the query is called. */
  name: string;
}
export interface CapabilityStatementOperation extends _CapabilityStatementOperation {
  constructor: { new (): CapabilityStatementOperation };
}
export var CapabilityStatementOperation: { new (): CapabilityStatementOperation };

/** A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
interface _CapabilityStatementResource extends _BackboneElement {
  /** A flag that indicates that the server supports conditional create. */
  conditionalCreate?: boolean;
  /** A code that indicates how the server supports conditional delete. */
  conditionalDelete?: ConditionalDeleteStatus;
  /** A code that indicates how the server supports conditional read. */
  conditionalRead?: ConditionalReadStatus;
  /** A flag that indicates that the server supports conditional update. */
  conditionalUpdate?: boolean;
  /** Additional information about the resource type used by the system. */
  documentation?: markdown;
  /** Identifies a restful operation supported by the solution. */
  interaction: CapabilityStatementInteraction[];
  /** A specification of the profile that describes the solution's overall support for the resource, including any constraints on cardinality, bindings, lengths or other limitations. See further discussion in [Using Profiles](profiling.html#profile-uses). */
  profile?: Reference;
  /** A flag for whether the server is able to return past versions as part of the vRead operation. */
  readHistory?: boolean;
  /** A set of flags that defines how references are supported. */
  referencePolicy?: ReferenceHandlingPolicy[];
  /** A list of _include values supported by the server. */
  searchInclude?: string[];
  /** Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation. */
  searchParam?: CapabilityStatementSearchParam[];
  /** A list of _revinclude (reverse include) values supported by the server. */
  searchRevInclude?: string[];
  /** A type of resource exposed via the restful interface. */
  type: ResourceType;
  /** A flag to indicate that the server allows or needs to allow the client to create new identities on the server (e.g. that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server. */
  updateCreate?: boolean;
  /** This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API. */
  versioning?: ResourceVersionPolicy;
}
export interface CapabilityStatementResource extends _CapabilityStatementResource {
  constructor: { new (): CapabilityStatementResource };
}
export var CapabilityStatementResource: { new (): CapabilityStatementResource };

/** A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
interface _CapabilityStatementRest extends _BackboneElement {
  /** An absolute URI which is a reference to the definition of a compartment that the system supports. The reference is to a CompartmentDefinition resource by its canonical URL . */
  compartment?: uri[];
  /** Information about the system's restful capabilities that apply across all applications, such as security. */
  documentation?: string;
  /** A specification of restful operations supported by the system. */
  interaction?: CapabilityStatementInteraction1[];
  /** Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations. */
  mode: RestfulCapabilityMode;
  /** Definition of an operation or a named query together with its parameters and their meaning and type. */
  operation?: CapabilityStatementOperation[];
  /** A specification of the restful capabilities of the solution for a specific resource type. */
  resource?: CapabilityStatementResource[];
  /** Search parameters that are supported for searching all resources for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation. */
  searchParam?: CapabilityStatementSearchParam[];
  /** Information about security implementation from an interface perspective - what a client needs to know. */
  security?: CapabilityStatementSecurity;
}
export interface CapabilityStatementRest extends _CapabilityStatementRest {
  constructor: { new (): CapabilityStatementRest };
}
export var CapabilityStatementRest: { new (): CapabilityStatementRest };

/** A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
interface _CapabilityStatementSearchParam extends _BackboneElement {
  /** An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [[[SearchParameter.url]]]). */
  definition?: uri;
  /** This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms. */
  documentation?: string;
  /** The name of the search parameter used in the interface. */
  name: string;
  /** The type of value a search parameter refers to, and how the content is interpreted. */
  type: SearchParamType;
}
export interface CapabilityStatementSearchParam extends _CapabilityStatementSearchParam {
  constructor: { new (): CapabilityStatementSearchParam };
}
export var CapabilityStatementSearchParam: { new (): CapabilityStatementSearchParam };

/** A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
interface _CapabilityStatementSecurity extends _BackboneElement {
  /** Certificates associated with security profiles. */
  certificate?: CapabilityStatementCertificate[];
  /** Server adds CORS headers when responding to requests - this enables javascript applications to use the server. */
  cors?: boolean;
  /** General description of how security works. */
  description?: string;
  /** Types of security services that are supported/required by the system. */
  service?: CodeableConcept[];
}
export interface CapabilityStatementSecurity extends _CapabilityStatementSecurity {
  constructor: { new (): CapabilityStatementSecurity };
}
export var CapabilityStatementSecurity: { new (): CapabilityStatementSecurity };

/** A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
interface _CapabilityStatementSoftware extends _BackboneElement {
  /** Name software is known by. */
  name: string;
  /** Date this version of the software was released. */
  releaseDate?: dateTime;
  /** The version identifier for the software covered by this statement. */
  version?: string;
}
export interface CapabilityStatementSoftware extends _CapabilityStatementSoftware {
  constructor: { new (): CapabilityStatementSoftware };
}
export var CapabilityStatementSoftware: { new (): CapabilityStatementSoftware };

/** A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
interface _CapabilityStatementSupportedMessage extends _BackboneElement {
  /** Points to a message definition that identifies the messaging event, message structure, allowed responses, etc. */
  definition: Reference;
  /** The mode of this event declaration - whether application is sender or receiver. */
  mode: EventCapabilityMode;
}
export interface CapabilityStatementSupportedMessage extends _CapabilityStatementSupportedMessage {
  constructor: { new (): CapabilityStatementSupportedMessage };
}
export var CapabilityStatementSupportedMessage: { new (): CapabilityStatementSupportedMessage };

/** Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.If the element is present, it must have either a @value, an @id, or extensions */
interface _CarePlan extends _DomainResource {
  /** Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc. */
  activity?: CarePlanActivity[];
  /** Identifies the conditions/problems/concerns/diagnoses/etc. whose management and/or mitigation are handled by this plan. */
  addresses?: Reference[];
  /** Identifies the individual(s) or ogranization who is responsible for the content of the care plan. */
  author?: Reference[];
  /** A care plan that is fulfilled in whole or in part by this care plan. */
  basedOn?: Reference[];
  /** Identifies all people and organizations who are expected to be involved in the care envisioned by this plan. */
  careTeam?: Reference[];
  /** Identifies what "kind" of plan this is to support differentiation between multiple co-existing plans; e.g. "Home health", "psychiatric", "asthma", "disease management", "wellness plan", etc. */
  category?: CodeableConcept[];
  /** Identifies the original context in which this particular CarePlan was created. */
  context?: Reference;
  /** Identifies the protocol, questionnaire, guideline or other specification the care plan should be conducted in accordance with. */
  definition?: Reference[];
  /** A description of the scope and nature of the plan. */
  description?: string;
  /** Describes the intended objective(s) of carrying out the care plan. */
  goal?: Reference[];
  /** This records identifiers associated with this care plan that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation). */
  identifier?: Identifier[];
  /** Indicates the level of authority/intentionality associated with the care plan and where the care plan fits into the workflow chain. */
  intent: CarePlanIntent;
  /** General notes about the care plan not covered elsewhere. */
  note?: Annotation[];
  /** A larger care plan of which this particular care plan is a component or step. */
  partOf?: Reference[];
  /** Indicates when the plan did (or is intended to) come into effect and end. */
  period?: Period;
  /** Completed or terminated care plan whose function is taken by this new care plan. */
  replaces?: Reference[];
  /** Indicates whether the plan is currently being acted upon, represents future intentions or is now a historical record. */
  status: CarePlanStatus;
  /** Identifies the patient or group whose intended care is described by the plan. */
  subject: Reference;
  /** Identifies portions of the patient's record that specifically influenced the formation of the plan.  These might include co-morbidities, recent procedures, limitations, recent assessments, etc. */
  supportingInfo?: Reference[];
  /** Human-friendly name for the CarePlan. */
  title?: string;
}
export interface CarePlan extends _CarePlan {
  constructor: { new (): CarePlan };
}
export var CarePlan: { new (): CarePlan };

/** Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions. */
interface _CarePlanActivity extends _BackboneElement {
  /** A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc. */
  detail?: CarePlanDetail;
  /** Identifies the outcome at the point when the status of the activity is assessed.  For example, the outcome of an education activity could be patient understands (or not). */
  outcomeCodeableConcept?: CodeableConcept[];
  /** Details of the outcome or action resulting from the activity.  The reference to an "event" resource, such as Procedure or Encounter or Observation, is the result/outcome of the activity itself.  The activity can be conveyed using CarePlan.activity.detail OR using the CarePlan.activity.reference (a reference to a “request” resource). */
  outcomeReference?: Reference[];
  /** Notes about the adherence/status/progress of the activity. */
  progress?: Annotation[];
  /** The details of the proposed activity represented in a specific resource. */
  reference?: Reference;
}
export interface CarePlanActivity extends _CarePlanActivity {
  constructor: { new (): CarePlanActivity };
}
export var CarePlanActivity: { new (): CarePlanActivity };

/** Indicates where the activity is at in its overall life cycle.If the element is present, it must have either a @value, an @id, or extensions */
interface _CarePlanActivityStatus extends _Element {
  value?: CarePlanActivityStatusList;
}
export interface CarePlanActivityStatus extends _CarePlanActivityStatus {
  constructor: { new (): CarePlanActivityStatus };
}
export var CarePlanActivityStatus: { new (): CarePlanActivityStatus };

export type CarePlanActivityStatusList = 'not-started' | 'scheduled' | 'in-progress' | 'on-hold' | 'completed' | 'cancelled' | 'unknown';
interface _CarePlanActivityStatusList extends _codePrimitive {
  content: CarePlanActivityStatusList;
}

/** Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions. */
interface _CarePlanDetail extends _BackboneElement {
  /** High-level categorization of the type of activity in a care plan. */
  category?: CodeableConcept;
  /** Detailed description of the type of planned activity; e.g. What lab test, what procedure, what kind of encounter. */
  code?: CodeableConcept;
  /** Identifies the quantity expected to be consumed in a given day. */
  dailyAmount?: Quantity;
  /** Identifies the protocol, questionnaire, guideline or other specification the planned activity should be conducted in accordance with. */
  definition?: Reference;
  /** This provides a textual description of constraints on the intended activity occurrence, including relation to other activities.  It may also include objectives, pre-conditions and end-conditions.  Finally, it may convey specifics about the activity such as body site, method, route, etc. */
  description?: string;
  /** Internal reference that identifies the goals that this activity is intended to contribute towards meeting. */
  goal?: Reference[];
  /** Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc. */
  location?: Reference;
  /** Identifies who's expected to be involved in the activity. */
  performer?: Reference[];
  productCodeableConcept?: CodeableConcept;
  productReference?: Reference;
  /** If true, indicates that the described activity is one that must NOT be engaged in when following the plan.  If false, indicates that the described activity is one that should be engaged in when following the plan. */
  prohibited?: boolean;
  /** Identifies the quantity expected to be supplied, administered or consumed by the subject. */
  quantity?: Quantity;
  /** Provides the rationale that drove the inclusion of this particular activity as part of the plan or the reason why the activity was prohibited. */
  reasonCode?: CodeableConcept[];
  /** Provides the health condition(s) that drove the inclusion of this particular activity as part of the plan. */
  reasonReference?: Reference[];
  scheduledPeriod?: Period;
  scheduledString?: string;
  scheduledTiming?: Timing;
  /** Identifies what progress is being made for the specific activity. */
  status: CarePlanActivityStatus;
  /** Provides reason why the activity isn't yet started, is on hold, was cancelled, etc. */
  statusReason?: string;
}
export interface CarePlanDetail extends _CarePlanDetail {
  constructor: { new (): CarePlanDetail };
}
export var CarePlanDetail: { new (): CarePlanDetail };

/** Codes indicating the degree of authority/intentionality associated with a care planIf the element is present, it must have either a @value, an @id, or extensions */
interface _CarePlanIntent extends _Element {
  value?: CarePlanIntentList;
}
export interface CarePlanIntent extends _CarePlanIntent {
  constructor: { new (): CarePlanIntent };
}
export var CarePlanIntent: { new (): CarePlanIntent };

export type CarePlanIntentList = 'proposal' | 'plan' | 'order' | 'option';
interface _CarePlanIntentList extends _codePrimitive {
  content: CarePlanIntentList;
}

/** Indicates whether the plan is currently being acted upon, represents future intentions or is now a historical record.If the element is present, it must have either a @value, an @id, or extensions */
interface _CarePlanStatus extends _Element {
  value?: CarePlanStatusList;
}
export interface CarePlanStatus extends _CarePlanStatus {
  constructor: { new (): CarePlanStatus };
}
export var CarePlanStatus: { new (): CarePlanStatus };

export type CarePlanStatusList = 'draft' | 'active' | 'suspended' | 'completed' | 'entered-in-error' | 'cancelled' | 'unknown';
interface _CarePlanStatusList extends _codePrimitive {
  content: CarePlanStatusList;
}

/** The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care for a patient.If the element is present, it must have either a @value, an @id, or extensions */
interface _CareTeam extends _DomainResource {
  /** Identifies what kind of team.  This is to support differentiation between multiple co-existing teams, such as care plan team, episode of care team, longitudinal care team. */
  category?: CodeableConcept[];
  /** The encounter or episode of care that establishes the context for this care team. */
  context?: Reference;
  /** This records identifiers associated with this care team that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. */
  identifier?: Identifier[];
  /** The organization responsible for the care team. */
  managingOrganization?: Reference[];
  /** A label for human use intended to distinguish like teams.  E.g. the "red" vs. "green" trauma teams. */
  name?: string;
  /** Comments made about the CareTeam. */
  note?: Annotation[];
  /** Identifies all people and organizations who are expected to be involved in the care team. */
  participant?: CareTeamParticipant[];
  /** Indicates when the team did (or is intended to) come into effect and end. */
  period?: Period;
  /** Describes why the care team exists. */
  reasonCode?: CodeableConcept[];
  /** Condition(s) that this care team addresses. */
  reasonReference?: Reference[];
  /** Indicates the current state of the care team. */
  status?: CareTeamStatus;
  /** Identifies the patient or group whose intended care is handled by the team. */
  subject?: Reference;
}
export interface CareTeam extends _CareTeam {
  constructor: { new (): CareTeam };
}
export var CareTeam: { new (): CareTeam };

/** The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care for a patient. */
interface _CareTeamParticipant extends _BackboneElement {
  /** The specific person or organization who is participating/expected to participate in the care team. */
  member?: Reference;
  /** The organization of the practitioner. */
  onBehalfOf?: Reference;
  /** Indicates when the specific member or organization did (or is intended to) come into effect and end. */
  period?: Period;
  /** Indicates specific responsibility of an individual within the care team, such as "Primary care physician", "Trained social worker counselor", "Caregiver", etc. */
  role?: CodeableConcept;
}
export interface CareTeamParticipant extends _CareTeamParticipant {
  constructor: { new (): CareTeamParticipant };
}
export var CareTeamParticipant: { new (): CareTeamParticipant };

/** Indicates the status of the care team.If the element is present, it must have either a @value, an @id, or extensions */
interface _CareTeamStatus extends _Element {
  value?: CareTeamStatusList;
}
export interface CareTeamStatus extends _CareTeamStatus {
  constructor: { new (): CareTeamStatus };
}
export var CareTeamStatus: { new (): CareTeamStatus };

export type CareTeamStatusList = 'proposed' | 'active' | 'suspended' | 'inactive' | 'entered-in-error';
interface _CareTeamStatusList extends _codePrimitive {
  content: CareTeamStatusList;
}

/** The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation.If the element is present, it must have either a @value, an @id, or extensions */
interface _ChargeItem extends _DomainResource {
  /** Account into which this ChargeItems belongs. */
  account?: Reference[];
  /** The anatomical location where the related service has been applied. */
  bodysite?: CodeableConcept[];
  /** A code that identifies the charge, like a billing code. */
  code: CodeableConcept;
  /** The encounter or episode of care that establishes the context for this event. */
  context?: Reference;
  /** References the source of pricing information, rules of application for the code this ChargeItem uses. */
  definition?: uri[];
  /** Date the charge item was entered. */
  enteredDate?: dateTime;
  /** The device, practitioner, etc. who entered the charge item. */
  enterer?: Reference;
  /** Factor overriding the factor determined by the rules associated with the code. */
  factorOverride?: decimal;
  /** Identifiers assigned to this event performer or other systems. */
  identifier?: Identifier;
  /** Comments made about the event by the performer, subject or other participants. */
  note?: Annotation[];
  occurrenceDateTime?: dateTime;
  occurrencePeriod?: Period;
  occurrenceTiming?: Timing;
  /** If the list price or the rule based factor associated with the code is overridden, this attribute can capture a text to indicate the  reason for this action. */
  overrideReason?: string;
  /** Indicates who or what performed or participated in the charged service. */
  participant?: ChargeItemParticipant[];
  /** ChargeItems can be grouped to larger ChargeItems covering the whole set. */
  partOf?: Reference[];
  /** The organization requesting the service. */
  performingOrganization?: Reference;
  /** Total price of the charge overriding the list price associated with the code. */
  priceOverride?: Money;
  /** Quantity of which the charge item has been serviced. */
  quantity?: Quantity;
  /** Describes why the event occurred in coded or textual form. */
  reason?: CodeableConcept[];
  /** The organization performing the service. */
  requestingOrganization?: Reference;
  /** Indicated the rendered service that caused this charge. */
  service?: Reference[];
  /** The current state of the ChargeItem. */
  status: ChargeItemStatus;
  /** The individual or set of individuals the action is being or was performed on. */
  subject: Reference;
  /** Further information supporting the this charge. */
  supportingInformation?: Reference[];
}
export interface ChargeItem extends _ChargeItem {
  constructor: { new (): ChargeItem };
}
export var ChargeItem: { new (): ChargeItem };

/** The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation. */
interface _ChargeItemParticipant extends _BackboneElement {
  /** The device, practitioner, etc. who performed or participated in the service. */
  actor: Reference;
  /** Describes the type of performance or participation(e.g. primary surgeon, anaesthesiologiest, etc.). */
  role?: CodeableConcept;
}
export interface ChargeItemParticipant extends _ChargeItemParticipant {
  constructor: { new (): ChargeItemParticipant };
}
export var ChargeItemParticipant: { new (): ChargeItemParticipant };

/** Codes identifying the stage lifecycle stage of a ChargeItemIf the element is present, it must have either a @value, an @id, or extensions */
interface _ChargeItemStatus extends _Element {
  value?: ChargeItemStatusList;
}
export interface ChargeItemStatus extends _ChargeItemStatus {
  constructor: { new (): ChargeItemStatus };
}
export var ChargeItemStatus: { new (): ChargeItemStatus };

export type ChargeItemStatusList = 'planned' | 'billable' | 'not-billable' | 'aborted' | 'billed' | 'entered-in-error' | 'unknown';
interface _ChargeItemStatusList extends _codePrimitive {
  content: ChargeItemStatusList;
}

/** A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.If the element is present, it must have either a @value, an @id, or extensions */
interface _Claim extends _DomainResource {
  /** An accident which resulted in the need for healthcare services. */
  accident?: ClaimAccident;
  /** The billable period for which charges are being submitted. */
  billablePeriod?: Period;
  /** The members of the team who provided the overall service as well as their role and whether responsible and qualifications. */
  careTeam?: ClaimCareTeam[];
  /** The date when the enclosed suite of services were performed or completed. */
  created?: dateTime;
  /** List of patient diagnosis for which care is sought. */
  diagnosis?: ClaimDiagnosis[];
  /** The start and optional end dates of when the patient was precluded from working due to the treatable condition(s). */
  employmentImpacted?: Period;
  /** Person who created the invoice/claim/pre-determination or pre-authorization. */
  enterer?: Reference;
  /** Facility where the services were provided. */
  facility?: Reference;
  /** In the case of a Pre-Determination/Pre-Authorization the provider may request that funds in the amount of the expected Benefit be reserved ('Patient' or 'Provider') to pay for the Benefits determined on the subsequent claim(s). 'None' explicitly indicates no funds reserving is requested. */
  fundsReserve?: CodeableConcept;
  /** The start and optional end dates of when the patient was confined to a treatment center. */
  hospitalization?: Period;
  /** The business identifier for the instance: claim number, pre-determination or pre-authorization number. */
  identifier?: Identifier[];
  /** Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues. Often there are mutiple jurisdiction specific valuesets which are required. */
  information?: ClaimInformation[];
  /** Financial instrument by which payment information for health care. */
  insurance?: ClaimInsurance[];
  /** The Insurer who is target of the request. */
  insurer?: Reference;
  /** First tier of goods and services. */
  item?: ClaimItem[];
  /** The organization which is responsible for the bill, claim pre-determination, pre-authorization. */
  organization?: Reference;
  /** Original prescription which has been superceded by this prescription to support the dispensing of pharmacy services, medications or products. For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefor issues a new precription for an alternate medication which has the same theraputic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'. */
  originalPrescription?: Reference;
  /** Patient Resource. */
  patient?: Reference;
  /** The party to be reimbursed for the services. */
  payee?: ClaimPayee;
  /** Prescription to support the dispensing of Pharmacy or Vision products. */
  prescription?: Reference;
  /** Immediate (STAT), best effort (NORMAL), deferred (DEFER). */
  priority?: CodeableConcept;
  /** Ordered list of patient procedures performed to support the adjudication. */
  procedure?: ClaimProcedure[];
  /** The provider which is responsible for the bill, claim pre-determination, pre-authorization. */
  provider?: Reference;
  /** The referral resource which lists the date, practitioner, reason and other supporting information. */
  referral?: Reference;
  /** Other claims which are related to this claim such as prior claim versions or for related services. */
  related?: ClaimRelated[];
  /** The status of the resource instance. */
  status?: FinancialResourceStatusCodes;
  /** A finer grained suite of claim subtype codes which may convey Inpatient vs Outpatient and/or a specialty service. In the US the BillType. */
  subType?: CodeableConcept[];
  /** The total value of the claim. */
  total?: Money;
  /** The category of claim, eg, oral, pharmacy, vision, insitutional, professional. */
  type?: CodeableConcept;
  /** Complete (Bill or Claim), Proposed (Pre-Authorization), Exploratory (Pre-determination). */
  use?: Use;
}
export interface Claim extends _Claim {
  constructor: { new (): Claim };
}
export var Claim: { new (): Claim };

/** A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery. */
interface _ClaimAccident extends _BackboneElement {
  /** Date of an accident which these services are addressing. */
  date: date;
  locationAddress?: Address;
  locationReference?: Reference;
  /** Type of accident: work, auto, etc. */
  type?: CodeableConcept;
}
export interface ClaimAccident extends _ClaimAccident {
  constructor: { new (): ClaimAccident };
}
export var ClaimAccident: { new (): ClaimAccident };

/** A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery. */
interface _ClaimCareTeam extends _BackboneElement {
  /** Member of the team who provided the overall service. */
  provider: Reference;
  /** The qualification which is applicable for this service. */
  qualification?: CodeableConcept;
  /** The party who is billing and responsible for the claimed good or service rendered to the patient. */
  responsible?: boolean;
  /** The lead, assisting or supervising practitioner and their discipline if a multidisiplinary team. */
  role?: CodeableConcept;
  /** Sequence of the careTeam which serves to order and provide a link. */
  sequence: positiveInt;
}
export interface ClaimCareTeam extends _ClaimCareTeam {
  constructor: { new (): ClaimCareTeam };
}
export var ClaimCareTeam: { new (): ClaimCareTeam };

/** A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery. */
interface _ClaimDetail extends _BackboneElement {
  /** Health Care Service Type Codes  to identify the classification of service or benefits. */
  category?: CodeableConcept;
  /** A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount. */
  factor?: decimal;
  /** Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours. */
  modifier?: CodeableConcept[];
  /** The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied. */
  net?: Money;
  /** For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program. */
  programCode?: CodeableConcept[];
  /** The number of repetitions of a service or product. */
  quantity?: Quantity;
  /** The type of reveneu or cost center providing the product and/or service. */
  revenue?: CodeableConcept;
  /** A service line number. */
  sequence: positiveInt;
  /** If this is an actual service or product line, ie. not a Group, then use code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI). If a grouping item then use a group code to indicate the type of thing being grouped eg. 'glasses' or 'compound'. */
  service?: CodeableConcept;
  /** Third tier of goods and services. */
  subDetail?: ClaimSubDetail[];
  /** List of Unique Device Identifiers associated with this line item. */
  udi?: Reference[];
  /** If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group. */
  unitPrice?: Money;
}
export interface ClaimDetail extends _ClaimDetail {
  constructor: { new (): ClaimDetail };
}
export var ClaimDetail: { new (): ClaimDetail };

/** A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery. */
interface _ClaimDiagnosis extends _BackboneElement {
  diagnosisCodeableConcept: CodeableConcept;
  diagnosisReference: Reference;
  /** The package billing code, for example DRG, based on the assigned grouping code system. */
  packageCode?: CodeableConcept;
  /** Sequence of diagnosis which serves to provide a link. */
  sequence: positiveInt;
  /** The type of the Diagnosis, for example: admitting, primary, secondary, discharge. */
  type?: CodeableConcept[];
}
export interface ClaimDiagnosis extends _ClaimDiagnosis {
  constructor: { new (): ClaimDiagnosis };
}
export var ClaimDiagnosis: { new (): ClaimDiagnosis };

/** A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery. */
interface _ClaimInformation extends _BackboneElement {
  /** The general class of the information supplied: information; exception; accident, employment; onset, etc. */
  category: CodeableConcept;
  /** System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought which may influence the adjudication. */
  code?: CodeableConcept;
  /** For example, provides the reason for: the additional stay, or missing tooth or any other situation where a reason code is required in addition to the content. */
  reason?: CodeableConcept;
  /** Sequence of the information element which serves to provide a link. */
  sequence: positiveInt;
  timingDate?: date;
  timingPeriod?: Period;
  valueAttachment?: Attachment;
  valueQuantity?: Quantity;
  valueReference?: Reference;
  valueString?: string;
}
export interface ClaimInformation extends _ClaimInformation {
  constructor: { new (): ClaimInformation };
}
export var ClaimInformation: { new (): ClaimInformation };

/** A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery. */
interface _ClaimInsurance extends _BackboneElement {
  /** The contract number of a business agreement which describes the terms and conditions. */
  businessArrangement?: string;
  /** The Coverages adjudication details. */
  claimResponse?: Reference;
  /** Reference to the program or plan identification, underwriter or payor. */
  coverage: Reference;
  /** A flag to indicate that this Coverage is the focus for adjudication. The Coverage against which the claim is to be adjudicated. */
  focal: boolean;
  /** A list of references from the Insurer to which these services pertain. */
  preAuthRef?: string[];
  /** Sequence of coverage which serves to provide a link and convey coordination of benefit order. */
  sequence: positiveInt;
}
export interface ClaimInsurance extends _ClaimInsurance {
  constructor: { new (): ClaimInsurance };
}
export var ClaimInsurance: { new (): ClaimInsurance };

/** A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery. */
interface _ClaimItem extends _BackboneElement {
  /** Physical service site on the patient (limb, tooth, etc). */
  bodySite?: CodeableConcept;
  /** CareTeam applicable for this service or product line. */
  careTeamLinkId?: positiveInt[];
  /** Health Care Service Type Codes  to identify the classification of service or benefits. */
  category?: CodeableConcept;
  /** Second tier of goods and services. */
  detail?: ClaimDetail[];
  /** Diagnosis applicable for this service or product line. */
  diagnosisLinkId?: positiveInt[];
  /** A billed item may include goods or services provided in multiple encounters. */
  encounter?: Reference[];
  /** A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount. */
  factor?: decimal;
  /** Exceptions, special conditions and supporting information pplicable for this service or product line. */
  informationLinkId?: positiveInt[];
  locationAddress?: Address;
  locationCodeableConcept?: CodeableConcept;
  locationReference?: Reference;
  /** Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours. */
  modifier?: CodeableConcept[];
  /** The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied. */
  net?: Money;
  /** Procedures applicable for this service or product line. */
  procedureLinkId?: positiveInt[];
  /** For programs which require reason codes for the inclusion or covering of this billed item under the program or sub-program. */
  programCode?: CodeableConcept[];
  /** The number of repetitions of a service or product. */
  quantity?: Quantity;
  /** The type of reveneu or cost center providing the product and/or service. */
  revenue?: CodeableConcept;
  /** A service line number. */
  sequence: positiveInt;
  /** If this is an actual service or product line, ie. not a Group, then use code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,RXNorm,ACHI,CCI). If a grouping item then use a group code to indicate the type of thing being grouped eg. 'glasses' or 'compound'. */
  service?: CodeableConcept;
  servicedDate?: date;
  servicedPeriod?: Period;
  /** A region or surface of the site, eg. limb region or tooth surface(s). */
  subSite?: CodeableConcept[];
  /** List of Unique Device Identifiers associated with this line item. */
  udi?: Reference[];
  /** If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group. */
  unitPrice?: Money;
}
export interface ClaimItem extends _ClaimItem {
  constructor: { new (): ClaimItem };
}
export var ClaimItem: { new (): ClaimItem };

/** A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery. */
interface _ClaimPayee extends _BackboneElement {
  /** Party to be reimbursed: Subscriber, provider, other. */
  party?: Reference;
  /** organization | patient | practitioner | relatedperson. */
  resourceType?: Coding;
  /** Type of Party to be reimbursed: Subscriber, provider, other. */
  type: CodeableConcept;
}
export interface ClaimPayee extends _ClaimPayee {
  constructor: { new (): ClaimPayee };
}
export var ClaimPayee: { new (): ClaimPayee };

/** A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery. */
interface _ClaimProcedure extends _BackboneElement {
  /** Date and optionally time the procedure was performed . */
  date?: dateTime;
  procedureCodeableConcept: CodeableConcept;
  procedureReference: Reference;
  /** Sequence of procedures which serves to order and provide a link. */
  sequence: positiveInt;
}
export interface ClaimProcedure extends _ClaimProcedure {
  constructor: { new (): ClaimProcedure };
}
export var ClaimProcedure: { new (): ClaimProcedure };

/** A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery. */
interface _ClaimRelated extends _BackboneElement {
  /** Other claims which are related to this claim such as prior claim versions or for related services. */
  claim?: Reference;
  /** An alternate organizational reference to the case or file to which this particular claim pertains - eg Property/Casualy insurer claim # or Workers Compensation case # . */
  reference?: Identifier;
  /** For example prior or umbrella. */
  relationship?: CodeableConcept;
}
export interface ClaimRelated extends _ClaimRelated {
  constructor: { new (): ClaimRelated };
}
export var ClaimRelated: { new (): ClaimRelated };

/** This resource provides the adjudication details from the processing of a Claim resource.If the element is present, it must have either a @value, an @id, or extensions */
interface _ClaimResponse extends _DomainResource {
  /** The first tier service adjudications for payor added services. */
  addItem?: ClaimResponseAddItem[];
  /** Request for additional supporting or authorizing information, such as: documents, images or resources. */
  communicationRequest?: Reference[];
  /** The date when the enclosed suite of services were performed or completed. */
  created?: dateTime;
  /** A description of the status of the adjudication. */
  disposition?: string;
  /** Mutually exclusive with Services Provided (Item). */
  error?: ClaimResponseError[];
  /** The form to be used for printing the content. */
  form?: CodeableConcept;
  /** The Response business identifier. */
  identifier?: Identifier[];
  /** Financial instrument by which payment information for health care. */
  insurance?: ClaimResponseInsurance[];
  /** The Insurer who produced this adjudicated response. */
  insurer?: Reference;
  /** The first tier service adjudications for submitted services. */
  item?: ClaimResponseItem[];
  /** Processing outcome errror, partial or complete processing. */
  outcome?: CodeableConcept;
  /** Patient Resource. */
  patient?: Reference;
  /** Party to be reimbursed: Subscriber, provider, other. */
  payeeType?: CodeableConcept;
  /** Payment details for the claim if the claim has been paid. */
  payment?: ClaimResponsePayment;
  /** Note text. */
  processNote?: ClaimResponseProcessNote[];
  /** Original request resource referrence. */
  request?: Reference;
  /** The organization which is responsible for the services rendered to the patient. */
  requestOrganization?: Reference;
  /** The practitioner who is responsible for the services rendered to the patient. */
  requestProvider?: Reference;
  /** Status of funds reservation (For provider, for Patient, None). */
  reserved?: Coding;
  /** The status of the resource instance. */
  status?: FinancialResourceStatusCodes;
  /** Total amount of benefit payable (Equal to sum of the Benefit amounts from all detail lines and additions less the Unallocated Deductible). */
  totalBenefit?: Money;
  /** The total cost of the services reported. */
  totalCost?: Money;
  /** The amount of deductible applied which was not allocated to any particular service line. */
  unallocDeductable?: Money;
}
export interface ClaimResponse extends _ClaimResponse {
  constructor: { new (): ClaimResponse };
}
export var ClaimResponse: { new (): ClaimResponse };

/** This resource provides the adjudication details from the processing of a Claim resource. */
interface _ClaimResponseAddItem extends _BackboneElement {
  /** The adjudications results. */
  adjudication?: ClaimResponseAdjudication[];
  /** Health Care Service Type Codes  to identify the classification of service or benefits. */
  category?: CodeableConcept;
  /** The second tier service adjudications for payor added services. */
  detail?: ClaimResponseDetail1[];
  /** The fee charged for the professional service or product.. */
  fee?: Money;
  /** Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours. */
  modifier?: CodeableConcept[];
  /** A list of note references to the notes provided below. */
  noteNumber?: positiveInt[];
  /** The type of reveneu or cost center providing the product and/or service. */
  revenue?: CodeableConcept;
  /** List of input service items which this service line is intended to replace. */
  sequenceLinkId?: positiveInt[];
  /** A code to indicate the Professional Service or Product supplied. */
  service?: CodeableConcept;
}
export interface ClaimResponseAddItem extends _ClaimResponseAddItem {
  constructor: { new (): ClaimResponseAddItem };
}
export var ClaimResponseAddItem: { new (): ClaimResponseAddItem };

/** This resource provides the adjudication details from the processing of a Claim resource. */
interface _ClaimResponseAdjudication extends _BackboneElement {
  /** Monetary amount associated with the code. */
  amount?: Money;
  /** Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc. */
  category: CodeableConcept;
  /** Adjudication reason such as limit reached. */
  reason?: CodeableConcept;
  /** A non-monetary value for example a percentage. Mutually exclusive to the amount element above. */
  value?: decimal;
}
export interface ClaimResponseAdjudication extends _ClaimResponseAdjudication {
  constructor: { new (): ClaimResponseAdjudication };
}
export var ClaimResponseAdjudication: { new (): ClaimResponseAdjudication };

/** This resource provides the adjudication details from the processing of a Claim resource. */
interface _ClaimResponseDetail extends _BackboneElement {
  /** The adjudications results. */
  adjudication?: ClaimResponseAdjudication[];
  /** A list of note references to the notes provided below. */
  noteNumber?: positiveInt[];
  /** A service line number. */
  sequenceLinkId: positiveInt;
  /** The third tier service adjudications for submitted services. */
  subDetail?: ClaimResponseSubDetail[];
}
export interface ClaimResponseDetail extends _ClaimResponseDetail {
  constructor: { new (): ClaimResponseDetail };
}
export var ClaimResponseDetail: { new (): ClaimResponseDetail };

/** This resource provides the adjudication details from the processing of a Claim resource. */
interface _ClaimResponseDetail1 extends _BackboneElement {
  /** The adjudications results. */
  adjudication?: ClaimResponseAdjudication[];
  /** Health Care Service Type Codes  to identify the classification of service or benefits. */
  category?: CodeableConcept;
  /** The fee charged for the professional service or product.. */
  fee?: Money;
  /** Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours. */
  modifier?: CodeableConcept[];
  /** A list of note references to the notes provided below. */
  noteNumber?: positiveInt[];
  /** The type of reveneu or cost center providing the product and/or service. */
  revenue?: CodeableConcept;
  /** A code to indicate the Professional Service or Product supplied. */
  service?: CodeableConcept;
}
export interface ClaimResponseDetail1 extends _ClaimResponseDetail1 {
  constructor: { new (): ClaimResponseDetail1 };
}
export var ClaimResponseDetail1: { new (): ClaimResponseDetail1 };

/** This resource provides the adjudication details from the processing of a Claim resource. */
interface _ClaimResponseError extends _BackboneElement {
  /** An error code,from a specified code system, which details why the claim could not be adjudicated. */
  code: CodeableConcept;
  /** The sequence number of the addition within the line item submitted which contains the error. This value is omitted when the error is not related to an Addition. */
  detailSequenceLinkId?: positiveInt;
  /** The sequence number of the line item submitted which contains the error. This value is omitted when the error is elsewhere. */
  sequenceLinkId?: positiveInt;
  /** The sequence number of the addition within the line item submitted which contains the error. This value is omitted when the error is not related to an Addition. */
  subdetailSequenceLinkId?: positiveInt;
}
export interface ClaimResponseError extends _ClaimResponseError {
  constructor: { new (): ClaimResponseError };
}
export var ClaimResponseError: { new (): ClaimResponseError };

/** This resource provides the adjudication details from the processing of a Claim resource. */
interface _ClaimResponseInsurance extends _BackboneElement {
  /** The contract number of a business agreement which describes the terms and conditions. */
  businessArrangement?: string;
  /** The Coverages adjudication details. */
  claimResponse?: Reference;
  /** Reference to the program or plan identification, underwriter or payor. */
  coverage: Reference;
  /** The instance number of the Coverage which is the focus for adjudication. The Coverage against which the claim is to be adjudicated. */
  focal: boolean;
  /** A list of references from the Insurer to which these services pertain. */
  preAuthRef?: string[];
  /** A service line item. */
  sequence: positiveInt;
}
export interface ClaimResponseInsurance extends _ClaimResponseInsurance {
  constructor: { new (): ClaimResponseInsurance };
}
export var ClaimResponseInsurance: { new (): ClaimResponseInsurance };

/** This resource provides the adjudication details from the processing of a Claim resource. */
interface _ClaimResponseItem extends _BackboneElement {
  /** The adjudication results. */
  adjudication?: ClaimResponseAdjudication[];
  /** The second tier service adjudications for submitted services. */
  detail?: ClaimResponseDetail[];
  /** A list of note references to the notes provided below. */
  noteNumber?: positiveInt[];
  /** A service line number. */
  sequenceLinkId: positiveInt;
}
export interface ClaimResponseItem extends _ClaimResponseItem {
  constructor: { new (): ClaimResponseItem };
}
export var ClaimResponseItem: { new (): ClaimResponseItem };

/** This resource provides the adjudication details from the processing of a Claim resource. */
interface _ClaimResponsePayment extends _BackboneElement {
  /** Adjustment to the payment of this transaction which is not related to adjudication of this transaction. */
  adjustment?: Money;
  /** Reason for the payment adjustment. */
  adjustmentReason?: CodeableConcept;
  /** Payable less any payment adjustment. */
  amount?: Money;
  /** Estimated payment data. */
  date?: date;
  /** Payment identifier. */
  identifier?: Identifier;
  /** Whether this represents partial or complete payment of the claim. */
  type?: CodeableConcept;
}
export interface ClaimResponsePayment extends _ClaimResponsePayment {
  constructor: { new (): ClaimResponsePayment };
}
export var ClaimResponsePayment: { new (): ClaimResponsePayment };

/** This resource provides the adjudication details from the processing of a Claim resource. */
interface _ClaimResponseProcessNote extends _BackboneElement {
  /** The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-EN" for England English. */
  language?: CodeableConcept;
  /** An integer associated with each note which may be referred to from each service line item. */
  number?: positiveInt;
  /** The note text. */
  text?: string;
  /** The note purpose: Print/Display. */
  type?: CodeableConcept;
}
export interface ClaimResponseProcessNote extends _ClaimResponseProcessNote {
  constructor: { new (): ClaimResponseProcessNote };
}
export var ClaimResponseProcessNote: { new (): ClaimResponseProcessNote };

/** This resource provides the adjudication details from the processing of a Claim resource. */
interface _ClaimResponseSubDetail extends _BackboneElement {
  /** The adjudications results. */
  adjudication?: ClaimResponseAdjudication[];
  /** A list of note references to the notes provided below. */
  noteNumber?: positiveInt[];
  /** A service line number. */
  sequenceLinkId: positiveInt;
}
export interface ClaimResponseSubDetail extends _ClaimResponseSubDetail {
  constructor: { new (): ClaimResponseSubDetail };
}
export var ClaimResponseSubDetail: { new (): ClaimResponseSubDetail };

/** A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery. */
interface _ClaimSubDetail extends _BackboneElement {
  /** Health Care Service Type Codes  to identify the classification of service or benefits. */
  category?: CodeableConcept;
  /** A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount. */
  factor?: decimal;
  /** Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours. */
  modifier?: CodeableConcept[];
  /** The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied. */
  net?: Money;
  /** For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program. */
  programCode?: CodeableConcept[];
  /** The number of repetitions of a service or product. */
  quantity?: Quantity;
  /** The type of reveneu or cost center providing the product and/or service. */
  revenue?: CodeableConcept;
  /** A service line number. */
  sequence: positiveInt;
  /** A code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI). */
  service?: CodeableConcept;
  /** List of Unique Device Identifiers associated with this line item. */
  udi?: Reference[];
  /** The fee for an addittional service or product or charge. */
  unitPrice?: Money;
}
export interface ClaimSubDetail extends _ClaimSubDetail {
  constructor: { new (): ClaimSubDetail };
}
export var ClaimSubDetail: { new (): ClaimSubDetail };

/** A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score.If the element is present, it must have either a @value, an @id, or extensions */
interface _ClinicalImpression extends _DomainResource {
  /** Action taken as part of assessment procedure. */
  action?: Reference[];
  /** The clinician performing the assessment. */
  assessor?: Reference;
  /** Categorizes the type of clinical assessment performed. */
  code?: CodeableConcept;
  /** The encounter or episode of care this impression was created as part of. */
  context?: Reference;
  /** Indicates when the documentation of the assessment was complete. */
  date?: dateTime;
  /** A summary of the context and/or cause of the assessment - why / where was it performed, and what patient events/status prompted it. */
  description?: string;
  effectiveDateTime?: dateTime;
  effectivePeriod?: Period;
  /** Specific findings or diagnoses that was considered likely or relevant to ongoing treatment. */
  finding?: ClinicalImpressionFinding[];
  /** A unique identifier assigned to the clinical impression that remains consistent regardless of what server the impression is stored on. */
  identifier?: Identifier[];
  /** One or more sets of investigations (signs, symptions, etc.). The actual grouping of investigations vary greatly depending on the type and context of the assessment. These investigations may include data generated during the assessment process, or data previously generated and recorded that is pertinent to the outcomes. */
  investigation?: ClinicalImpressionInvestigation[];
  /** Commentary about the impression, typically recorded after the impression itself was made, though supplemental notes by the original author could also appear. */
  note?: Annotation[];
  /** A reference to the last assesment that was conducted bon this patient. Assessments are often/usually ongoing in nature; a care provider (practitioner or team) will make new assessments on an ongoing basis as new data arises or the patient's conditions changes. */
  previous?: Reference;
  /** This a list of the relevant problems/conditions for a patient. */
  problem?: Reference[];
  /** Estimate of likely outcome. */
  prognosisCodeableConcept?: CodeableConcept[];
  /** RiskAssessment expressing likely outcome. */
  prognosisReference?: Reference[];
  /** Reference to a specific published clinical protocol that was followed during this assessment, and/or that provides evidence in support of the diagnosis. */
  protocol?: uri[];
  /** Identifies the workflow status of the assessment. */
  status: ClinicalImpressionStatus;
  /** The patient or group of individuals assessed as part of this record. */
  subject: Reference;
  /** A text summary of the investigations and the diagnosis. */
  summary?: string;
}
export interface ClinicalImpression extends _ClinicalImpression {
  constructor: { new (): ClinicalImpression };
}
export var ClinicalImpression: { new (): ClinicalImpression };

/** A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score. */
interface _ClinicalImpressionFinding extends _BackboneElement {
  /** Which investigations support finding or diagnosis. */
  basis?: string;
  itemCodeableConcept: CodeableConcept;
  itemReference: Reference;
}
export interface ClinicalImpressionFinding extends _ClinicalImpressionFinding {
  constructor: { new (): ClinicalImpressionFinding };
}
export var ClinicalImpressionFinding: { new (): ClinicalImpressionFinding };

/** A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score. */
interface _ClinicalImpressionInvestigation extends _BackboneElement {
  /** A name/code for the group ("set") of investigations. Typically, this will be something like "signs", "symptoms", "clinical", "diagnostic", but the list is not constrained, and others such groups such as (exposure|family|travel|nutitirional) history may be used. */
  code: CodeableConcept;
  /** A record of a specific investigation that was undertaken. */
  item?: Reference[];
}
export interface ClinicalImpressionInvestigation extends _ClinicalImpressionInvestigation {
  constructor: { new (): ClinicalImpressionInvestigation };
}
export var ClinicalImpressionInvestigation: { new (): ClinicalImpressionInvestigation };

/** The workflow state of a clinical impression.If the element is present, it must have either a @value, an @id, or extensions */
interface _ClinicalImpressionStatus extends _Element {
  value?: ClinicalImpressionStatusList;
}
export interface ClinicalImpressionStatus extends _ClinicalImpressionStatus {
  constructor: { new (): ClinicalImpressionStatus };
}
export var ClinicalImpressionStatus: { new (): ClinicalImpressionStatus };

export type ClinicalImpressionStatusList = 'draft' | 'completed' | 'entered-in-error';
interface _ClinicalImpressionStatusList extends _codePrimitive {
  content: ClinicalImpressionStatusList;
}

/** A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contentsIf the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions */
interface _code extends _Element {
  value: string;
}
export interface code extends _code {
  constructor: { new (): code };
}
export var code: { new (): code };

/** A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _CodeableConcept extends _Element {
  /** A reference to a code defined by a terminology system. */
  coding?: Coding[];
  /** A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user. */
  text?: string;
}
export interface CodeableConcept extends _CodeableConcept {
  constructor: { new (): CodeableConcept };
}
export var CodeableConcept: { new (): CodeableConcept };

export type codePrimitive = string;
type _codePrimitive = Primitive._string;

/** A code system resource specifies a set of codes drawn from one or more code systems.If the element is present, it must have either a @value, an @id, or extensions */
interface _CodeSystem extends _DomainResource {
  /** If code comparison is case sensitive when codes within this system are compared to each other. */
  caseSensitive?: boolean;
  /** True If code system defines a post-composition grammar. */
  compositional?: boolean;
  /** Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meaning of the hierarchical relationships are. */
  concept?: CodeSystemConcept[];
  /** Contact details to assist a user in finding and communicating with the publisher. */
  contact?: ContactDetail[];
  /** How much of the content of the code system - the concepts and codes it defines - are represented in this resource. */
  content: CodeSystemContentMode;
  /** A copyright statement relating to the code system and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the code system. */
  copyright?: markdown;
  /** The total number of concepts defined by the code system. Where the code system has a compositional grammar, the count refers to the number of base (primitive) concepts. */
  count?: unsignedInt;
  /** The date  (and optionally time) when the code system was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the code system changes. */
  date?: dateTime;
  /** A free text natural language description of the code system from a consumer's perspective. */
  description?: markdown;
  /** A boolean value to indicate that this code system is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage. */
  experimental?: boolean;
  /** A filter that can be used in a value set compose statement when selecting concepts using a filter. */
  filter?: CodeSystemFilter[];
  /** The meaning of the hierarchy of concepts. */
  hierarchyMeaning?: CodeSystemHierarchyMeaning;
  /** A formal identifier that is used to identify this code system when it is represented in other formats, or referenced in a specification, model, design or an instance. */
  identifier?: Identifier;
  /** A legal or geographic region in which the code system is intended to be used. */
  jurisdiction?: CodeableConcept[];
  /** A natural language name identifying the code system. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
  name?: string;
  /** A property defines an additional slot through which additional information can be provided about a concept. */
  property?: CodeSystemProperty[];
  /** The name of the individual or organization that published the code system. */
  publisher?: string;
  /** Explaination of why this code system is needed and why it has been designed as it has. */
  purpose?: markdown;
  /** The status of this code system. Enables tracking the life-cycle of the content. */
  status: PublicationStatus;
  /** A short, descriptive, user-friendly title for the code system. */
  title?: string;
  /** An absolute URI that is used to identify this code system when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this code system is (or will be) published. The URL SHOULD include the major version of the code system. For more information see [Technical and Business Versions](resource.html#versions). This is used in [Coding]{datatypes.html#Coding}.system. */
  url?: uri;
  /** The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate code system instances. */
  useContext?: UsageContext[];
  /** Canonical URL of value set that contains the entire code system. */
  valueSet?: uri;
  /** The identifier that is used to identify this version of the code system when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the code system author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. This is used in [Coding]{datatypes.html#Coding}.version. */
  version?: string;
  /** This flag is used to signify that the code system has not (or does not) maintain the definitions, and a version must be specified when referencing this code system. */
  versionNeeded?: boolean;
}
export interface CodeSystem extends _CodeSystem {
  constructor: { new (): CodeSystem };
}
export var CodeSystem: { new (): CodeSystem };

/** A code system resource specifies a set of codes drawn from one or more code systems. */
interface _CodeSystemConcept extends _BackboneElement {
  /** A code - a text symbol - that uniquely identifies the concept within the code system. */
  code: code;
  /** Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) - see hierarchyMeaning. */
  concept?: CodeSystemConcept[];
  /** The formal definition of the concept. The code system resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept. */
  definition?: string;
  /** Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc. */
  designation?: CodeSystemDesignation[];
  /** A human readable string that is the recommended default way to present this concept to a user. */
  display?: string;
  /** A property value for this concept. */
  property?: CodeSystemProperty1[];
}
export interface CodeSystemConcept extends _CodeSystemConcept {
  constructor: { new (): CodeSystemConcept };
}
export var CodeSystemConcept: { new (): CodeSystemConcept };

/** How much of the content of the code system - the concepts and codes it defines - are represented in a code system resourceIf the element is present, it must have either a @value, an @id, or extensions */
interface _CodeSystemContentMode extends _Element {
  value?: CodeSystemContentModeList;
}
export interface CodeSystemContentMode extends _CodeSystemContentMode {
  constructor: { new (): CodeSystemContentMode };
}
export var CodeSystemContentMode: { new (): CodeSystemContentMode };

export type CodeSystemContentModeList = 'not-present' | 'example' | 'fragment' | 'complete';
interface _CodeSystemContentModeList extends _codePrimitive {
  content: CodeSystemContentModeList;
}

/** A code system resource specifies a set of codes drawn from one or more code systems. */
interface _CodeSystemDesignation extends _BackboneElement {
  /** The language this designation is defined for. */
  language?: code;
  /** A code that details how this designation would be used. */
  use?: Coding;
  /** The text value for this designation. */
  value: string;
}
export interface CodeSystemDesignation extends _CodeSystemDesignation {
  constructor: { new (): CodeSystemDesignation };
}
export var CodeSystemDesignation: { new (): CodeSystemDesignation };

/** A code system resource specifies a set of codes drawn from one or more code systems. */
interface _CodeSystemFilter extends _BackboneElement {
  /** The code that identifies this filter when it is used in the instance. */
  code: code;
  /** A description of how or why the filter is used. */
  description?: string;
  /** A list of operators that can be used with the filter. */
  operator: FilterOperator[];
  /** A description of what the value for the filter should be. */
  value: string;
}
export interface CodeSystemFilter extends _CodeSystemFilter {
  constructor: { new (): CodeSystemFilter };
}
export var CodeSystemFilter: { new (): CodeSystemFilter };

/** The meaning of the hierarchy of concepts in a code systemIf the element is present, it must have either a @value, an @id, or extensions */
interface _CodeSystemHierarchyMeaning extends _Element {
  value?: CodeSystemHierarchyMeaningList;
}
export interface CodeSystemHierarchyMeaning extends _CodeSystemHierarchyMeaning {
  constructor: { new (): CodeSystemHierarchyMeaning };
}
export var CodeSystemHierarchyMeaning: { new (): CodeSystemHierarchyMeaning };

export type CodeSystemHierarchyMeaningList = 'grouped-by' | 'is-a' | 'part-of' | 'classified-with';
interface _CodeSystemHierarchyMeaningList extends _codePrimitive {
  content: CodeSystemHierarchyMeaningList;
}

/** A code system resource specifies a set of codes drawn from one or more code systems. */
interface _CodeSystemProperty extends _BackboneElement {
  /** A code that is used to identify the property. The code is used internally (in CodeSystem.concept.property.code) and also externally, such as in property filters. */
  code: code;
  /** A description of the property- why it is defined, and how its value might be used. */
  description?: string;
  /** The type of the property value. Properties of type "code" contain a code defined by the code system (e.g. a reference to anotherr defined concept). */
  type: PropertyType;
  /** Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system. */
  uri?: uri;
}
export interface CodeSystemProperty extends _CodeSystemProperty {
  constructor: { new (): CodeSystemProperty };
}
export var CodeSystemProperty: { new (): CodeSystemProperty };

/** A code system resource specifies a set of codes drawn from one or more code systems. */
interface _CodeSystemProperty1 extends _BackboneElement {
  /** A code that is a reference to CodeSystem.property.code. */
  code: code;
  valueBoolean: boolean;
  valueCode: code;
  valueCoding: Coding;
  valueDateTime: dateTime;
  valueInteger: integer;
  valueString: string;
}
export interface CodeSystemProperty1 extends _CodeSystemProperty1 {
  constructor: { new (): CodeSystemProperty1 };
}
export var CodeSystemProperty1: { new (): CodeSystemProperty1 };

/** A reference to a code defined by a terminology system.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _Coding extends _Element {
  /** A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination). */
  code?: string;
  /** A representation of the meaning of the code in the system, following the rules of the system. */
  display?: string;
  /** The identification of the code system that defines the meaning of the symbol in the code. */
  system?: uri;
  /** Indicates that this coding was chosen by a user directly - i.e. off a pick list of available items (codes or displays). */
  userSelected?: boolean;
  /** The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured. and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged. */
  version?: string;
}
export interface Coding extends _Coding {
  constructor: { new (): Coding };
}
export var Coding: { new (): Coding };

/** An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency was notified about a reportable condition.If the element is present, it must have either a @value, an @id, or extensions */
interface _Communication extends _DomainResource {
  /** An order, proposal or plan fulfilled in whole or in part by this Communication. */
  basedOn?: Reference[];
  /** The type of message conveyed such as alert, notification, reminder, instruction, etc. */
  category?: CodeableConcept[];
  /** The encounter within which the communication was sent. */
  context?: Reference;
  /** A protocol, guideline, or other definition that was adhered to in whole or in part by this communication event. */
  definition?: Reference[];
  /** Identifiers associated with this Communication that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation). */
  identifier?: Identifier[];
  /** A channel that was used for this communication (e.g. email, fax). */
  medium?: CodeableConcept[];
  /** If true, indicates that the described communication event did not actually occur. */
  notDone?: boolean;
  /** Describes why the communication event did not occur in coded and/or textual form. */
  notDoneReason?: CodeableConcept;
  /** Additional notes or commentary about the communication by the sender, receiver or other interested parties. */
  note?: Annotation[];
  /** Part of this action. */
  partOf?: Reference[];
  /** Text, attachment(s), or resource(s) that was communicated to the recipient. */
  payload?: CommunicationPayload[];
  /** The reason or justification for the communication. */
  reasonCode?: CodeableConcept[];
  /** Indicates another resource whose existence justifies this communication. */
  reasonReference?: Reference[];
  /** The time when this communication arrived at the destination. */
  received?: dateTime;
  /** The entity (e.g. person, organization, clinical information system, or device) which was the target of the communication. If receipts need to be tracked by individual, a separate resource instance will need to be created for each recipient.  Multiple recipient communications are intended where either a receipt(s) is not tracked (e.g. a mass mail-out) or is captured in aggregate (all emails confirmed received by a particular time). */
  recipient?: Reference[];
  /** The entity (e.g. person, organization, clinical information system, or device) which was the source of the communication. */
  sender?: Reference;
  /** The time when this communication was sent. */
  sent?: dateTime;
  /** The status of the transmission. */
  status: EventStatus;
  /** The patient or group that was the focus of this communication. */
  subject?: Reference;
  /** The resources which were responsible for or related to producing this communication. */
  topic?: Reference[];
}
export interface Communication extends _Communication {
  constructor: { new (): Communication };
}
export var Communication: { new (): Communication };

/** An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency was notified about a reportable condition. */
interface _CommunicationPayload extends _BackboneElement {
  contentAttachment: Attachment;
  contentReference: Reference;
  contentString: string;
}
export interface CommunicationPayload extends _CommunicationPayload {
  constructor: { new (): CommunicationPayload };
}
export var CommunicationPayload: { new (): CommunicationPayload };

/** A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.If the element is present, it must have either a @value, an @id, or extensions */
interface _CommunicationRequest extends _DomainResource {
  /** For draft requests, indicates the date of initial creation.  For requests with other statuses, indicates the date of activation. */
  authoredOn?: dateTime;
  /** A plan or proposal that is fulfilled in whole or in part by this request. */
  basedOn?: Reference[];
  /** The type of message to be sent such as alert, notification, reminder, instruction, etc. */
  category?: CodeableConcept[];
  /** The encounter or episode of care within which the communication request was created. */
  context?: Reference;
  /** A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition, prescription or similar form. */
  groupIdentifier?: Identifier;
  /** A unique ID of this request for reference purposes. It must be provided if user wants it returned as part of any output, otherwise it will be autogenerated, if needed, by CDS system. Does not need to be the actual ID of the source system. */
  identifier?: Identifier[];
  /** A channel that was used for this communication (e.g. email, fax). */
  medium?: CodeableConcept[];
  /** Comments made about the request by the requester, sender, recipient, subject or other participants. */
  note?: Annotation[];
  occurrenceDateTime?: dateTime;
  occurrencePeriod?: Period;
  /** Text, attachment(s), or resource(s) to be communicated to the recipient. */
  payload?: CommunicationRequestPayload[];
  /** Characterizes how quickly the proposed act must be initiated. Includes concepts such as stat, urgent, routine. */
  priority?: RequestPriority;
  /** Describes why the request is being made in coded or textual form. */
  reasonCode?: CodeableConcept[];
  /** Indicates another resource whose existence justifies this request. */
  reasonReference?: Reference[];
  /** The entity (e.g. person, organization, clinical information system, device, group, or care team) which is the intended target of the communication. */
  recipient?: Reference[];
  /** Completed or terminated request(s) whose function is taken by this new request. */
  replaces?: Reference[];
  /** The individual who initiated the request and has responsibility for its activation. */
  requester?: CommunicationRequestRequester;
  /** The entity (e.g. person, organization, clinical information system, or device) which is to be the source of the communication. */
  sender?: Reference;
  /** The status of the proposal or order. */
  status: RequestStatus;
  /** The patient or group that is the focus of this communication request. */
  subject?: Reference;
  /** The resources which were related to producing this communication request. */
  topic?: Reference[];
}
export interface CommunicationRequest extends _CommunicationRequest {
  constructor: { new (): CommunicationRequest };
}
export var CommunicationRequest: { new (): CommunicationRequest };

/** A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition. */
interface _CommunicationRequestPayload extends _BackboneElement {
  contentAttachment: Attachment;
  contentReference: Reference;
  contentString: string;
}
export interface CommunicationRequestPayload extends _CommunicationRequestPayload {
  constructor: { new (): CommunicationRequestPayload };
}
export var CommunicationRequestPayload: { new (): CommunicationRequestPayload };

/** A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition. */
interface _CommunicationRequestRequester extends _BackboneElement {
  /** The device, practitioner, etc. who initiated the request. */
  agent: Reference;
  /** The organization the device or practitioner was acting on behalf of. */
  onBehalfOf?: Reference;
}
export interface CommunicationRequestRequester extends _CommunicationRequestRequester {
  constructor: { new (): CommunicationRequestRequester };
}
export var CommunicationRequestRequester: { new (): CommunicationRequestRequester };

/** A compartment definition that defines how resources are accessed on a server.If the element is present, it must have either a @value, an @id, or extensions */
interface _CompartmentDefinition extends _DomainResource {
  /** Which compartment this definition describes. */
  code: CompartmentType;
  /** Contact details to assist a user in finding and communicating with the publisher. */
  contact?: ContactDetail[];
  /** The date  (and optionally time) when the compartment definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the compartment definition changes. */
  date?: dateTime;
  /** A free text natural language description of the compartment definition from a consumer's perspective. */
  description?: markdown;
  /** A boolean value to indicate that this compartment definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage. */
  experimental?: boolean;
  /** A legal or geographic region in which the compartment definition is intended to be used. */
  jurisdiction?: CodeableConcept[];
  /** A natural language name identifying the compartment definition. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
  name: string;
  /** The name of the individual or organization that published the compartment definition. */
  publisher?: string;
  /** Explaination of why this compartment definition is needed and why it has been designed as it has. */
  purpose?: markdown;
  /** Information about how a resource is related to the compartment. */
  resource?: CompartmentDefinitionResource[];
  /** Whether the search syntax is supported,. */
  search: boolean;
  /** The status of this compartment definition. Enables tracking the life-cycle of the content. */
  status: PublicationStatus;
  /** A short, descriptive, user-friendly title for the compartment definition. */
  title?: string;
  /** An absolute URI that is used to identify this compartment definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this compartment definition is (or will be) published. The URL SHOULD include the major version of the compartment definition. For more information see [Technical and Business Versions](resource.html#versions). */
  url: uri;
  /** The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate compartment definition instances. */
  useContext?: UsageContext[];
}
export interface CompartmentDefinition extends _CompartmentDefinition {
  constructor: { new (): CompartmentDefinition };
}
export var CompartmentDefinition: { new (): CompartmentDefinition };

/** A compartment definition that defines how resources are accessed on a server. */
interface _CompartmentDefinitionResource extends _BackboneElement {
  /** The name of a resource supported by the server. */
  code: ResourceType;
  /** Additional documentation about the resource and compartment. */
  documentation?: string;
  /** The name of a search parameter that represents the link to the compartment. More than one may be listed because a resource may be linked to a compartment in more than one way,. */
  param?: string[];
}
export interface CompartmentDefinitionResource extends _CompartmentDefinitionResource {
  constructor: { new (): CompartmentDefinitionResource };
}
export var CompartmentDefinitionResource: { new (): CompartmentDefinitionResource };

/** Which compartment a compartment definition describesIf the element is present, it must have either a @value, an @id, or extensions */
interface _CompartmentType extends _Element {
  value?: CompartmentTypeList;
}
export interface CompartmentType extends _CompartmentType {
  constructor: { new (): CompartmentType };
}
export var CompartmentType: { new (): CompartmentType };

export type CompartmentTypeList = 'Patient' | 'Encounter' | 'RelatedPerson' | 'Practitioner' | 'Device';
interface _CompartmentTypeList extends _codePrimitive {
  content: CompartmentTypeList;
}

/** A set of healthcare-related information that is assembled together into a single logical document that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. While a Composition defines the structure, it does not actually contain the content: rather the full content of a document is contained in a Bundle, of which the Composition is the first resource contained.If the element is present, it must have either a @value, an @id, or extensions */
interface _Composition extends _DomainResource {
  /** A participant who has attested to the accuracy of the composition/document. */
  attester?: CompositionAttester[];
  /** Identifies who is responsible for the information in the composition, not necessarily who typed it in. */
  author: Reference[];
  /** A categorization for the type of the composition - helps for indexing and searching. This may be implied by or derived from the code specified in the Composition Type. */
  class?: CodeableConcept;
  /** The code specifying the level of confidentiality of the Composition. */
  confidentiality?: ConfidentialityClassification;
  /** Identifies the organization or group who is responsible for ongoing maintenance of and access to the composition/document information. */
  custodian?: Reference;
  /** The composition editing time, when the composition was last logically changed by the author. */
  date: dateTime;
  /** Describes the clinical encounter or type of care this documentation is associated with. */
  encounter?: Reference;
  /** The clinical service, such as a colonoscopy or an appendectomy, being documented. */
  event?: CompositionEvent[];
  /** Logical identifier for the composition, assigned when created. This identifier stays constant as the composition is changed over time. */
  identifier?: Identifier;
  /** Relationships that this composition has with other compositions or documents that already exist. */
  relatesTo?: CompositionRelatesTo[];
  /** The root of the sections that make up the composition. */
  section?: CompositionSection[];
  /** The workflow/clinical status of this composition. The status is a marker for the clinical standing of the document. */
  status: CompositionStatus;
  /** Who or what the composition is about. The composition can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of livestock, or a set of patients that share a common exposure). */
  subject: Reference;
  /** Official human-readable label for the composition. */
  title: string;
  /** Specifies the particular kind of composition (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the composition. */
  type: CodeableConcept;
}
export interface Composition extends _Composition {
  constructor: { new (): Composition };
}
export var Composition: { new (): Composition };

/** The way in which a person authenticated a composition.If the element is present, it must have either a @value, an @id, or extensions */
interface _CompositionAttestationMode extends _Element {
  value?: CompositionAttestationModeList;
}
export interface CompositionAttestationMode extends _CompositionAttestationMode {
  constructor: { new (): CompositionAttestationMode };
}
export var CompositionAttestationMode: { new (): CompositionAttestationMode };

export type CompositionAttestationModeList = 'personal' | 'professional' | 'legal' | 'official';
interface _CompositionAttestationModeList extends _codePrimitive {
  content: CompositionAttestationModeList;
}

/** A set of healthcare-related information that is assembled together into a single logical document that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. While a Composition defines the structure, it does not actually contain the content: rather the full content of a document is contained in a Bundle, of which the Composition is the first resource contained. */
interface _CompositionAttester extends _BackboneElement {
  /** The type of attestation the authenticator offers. */
  mode: CompositionAttestationMode[];
  /** Who attested the composition in the specified way. */
  party?: Reference;
  /** When the composition was attested by the party. */
  time?: dateTime;
}
export interface CompositionAttester extends _CompositionAttester {
  constructor: { new (): CompositionAttester };
}
export var CompositionAttester: { new (): CompositionAttester };

/** A set of healthcare-related information that is assembled together into a single logical document that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. While a Composition defines the structure, it does not actually contain the content: rather the full content of a document is contained in a Bundle, of which the Composition is the first resource contained. */
interface _CompositionEvent extends _BackboneElement {
  /** This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act. */
  code?: CodeableConcept[];
  /** The description and/or reference of the event(s) being documented. For example, this could be used to document such a colonoscopy or an appendectomy. */
  detail?: Reference[];
  /** The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time. */
  period?: Period;
}
export interface CompositionEvent extends _CompositionEvent {
  constructor: { new (): CompositionEvent };
}
export var CompositionEvent: { new (): CompositionEvent };

/** A set of healthcare-related information that is assembled together into a single logical document that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. While a Composition defines the structure, it does not actually contain the content: rather the full content of a document is contained in a Bundle, of which the Composition is the first resource contained. */
interface _CompositionRelatesTo extends _BackboneElement {
  /** The type of relationship that this composition has with anther composition or document. */
  code: DocumentRelationshipType;
  targetIdentifier: Identifier;
  targetReference: Reference;
}
export interface CompositionRelatesTo extends _CompositionRelatesTo {
  constructor: { new (): CompositionRelatesTo };
}
export var CompositionRelatesTo: { new (): CompositionRelatesTo };

/** A set of healthcare-related information that is assembled together into a single logical document that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. While a Composition defines the structure, it does not actually contain the content: rather the full content of a document is contained in a Bundle, of which the Composition is the first resource contained. */
interface _CompositionSection extends _BackboneElement {
  /** A code identifying the kind of content contained within the section. This must be consistent with the section title. */
  code?: CodeableConcept;
  /** If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason. */
  emptyReason?: CodeableConcept;
  /** A reference to the actual resource from which the narrative in the section is derived. */
  entry?: Reference[];
  /** How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted. */
  mode?: ListMode;
  /** Specifies the order applied to the items in the section entries. */
  orderedBy?: CodeableConcept;
  /** A nested sub-section within this section. */
  section?: CompositionSection[];
  /** A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. */
  text?: Narrative;
  /** The label for this particular section.  This will be part of the rendered content for the document, and is often used to build a table of contents. */
  title?: string;
}
export interface CompositionSection extends _CompositionSection {
  constructor: { new (): CompositionSection };
}
export var CompositionSection: { new (): CompositionSection };

/** The workflow/clinical status of the composition.If the element is present, it must have either a @value, an @id, or extensions */
interface _CompositionStatus extends _Element {
  value?: CompositionStatusList;
}
export interface CompositionStatus extends _CompositionStatus {
  constructor: { new (): CompositionStatus };
}
export var CompositionStatus: { new (): CompositionStatus };

export type CompositionStatusList = 'preliminary' | 'final' | 'amended' | 'entered-in-error';
interface _CompositionStatusList extends _codePrimitive {
  content: CompositionStatusList;
}

/** A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models.If the element is present, it must have either a @value, an @id, or extensions */
interface _ConceptMap extends _DomainResource {
  /** Contact details to assist a user in finding and communicating with the publisher. */
  contact?: ContactDetail[];
  /** A copyright statement relating to the concept map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the concept map. */
  copyright?: markdown;
  /** The date  (and optionally time) when the concept map was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the concept map changes. */
  date?: dateTime;
  /** A free text natural language description of the concept map from a consumer's perspective. */
  description?: markdown;
  /** A boolean value to indicate that this concept map is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage. */
  experimental?: boolean;
  /** A group of mappings that all have the same source and target system. */
  group?: ConceptMapGroup[];
  /** A formal identifier that is used to identify this concept map when it is represented in other formats, or referenced in a specification, model, design or an instance. */
  identifier?: Identifier;
  /** A legal or geographic region in which the concept map is intended to be used. */
  jurisdiction?: CodeableConcept[];
  /** A natural language name identifying the concept map. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
  name?: string;
  /** The name of the individual or organization that published the concept map. */
  publisher?: string;
  /** Explaination of why this concept map is needed and why it has been designed as it has. */
  purpose?: markdown;
  sourceReference?: Reference;
  sourceUri?: uri;
  /** The status of this concept map. Enables tracking the life-cycle of the content. */
  status: PublicationStatus;
  targetReference?: Reference;
  targetUri?: uri;
  /** A short, descriptive, user-friendly title for the concept map. */
  title?: string;
  /** An absolute URI that is used to identify this concept map when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this concept map is (or will be) published. The URL SHOULD include the major version of the concept map. For more information see [Technical and Business Versions](resource.html#versions). */
  url?: uri;
  /** The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate concept map instances. */
  useContext?: UsageContext[];
  /** The identifier that is used to identify this version of the concept map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the concept map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
  version?: string;
}
export interface ConceptMap extends _ConceptMap {
  constructor: { new (): ConceptMap };
}
export var ConceptMap: { new (): ConceptMap };

/** A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models. */
interface _ConceptMapDependsOn extends _BackboneElement {
  /** Identity (code or path) or the element/item/ValueSet that the map depends on / refers to. */
  code: string;
  /** The display for the code. The display is only provided to help editors when editing the concept map. */
  display?: string;
  /** A reference to an element that holds a coded value that corresponds to a code system property. The idea is that the information model carries an element somwhere that is labeled to correspond with a code system property. */
  property: uri;
  /** An absolute URI that identifies the code system of the dependency code (if the source/dependency is a value set that crosses code systems). */
  system?: uri;
}
export interface ConceptMapDependsOn extends _ConceptMapDependsOn {
  constructor: { new (): ConceptMapDependsOn };
}
export var ConceptMapDependsOn: { new (): ConceptMapDependsOn };

/** A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models. */
interface _ConceptMapElement extends _BackboneElement {
  /** Identity (code or path) or the element/item being mapped. */
  code?: code;
  /** The display for the code. The display is only provided to help editors when editing the concept map. */
  display?: string;
  /** A concept from the target value set that this concept maps to. */
  target?: ConceptMapTarget[];
}
export interface ConceptMapElement extends _ConceptMapElement {
  constructor: { new (): ConceptMapElement };
}
export var ConceptMapElement: { new (): ConceptMapElement };

/** If the element is present, it must have either a @value, an @id, or extensions */
interface _ConceptMapEquivalence extends _Element {
  value?: ConceptMapEquivalenceList;
}
export interface ConceptMapEquivalence extends _ConceptMapEquivalence {
  constructor: { new (): ConceptMapEquivalence };
}
export var ConceptMapEquivalence: { new (): ConceptMapEquivalence };

export type ConceptMapEquivalenceList =
  | 'relatedto'
  | 'equivalent'
  | 'equal'
  | 'wider'
  | 'subsumes'
  | 'narrower'
  | 'specializes'
  | 'inexact'
  | 'unmatched'
  | 'disjoint';
interface _ConceptMapEquivalenceList extends _codePrimitive {
  content: ConceptMapEquivalenceList;
}

/** A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models. */
interface _ConceptMapGroup extends _BackboneElement {
  /** Mappings for an individual concept in the source to one or more concepts in the target. */
  element: ConceptMapElement[];
  /** An absolute URI that identifies the Code System (if the source is a value set that crosses more than one code system). */
  source?: uri;
  /** The specific version of the code system, as determined by the code system authority. */
  sourceVersion?: string;
  /** An absolute URI that identifies the code system of the target code (if the target is a value set that cross code systems). */
  target?: uri;
  /** The specific version of the code system, as determined by the code system authority. */
  targetVersion?: string;
  /** What to do when there is no match in the mappings in the group. */
  unmapped?: ConceptMapUnmapped;
}
export interface ConceptMapGroup extends _ConceptMapGroup {
  constructor: { new (): ConceptMapGroup };
}
export var ConceptMapGroup: { new (): ConceptMapGroup };

/** Defines which action to take if there is no match in the group.If the element is present, it must have either a @value, an @id, or extensions */
interface _ConceptMapGroupUnmappedMode extends _Element {
  value?: ConceptMapGroupUnmappedModeList;
}
export interface ConceptMapGroupUnmappedMode extends _ConceptMapGroupUnmappedMode {
  constructor: { new (): ConceptMapGroupUnmappedMode };
}
export var ConceptMapGroupUnmappedMode: { new (): ConceptMapGroupUnmappedMode };

export type ConceptMapGroupUnmappedModeList = 'provided' | 'fixed' | 'other-map';
interface _ConceptMapGroupUnmappedModeList extends _codePrimitive {
  content: ConceptMapGroupUnmappedModeList;
}

/** A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models. */
interface _ConceptMapTarget extends _BackboneElement {
  /** Identity (code or path) or the element/item that the map refers to. */
  code?: code;
  /** A description of status/issues in mapping that conveys additional information not represented in  the structured data. */
  comment?: string;
  /** A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value. */
  dependsOn?: ConceptMapDependsOn[];
  /** The display for the code. The display is only provided to help editors when editing the concept map. */
  display?: string;
  /** The equivalence between the source and target concepts (counting for the dependencies and products). The equivalence is read from target to source (e.g. the target is 'wider' than the source). */
  equivalence?: ConceptMapEquivalence;
  /** A set of additional outcomes from this mapping to other elements. To properly execute this mapping, the specified element must be mapped to some data element or source that is in context. The mapping may still be useful without a place for the additional data elements, but the equivalence cannot be relied on. */
  product?: ConceptMapDependsOn[];
}
export interface ConceptMapTarget extends _ConceptMapTarget {
  constructor: { new (): ConceptMapTarget };
}
export var ConceptMapTarget: { new (): ConceptMapTarget };

/** A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models. */
interface _ConceptMapUnmapped extends _BackboneElement {
  /** The fixed code to use when the mode = 'fixed'  - all unmapped codes are mapped to a single fixed code. */
  code?: code;
  /** The display for the code. The display is only provided to help editors when editing the concept map. */
  display?: string;
  /** Defines which action to take if there is no match in the group. One of 3 actions is possible: use the unmapped code (this is useful when doing a mapping between versions, and only a few codes have changed), use a fixed code (a default code), or alternatively, a reference to a different concept map can be provided (by canonical URL). */
  mode: ConceptMapGroupUnmappedMode;
  /** The canonical URL of the map to use if this map contains no mapping. */
  url?: uri;
}
export interface ConceptMapUnmapped extends _ConceptMapUnmapped {
  constructor: { new (): ConceptMapUnmapped };
}
export var ConceptMapUnmapped: { new (): ConceptMapUnmapped };

/** A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.If the element is present, it must have either a @value, an @id, or extensions */
interface _Condition extends _DomainResource {
  abatementAge?: Age;
  abatementBoolean?: boolean;
  abatementDateTime?: dateTime;
  abatementPeriod?: Period;
  abatementRange?: Range;
  abatementString?: string;
  /** The date on which the existance of the Condition was first asserted or acknowledged. */
  assertedDate?: dateTime;
  /** Individual who is making the condition statement. */
  asserter?: Reference;
  /** The anatomical location where this condition manifests itself. */
  bodySite?: CodeableConcept[];
  /** A category assigned to the condition. */
  category?: CodeableConcept[];
  /** The clinical status of the condition. */
  clinicalStatus?: ConditionClinicalStatusCodes;
  /** Identification of the condition, problem or diagnosis. */
  code?: CodeableConcept;
  /** Encounter during which the condition was first asserted. */
  context?: Reference;
  /** Supporting Evidence / manifestations that are the basis on which this condition is suspected or confirmed. */
  evidence?: ConditionEvidence[];
  /** This records identifiers associated with this condition that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation). */
  identifier?: Identifier[];
  /** Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis. */
  note?: Annotation[];
  onsetAge?: Age;
  onsetDateTime?: dateTime;
  onsetPeriod?: Period;
  onsetRange?: Range;
  onsetString?: string;
  /** A subjective assessment of the severity of the condition as evaluated by the clinician. */
  severity?: CodeableConcept;
  /** Clinical stage or grade of a condition. May include formal severity assessments. */
  stage?: ConditionStage;
  /** Indicates the patient or group who the condition record is associated with. */
  subject: Reference;
  /** The verification status to support the clinical status of the condition. */
  verificationStatus?: ConditionVerificationStatus;
}
export interface Condition extends _Condition {
  constructor: { new (): Condition };
}
export var Condition: { new (): Condition };

/** A code that indicates how the server supports conditional delete.If the element is present, it must have either a @value, an @id, or extensions */
interface _ConditionalDeleteStatus extends _Element {
  value?: ConditionalDeleteStatusList;
}
export interface ConditionalDeleteStatus extends _ConditionalDeleteStatus {
  constructor: { new (): ConditionalDeleteStatus };
}
export var ConditionalDeleteStatus: { new (): ConditionalDeleteStatus };

export type ConditionalDeleteStatusList = 'not-supported' | 'single' | 'multiple';
interface _ConditionalDeleteStatusList extends _codePrimitive {
  content: ConditionalDeleteStatusList;
}

/** A code that indicates how the server supports conditional read.If the element is present, it must have either a @value, an @id, or extensions */
interface _ConditionalReadStatus extends _Element {
  value?: ConditionalReadStatusList;
}
export interface ConditionalReadStatus extends _ConditionalReadStatus {
  constructor: { new (): ConditionalReadStatus };
}
export var ConditionalReadStatus: { new (): ConditionalReadStatus };

export type ConditionalReadStatusList = 'not-supported' | 'modified-since' | 'not-match' | 'full-support';
interface _ConditionalReadStatusList extends _codePrimitive {
  content: ConditionalReadStatusList;
}

/** The clinical status of the condition or diagnosis.If the element is present, it must have either a @value, an @id, or extensions */
interface _ConditionClinicalStatusCodes extends _Element {
  value?: ConditionClinicalStatusCodesList;
}
export interface ConditionClinicalStatusCodes extends _ConditionClinicalStatusCodes {
  constructor: { new (): ConditionClinicalStatusCodes };
}
export var ConditionClinicalStatusCodes: { new (): ConditionClinicalStatusCodes };

export type ConditionClinicalStatusCodesList = 'active' | 'recurrence' | 'inactive' | 'remission' | 'resolved';
interface _ConditionClinicalStatusCodesList extends _codePrimitive {
  content: ConditionClinicalStatusCodesList;
}

/** A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern. */
interface _ConditionEvidence extends _BackboneElement {
  /** A manifestation or symptom that led to the recording of this condition. */
  code?: CodeableConcept[];
  /** Links to other relevant information, including pathology reports. */
  detail?: Reference[];
}
export interface ConditionEvidence extends _ConditionEvidence {
  constructor: { new (): ConditionEvidence };
}
export var ConditionEvidence: { new (): ConditionEvidence };

/** A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern. */
interface _ConditionStage extends _BackboneElement {
  /** Reference to a formal record of the evidence on which the staging assessment is based. */
  assessment?: Reference[];
  /** A simple summary of the stage such as "Stage 3". The determination of the stage is disease-specific. */
  summary?: CodeableConcept;
}
export interface ConditionStage extends _ConditionStage {
  constructor: { new (): ConditionStage };
}
export var ConditionStage: { new (): ConditionStage };

/** The verification status to support or decline the clinical status of the condition or diagnosis.If the element is present, it must have either a @value, an @id, or extensions */
interface _ConditionVerificationStatus extends _Element {
  value?: ConditionVerificationStatusList;
}
export interface ConditionVerificationStatus extends _ConditionVerificationStatus {
  constructor: { new (): ConditionVerificationStatus };
}
export var ConditionVerificationStatus: { new (): ConditionVerificationStatus };

export type ConditionVerificationStatusList = 'provisional' | 'differential' | 'confirmed' | 'refuted' | 'entered-in-error' | 'unknown';
interface _ConditionVerificationStatusList extends _codePrimitive {
  content: ConditionVerificationStatusList;
}

/** Codes specifying the level of confidentiality of the composition.If the element is present, it must have either a @value, an @id, or extensions */
interface _ConfidentialityClassification extends _Element {
  value?: ConfidentialityClassificationList;
}
export interface ConfidentialityClassification extends _ConfidentialityClassification {
  constructor: { new (): ConfidentialityClassification };
}
export var ConfidentialityClassification: { new (): ConfidentialityClassification };

export type ConfidentialityClassificationList = 'U' | 'L' | 'M' | 'N' | 'R' | 'V';
interface _ConfidentialityClassificationList extends _codePrimitive {
  content: ConfidentialityClassificationList;
}

/** A record of a healthcare consumer’s policy choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.If the element is present, it must have either a @value, an @id, or extensions */
interface _Consent extends _DomainResource {
  /** Actions controlled by this consent. */
  action?: CodeableConcept[];
  /** Who or what is controlled by this consent. Use group to identify a set of actors by some property they share (e.g. 'admitting officers'). */
  actor?: ConsentActor[];
  /** A classification of the type of consents found in the statement. This element supports indexing and retrieval of consent statements. */
  category?: CodeableConcept[];
  /** Either the Grantor, which is the entity responsible for granting the rights listed in a Consent Directive or the Grantee, which is the entity responsible for complying with the Consent Directive, including any obligations or limitations on authorizations and enforcement of prohibitions. */
  consentingParty?: Reference[];
  /** The resources controlled by this consent, if specific resources are referenced. */
  data?: ConsentData[];
  /** Clinical or Operational Relevant period of time that bounds the data controlled by this consent. */
  dataPeriod?: Period;
  /** When this  Consent was issued / created / indexed. */
  dateTime?: dateTime;
  /** An exception to the base policy of this consent. An exception can be an addition or removal of access permissions. */
  except?: ConsentExcept[];
  /** Unique identifier for this copy of the Consent Statement. */
  identifier?: Identifier;
  /** The organization that manages the consent, and the framework within which it is executed. */
  organization?: Reference[];
  /** The patient/healthcare consumer to whom this consent applies. */
  patient: Reference;
  /** Relevant time or time-period when this Consent is applicable. */
  period?: Period;
  /** The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law. */
  policy?: ConsentPolicy[];
  /** A referece to the specific computable policy. */
  policyRule?: uri;
  /** The context of the activities a user is taking - why the user is accessing the data - that are controlled by this consent. */
  purpose?: Coding[];
  /** A set of security labels that define which resources are controlled by this consent. If more than one label is specified, all resources must have all the specified labels. */
  securityLabel?: Coding[];
  sourceAttachment?: Attachment;
  sourceIdentifier?: Identifier;
  sourceReference?: Reference;
  /** Indicates the current state of this consent. */
  status: ConsentState;
}
export interface Consent extends _Consent {
  constructor: { new (): Consent };
}
export var Consent: { new (): Consent };

/** A record of a healthcare consumer’s policy choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time. */
interface _ConsentActor extends _BackboneElement {
  /** The resource that identifies the actor. To identify a actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers'). */
  reference: Reference;
  /** How the individual is involved in the resources content that is described in the consent. */
  role: CodeableConcept;
}
export interface ConsentActor extends _ConsentActor {
  constructor: { new (): ConsentActor };
}
export var ConsentActor: { new (): ConsentActor };

/** A record of a healthcare consumer’s policy choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time. */
interface _ConsentActor1 extends _BackboneElement {
  /** The resource that identifies the actor. To identify a actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers'). */
  reference: Reference;
  /** How the individual is involved in the resources content that is described in the exception. */
  role: CodeableConcept;
}
export interface ConsentActor1 extends _ConsentActor1 {
  constructor: { new (): ConsentActor1 };
}
export var ConsentActor1: { new (): ConsentActor1 };

/** A record of a healthcare consumer’s policy choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time. */
interface _ConsentData extends _BackboneElement {
  /** How the resource reference is interpreted when testing consent restrictions. */
  meaning: ConsentDataMeaning;
  /** A reference to a specific resource that defines which resources are covered by this consent. */
  reference: Reference;
}
export interface ConsentData extends _ConsentData {
  constructor: { new (): ConsentData };
}
export var ConsentData: { new (): ConsentData };

/** A record of a healthcare consumer’s policy choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time. */
interface _ConsentData1 extends _BackboneElement {
  /** How the resource reference is interpreted when testing consent restrictions. */
  meaning: ConsentDataMeaning;
  /** A reference to a specific resource that defines which resources are covered by this consent. */
  reference: Reference;
}
export interface ConsentData1 extends _ConsentData1 {
  constructor: { new (): ConsentData1 };
}
export var ConsentData1: { new (): ConsentData1 };

/** How a resource reference is interpreted when testing consent restrictionsIf the element is present, it must have either a @value, an @id, or extensions */
interface _ConsentDataMeaning extends _Element {
  value?: ConsentDataMeaningList;
}
export interface ConsentDataMeaning extends _ConsentDataMeaning {
  constructor: { new (): ConsentDataMeaning };
}
export var ConsentDataMeaning: { new (): ConsentDataMeaning };

export type ConsentDataMeaningList = 'instance' | 'related' | 'dependents' | 'authoredby';
interface _ConsentDataMeaningList extends _codePrimitive {
  content: ConsentDataMeaningList;
}

/** A record of a healthcare consumer’s policy choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time. */
interface _ConsentExcept extends _BackboneElement {
  /** Actions controlled by this Exception. */
  action?: CodeableConcept[];
  /** Who or what is controlled by this Exception. Use group to identify a set of actors by some property they share (e.g. 'admitting officers'). */
  actor?: ConsentActor1[];
  /** The class of information covered by this exception. The type can be a FHIR resource type, a profile on a type, or a CDA document, or some other type that indicates what sort of information the consent relates to. */
  class?: Coding[];
  /** If this code is found in an instance, then the exception applies. */
  code?: Coding[];
  /** The resources controlled by this exception, if specific resources are referenced. */
  data?: ConsentData1[];
  /** Clinical or Operational Relevant period of time that bounds the data controlled by this exception. */
  dataPeriod?: Period;
  /** The timeframe in this exception is valid. */
  period?: Period;
  /** The context of the activities a user is taking - why the user is accessing the data - that are controlled by this exception. */
  purpose?: Coding[];
  /** A set of security labels that define which resources are controlled by this exception. If more than one label is specified, all resources must have all the specified labels. */
  securityLabel?: Coding[];
  /** Action  to take - permit or deny - when the exception conditions are met. */
  type: ConsentExceptType;
}
export interface ConsentExcept extends _ConsentExcept {
  constructor: { new (): ConsentExcept };
}
export var ConsentExcept: { new (): ConsentExcept };

/** How an exception statement is applied, such as adding additional consent or removing consentIf the element is present, it must have either a @value, an @id, or extensions */
interface _ConsentExceptType extends _Element {
  value?: ConsentExceptTypeList;
}
export interface ConsentExceptType extends _ConsentExceptType {
  constructor: { new (): ConsentExceptType };
}
export var ConsentExceptType: { new (): ConsentExceptType };

export type ConsentExceptTypeList = 'deny' | 'permit';
interface _ConsentExceptTypeList extends _codePrimitive {
  content: ConsentExceptTypeList;
}

/** A record of a healthcare consumer’s policy choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time. */
interface _ConsentPolicy extends _BackboneElement {
  /** Entity or Organization having regulatory jurisdiction or accountability for  enforcing policies pertaining to Consent Directives. */
  authority?: uri;
  /** The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law. */
  uri?: uri;
}
export interface ConsentPolicy extends _ConsentPolicy {
  constructor: { new (): ConsentPolicy };
}
export var ConsentPolicy: { new (): ConsentPolicy };

/** Indicates the state of the consentIf the element is present, it must have either a @value, an @id, or extensions */
interface _ConsentState extends _Element {
  value?: ConsentStateList;
}
export interface ConsentState extends _ConsentState {
  constructor: { new (): ConsentState };
}
export var ConsentState: { new (): ConsentState };

export type ConsentStateList = 'draft' | 'proposed' | 'active' | 'rejected' | 'inactive' | 'entered-in-error';
interface _ConsentStateList extends _codePrimitive {
  content: ConsentStateList;
}

/** SHALL applications comply with this constraint?If the element is present, it must have either a @value, an @id, or extensions */
interface _ConstraintSeverity extends _Element {
  value?: ConstraintSeverityList;
}
export interface ConstraintSeverity extends _ConstraintSeverity {
  constructor: { new (): ConstraintSeverity };
}
export var ConstraintSeverity: { new (): ConstraintSeverity };

export type ConstraintSeverityList = 'error' | 'warning';
interface _ConstraintSeverityList extends _codePrimitive {
  content: ConstraintSeverityList;
}

/** Specifies contact information for a person or organization.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _ContactDetail extends _Element {
  /** The name of an individual to contact. */
  name?: string;
  /** The contact details for the individual (if a name was provided) or the organization. */
  telecom?: ContactPoint[];
}
export interface ContactDetail extends _ContactDetail {
  constructor: { new (): ContactDetail };
}
export var ContactDetail: { new (): ContactDetail };

/** Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _ContactPoint extends _Element {
  /** Time period when the contact point was/is in use. */
  period?: Period;
  /** Specifies a preferred order in which to use a set of contacts. Contacts are ranked with lower values coming before higher values. */
  rank?: positiveInt;
  /** Telecommunications form for contact point - what communications system is required to make use of the contact. */
  system?: ContactPointSystem;
  /** Identifies the purpose for the contact point. */
  use?: ContactPointUse;
  /** The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address). */
  value?: string;
}
export interface ContactPoint extends _ContactPoint {
  constructor: { new (): ContactPoint };
}
export var ContactPoint: { new (): ContactPoint };

/** Telecommunications form for contact pointIf the element is present, it must have either a @value, an @id, or extensions */
interface _ContactPointSystem extends _Element {
  value?: ContactPointSystemList;
}
export interface ContactPointSystem extends _ContactPointSystem {
  constructor: { new (): ContactPointSystem };
}
export var ContactPointSystem: { new (): ContactPointSystem };

export type ContactPointSystemList = 'phone' | 'fax' | 'email' | 'pager' | 'url' | 'sms' | 'other';
interface _ContactPointSystemList extends _codePrimitive {
  content: ContactPointSystemList;
}

/** Use of contact pointIf the element is present, it must have either a @value, an @id, or extensions */
interface _ContactPointUse extends _Element {
  value?: ContactPointUseList;
}
export interface ContactPointUse extends _ContactPointUse {
  constructor: { new (): ContactPointUse };
}
export var ContactPointUse: { new (): ContactPointUse };

export type ContactPointUseList = 'home' | 'work' | 'temp' | 'old' | 'mobile';
interface _ContactPointUseList extends _codePrimitive {
  content: ContactPointUseList;
}

/** The content or mime type.If the element is present, it must have either a @value, an @id, or extensions */
interface _ContentType extends _Element {
  value?: ContentTypeList;
}
export interface ContentType extends _ContentType {
  constructor: { new (): ContentType };
}
export var ContentType: { new (): ContentType };

export type ContentTypeList = 'xml' | 'json' | 'ttl' | 'none';
interface _ContentTypeList extends _codePrimitive {
  content: ContentTypeList;
}

/** A formal agreement between parties regarding the conduct of business, exchange of information or other matters.If the element is present, it must have either a @value, an @id, or extensions */
interface _Contract extends _DomainResource {
  /** Action stipulated by this Contract. */
  action?: CodeableConcept[];
  /** Reason for action stipulated by this Contract. */
  actionReason?: CodeableConcept[];
  /** An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place. */
  agent?: ContractAgent[];
  /** Relevant time or time-period when this Contract is applicable. */
  applies?: Period;
  /** A formally or informally recognized grouping of people, principals, organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of contracts and policies. */
  authority?: Reference[];
  bindingAttachment?: Attachment;
  bindingReference?: Reference;
  /** The minimal content derived from the basal information source at a specific stage in its lifecycle. */
  contentDerivative?: CodeableConcept;
  /** The type of decision made by a grantor with respect to an offer made by a grantee. */
  decisionType?: CodeableConcept;
  /** Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources. */
  domain?: Reference[];
  /** The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement. */
  friendly?: ContractFriendly[];
  /** Unique identifier for this Contract. */
  identifier?: Identifier;
  /** When this  Contract was issued. */
  issued?: dateTime;
  /** List of Legal expressions or representations of this Contract. */
  legal?: ContractLegal[];
  /** List of Computable Policy Rule Language Representations of this Contract. */
  rule?: ContractRule[];
  /** A set of security labels that define which resources are controlled by this consent. If more than one label is specified, all resources must have all the specified labels. */
  securityLabel?: Coding[];
  /** Parties with legal standing in the Contract, including the principal parties, the grantor(s) and grantee(s), which are any person or organization bound by the contract, and any ancillary parties, which facilitate the execution of the contract such as a notary or witness. */
  signer?: ContractSigner[];
  /** The status of the resource instance. */
  status?: ContractResourceStatusCodes;
  /** The target entity impacted by or of interest to parties to the agreement. */
  subject?: Reference[];
  /** More specific type or specialization of an overarching or more general contract such as auto insurance, home owner  insurance, prenupial agreement, Advanced-Directive, or privacy consent. */
  subType?: CodeableConcept[];
  /** One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups. */
  term?: ContractTerm[];
  /** The matter of concern in the context of this agreement. */
  topic?: Reference[];
  /** Type of Contract such as an insurance policy, real estate contract, a will, power of attorny, Privacy or Security policy , trust framework agreement, etc. */
  type?: CodeableConcept;
  /** Contract Valued Item List. */
  valuedItem?: ContractValuedItem[];
}
export interface Contract extends _Contract {
  constructor: { new (): Contract };
}
export var Contract: { new (): Contract };

/** A formal agreement between parties regarding the conduct of business, exchange of information or other matters. */
interface _ContractAgent extends _BackboneElement {
  /** Who or what parties are assigned roles in this Contract. */
  actor: Reference;
  /** Role type of agent assigned roles in this Contract. */
  role?: CodeableConcept[];
}
export interface ContractAgent extends _ContractAgent {
  constructor: { new (): ContractAgent };
}
export var ContractAgent: { new (): ContractAgent };

/** A formal agreement between parties regarding the conduct of business, exchange of information or other matters. */
interface _ContractAgent1 extends _BackboneElement {
  /** The agent assigned a role in this Contract Provision. */
  actor: Reference;
  /** Role played by the agent assigned this role in the execution of this Contract Provision. */
  role?: CodeableConcept[];
}
export interface ContractAgent1 extends _ContractAgent1 {
  constructor: { new (): ContractAgent1 };
}
export var ContractAgent1: { new (): ContractAgent1 };

/** A formal agreement between parties regarding the conduct of business, exchange of information or other matters. */
interface _ContractFriendly extends _BackboneElement {
  contentAttachment: Attachment;
  contentReference: Reference;
}
export interface ContractFriendly extends _ContractFriendly {
  constructor: { new (): ContractFriendly };
}
export var ContractFriendly: { new (): ContractFriendly };

/** A formal agreement between parties regarding the conduct of business, exchange of information or other matters. */
interface _ContractLegal extends _BackboneElement {
  contentAttachment: Attachment;
  contentReference: Reference;
}
export interface ContractLegal extends _ContractLegal {
  constructor: { new (): ContractLegal };
}
export var ContractLegal: { new (): ContractLegal };

/** A code specifying the state of the resource instance.If the element is present, it must have either a @value, an @id, or extensions */
interface _ContractResourceStatusCodes extends _Element {
  value?: ContractResourceStatusCodesList;
}
export interface ContractResourceStatusCodes extends _ContractResourceStatusCodes {
  constructor: { new (): ContractResourceStatusCodes };
}
export var ContractResourceStatusCodes: { new (): ContractResourceStatusCodes };

export type ContractResourceStatusCodesList =
  | 'amended'
  | 'appended'
  | 'cancelled'
  | 'disputed'
  | 'entered-in-error'
  | 'executable'
  | 'executed'
  | 'negotiable'
  | 'offered'
  | 'policy'
  | 'rejected'
  | 'renewed'
  | 'revoked'
  | 'resolved'
  | 'terminated';
interface _ContractResourceStatusCodesList extends _codePrimitive {
  content: ContractResourceStatusCodesList;
}

/** A formal agreement between parties regarding the conduct of business, exchange of information or other matters. */
interface _ContractRule extends _BackboneElement {
  contentAttachment: Attachment;
  contentReference: Reference;
}
export interface ContractRule extends _ContractRule {
  constructor: { new (): ContractRule };
}
export var ContractRule: { new (): ContractRule };

/** A formal agreement between parties regarding the conduct of business, exchange of information or other matters. */
interface _ContractSigner extends _BackboneElement {
  /** Party which is a signator to this Contract. */
  party: Reference;
  /** Legally binding Contract DSIG signature contents in Base64. */
  signature: Signature[];
  /** Role of this Contract signer, e.g. notary, grantee. */
  type: Coding;
}
export interface ContractSigner extends _ContractSigner {
  constructor: { new (): ContractSigner };
}
export var ContractSigner: { new (): ContractSigner };

/** A formal agreement between parties regarding the conduct of business, exchange of information or other matters. */
interface _ContractTerm extends _BackboneElement {
  /** Action stipulated by this Contract Provision. */
  action?: CodeableConcept[];
  /** Reason or purpose for the action stipulated by this Contract Provision. */
  actionReason?: CodeableConcept[];
  /** An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place. */
  agent?: ContractAgent1[];
  /** Relevant time or time-period when this Contract Provision is applicable. */
  applies?: Period;
  /** Nested group of Contract Provisions. */
  group?: ContractTerm[];
  /** Unique identifier for this particular Contract Provision. */
  identifier?: Identifier;
  /** When this Contract Provision was issued. */
  issued?: dateTime;
  /** A set of security labels that define which terms are controlled by this condition. */
  securityLabel?: Coding[];
  /** Subtype of this Contract Provision, e.g. life time maximum payment for a contract term for specific valued item, e.g. disability payment. */
  subType?: CodeableConcept;
  /** Human readable form of this Contract Provision. */
  text?: string;
  /** The matter of concern in the context of this provision of the agrement. */
  topic?: Reference[];
  /** Type of Contract Provision such as specific requirements, purposes for actions, obligations, prohibitions, e.g. life time maximum benefit. */
  type?: CodeableConcept;
  /** Contract Provision Valued Item List. */
  valuedItem?: ContractValuedItem1[];
}
export interface ContractTerm extends _ContractTerm {
  constructor: { new (): ContractTerm };
}
export var ContractTerm: { new (): ContractTerm };

/** A formal agreement between parties regarding the conduct of business, exchange of information or other matters. */
interface _ContractValuedItem extends _BackboneElement {
  /** Indicates the time during which this Contract ValuedItem information is effective. */
  effectiveTime?: dateTime;
  entityCodeableConcept?: CodeableConcept;
  entityReference?: Reference;
  /** A real number that represents a multiplier used in determining the overall value of the Contract Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount. */
  factor?: decimal;
  /** Identifies a Contract Valued Item instance. */
  identifier?: Identifier;
  /** Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied. */
  net?: Money;
  /** An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Valued Item delivered. The concept of Points allows for assignment of point values for a Contract Valued Item, such that a monetary amount can be assigned to each point. */
  points?: decimal;
  /** Specifies the units by which the Contract Valued Item is measured or counted, and quantifies the countable or measurable Contract Valued Item instances. */
  quantity?: Quantity;
  /** A Contract Valued Item unit valuation measure. */
  unitPrice?: Money;
}
export interface ContractValuedItem extends _ContractValuedItem {
  constructor: { new (): ContractValuedItem };
}
export var ContractValuedItem: { new (): ContractValuedItem };

/** A formal agreement between parties regarding the conduct of business, exchange of information or other matters. */
interface _ContractValuedItem1 extends _BackboneElement {
  /** Indicates the time during which this Contract Term ValuedItem information is effective. */
  effectiveTime?: dateTime;
  entityCodeableConcept?: CodeableConcept;
  entityReference?: Reference;
  /** A real number that represents a multiplier used in determining the overall value of the Contract Provision Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount. */
  factor?: decimal;
  /** Identifies a Contract Provision Valued Item instance. */
  identifier?: Identifier;
  /** Expresses the product of the Contract Provision Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied. */
  net?: Money;
  /** An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Provision Valued Item delivered. The concept of Points allows for assignment of point values for a Contract ProvisionValued Item, such that a monetary amount can be assigned to each point. */
  points?: decimal;
  /** Specifies the units by which the Contract Provision Valued Item is measured or counted, and quantifies the countable or measurable Contract Term Valued Item instances. */
  quantity?: Quantity;
  /** A Contract Provision Valued Item unit valuation measure. */
  unitPrice?: Money;
}
export interface ContractValuedItem1 extends _ContractValuedItem1 {
  constructor: { new (): ContractValuedItem1 };
}
export var ContractValuedItem1: { new (): ContractValuedItem1 };

/** A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _Contributor extends _Element {
  /** Contact details to assist a user in finding and communicating with the contributor. */
  contact?: ContactDetail[];
  /** The name of the individual or organization responsible for the contribution. */
  name: string;
  /** The type of contributor. */
  type: ContributorType;
}
export interface Contributor extends _Contributor {
  constructor: { new (): Contributor };
}
export var Contributor: { new (): Contributor };

/** The type of contributorIf the element is present, it must have either a @value, an @id, or extensions */
interface _ContributorType extends _Element {
  value?: ContributorTypeList;
}
export interface ContributorType extends _ContributorType {
  constructor: { new (): ContributorType };
}
export var ContributorType: { new (): ContributorType };

export type ContributorTypeList = 'author' | 'editor' | 'reviewer' | 'endorser';
interface _ContributorTypeList extends _codePrimitive {
  content: ContributorTypeList;
}

/** A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _Count extends _Quantity {}
export interface Count extends _Count {
  constructor: { new (): Count };
}
export var Count: { new (): Count };

/** Financial instrument which may be used to reimburse or pay for health care products and services.If the element is present, it must have either a @value, an @id, or extensions */
interface _Coverage extends _DomainResource {
  /** The party who benefits from the insurance coverage., the patient when services are provided. */
  beneficiary?: Reference;
  /** The policy(s) which constitute this insurance coverage. */
  contract?: Reference[];
  /** A unique identifier for a dependent under the coverage. */
  dependent?: string;
  /** A suite of underwrite specific classifiers, for example may be used to identify a class of coverage or employer group, Policy, Plan. */
  grouping?: CoverageGrouping;
  /** The main (and possibly only) identifier for the coverage - often referred to as a Member Id, Certificate number, Personal Health Number or Case ID. May be constructed as the concatination of the Coverage.SubscriberID and the Coverage.dependant. */
  identifier?: Identifier[];
  /** The insurer-specific identifier for the insurer-defined network of providers to which the beneficiary may seek treatment which will be covered at the 'in-network' rate, otherwise 'out of network' terms and conditions apply. */
  network?: string;
  /** The order of applicability of this coverage relative to other coverages which are currently inforce. Note, there may be gaps in the numbering and this does not imply primary, secondard etc. as the specific positioning of coverages depends upon the episode of care. */
  order?: positiveInt;
  /** The program or plan underwriter or payor including both insurance and non-insurance agreements, such as patient-pay agreements. May provide multiple identifiers such as insurance company identifier or business identifier (BIN number). */
  payor?: Reference[];
  /** Time period during which the coverage is in force. A missing start date indicates the start date isn't known, a missing end date means the coverage is continuing to be in force. */
  period?: Period;
  /** The party who 'owns' the insurance policy,  may be an individual, corporation or the subscriber's employer. */
  policyHolder?: Reference;
  /** The relationship of beneficiary (patient) to the subscriber. */
  relationship?: CodeableConcept;
  /** An optional counter for a particular instance of the identified coverage which increments upon each renewal. */
  sequence?: string;
  /** The status of the resource instance. */
  status?: FinancialResourceStatusCodes;
  /** The party who has signed-up for or 'owns' the contractual relationship to the policy or to whom the benefit of the policy for services rendered to them or their family is due. */
  subscriber?: Reference;
  /** The insurer assigned ID for the Subscriber. */
  subscriberId?: string;
  /** The type of coverage: social program, medical plan, accident coverage (workers compensation, auto), group health or payment by an individual or organization. */
  type?: CodeableConcept;
}
export interface Coverage extends _Coverage {
  constructor: { new (): Coverage };
}
export var Coverage: { new (): Coverage };

/** Financial instrument which may be used to reimburse or pay for health care products and services. */
interface _CoverageGrouping extends _BackboneElement {
  /** Identifies a style or collective of coverage issues by the underwriter, for example may be used to identify a class of coverage such as a level of deductables or co-payment. */
  class?: string;
  /** A short description for the class. */
  classDisplay?: string;
  /** Identifies a style or collective of coverage issued by the underwriter, for example may be used to identify an employer group. May also be referred to as a Policy or Group ID. */
  group?: string;
  /** A short description for the group. */
  groupDisplay?: string;
  /** Identifies a style or collective of coverage issued by the underwriter, for example may be used to identify a collection of benefits provided to employees. May be referred to as a Section or Division ID. */
  plan?: string;
  /** A short description for the plan. */
  planDisplay?: string;
  /** Identifies a sub-style or sub-collective of coverage issues by the underwriter, for example may be used to identify a subclass of coverage such as a sub-level of deductables or co-payment. */
  subClass?: string;
  /** A short description for the subclass. */
  subClassDisplay?: string;
  /** Identifies a style or collective of coverage issued by the underwriter, for example may be used to identify a subset of an employer group. */
  subGroup?: string;
  /** A short description for the subgroup. */
  subGroupDisplay?: string;
  /** Identifies a sub-style or sub-collective of coverage issued by the underwriter, for example may be used to identify a subset of a collection of benefits provided to employees. */
  subPlan?: string;
  /** A short description for the subplan. */
  subPlanDisplay?: string;
}
export interface CoverageGrouping extends _CoverageGrouping {
  constructor: { new (): CoverageGrouping };
}
export var CoverageGrouping: { new (): CoverageGrouping };

/** The formal description of a single piece of information that can be gathered and reported.If the element is present, it must have either a @value, an @id, or extensions */
interface _DataElement extends _DomainResource {
  /** Contact details to assist a user in finding and communicating with the publisher. */
  contact?: ContactDetail[];
  /** A copyright statement relating to the data element and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the data element. */
  copyright?: markdown;
  /** The date  (and optionally time) when the data element was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the data element changes. */
  date?: dateTime;
  /** Defines the structure, type, allowed values and other constraining characteristics of the data element. */
  element: ElementDefinition[];
  /** A boolean value to indicate that this data element is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage. */
  experimental?: boolean;
  /** A formal identifier that is used to identify this data element when it is represented in other formats, or referenced in a specification, model, design or an instance. */
  identifier?: Identifier[];
  /** A legal or geographic region in which the data element is intended to be used. */
  jurisdiction?: CodeableConcept[];
  /** Identifies a specification (other than a terminology) that the elements which make up the DataElement have some correspondence with. */
  mapping?: DataElementMapping[];
  /** A natural language name identifying the data element. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
  name?: string;
  /** The name of the individual or organization that published the data element. */
  publisher?: string;
  /** The status of this data element. Enables tracking the life-cycle of the content. */
  status: PublicationStatus;
  /** Identifies how precise the data element is in its definition. */
  stringency?: DataElementStringency;
  /** A short, descriptive, user-friendly title for the data element. */
  title?: string;
  /** An absolute URI that is used to identify this data element when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this data element is (or will be) published. The URL SHOULD include the major version of the data element. For more information see [Technical and Business Versions](resource.html#versions). */
  url?: uri;
  /** The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate data element instances. */
  useContext?: UsageContext[];
  /** The identifier that is used to identify this version of the data element when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the data element author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
  version?: string;
}
export interface DataElement extends _DataElement {
  constructor: { new (): DataElement };
}
export var DataElement: { new (): DataElement };

/** The formal description of a single piece of information that can be gathered and reported. */
interface _DataElementMapping extends _BackboneElement {
  /** Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage. */
  comment?: string;
  /** An internal id that is used to identify this mapping set when specific mappings are made on a per-element basis. */
  identity: id;
  /** A name for the specification that is being mapped to. */
  name?: string;
  /** An absolute URI that identifies the specification that this mapping is expressed to. */
  uri?: uri;
}
export interface DataElementMapping extends _DataElementMapping {
  constructor: { new (): DataElementMapping };
}
export var DataElementMapping: { new (): DataElementMapping };

/** Indicates the degree of precision of the data element definition.If the element is present, it must have either a @value, an @id, or extensions */
interface _DataElementStringency extends _Element {
  value?: DataElementStringencyList;
}
export interface DataElementStringency extends _DataElementStringency {
  constructor: { new (): DataElementStringency };
}
export var DataElementStringency: { new (): DataElementStringency };

export type DataElementStringencyList = 'comparable' | 'fully-specified' | 'equivalent' | 'convertable' | 'scaleable' | 'flexible';
interface _DataElementStringencyList extends _codePrimitive {
  content: DataElementStringencyList;
}

/** Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _DataRequirement extends _Element {
  /** Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. */
  codeFilter?: DataRequirementCodeFilter[];
  /** Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. */
  dateFilter?: DataRequirementDateFilter[];
  /** Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available. Note that the value for this element can be a path to allow references to nested elements. In that case, all the elements along the path must be supported. */
  mustSupport?: string[];
  /** The profile of the required data, specified as the uri of the profile definition. */
  profile?: uri[];
  /** The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile. */
  type: code;
}
export interface DataRequirement extends _DataRequirement {
  constructor: { new (): DataRequirement };
}
export var DataRequirement: { new (): DataRequirement };

/** Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _DataRequirementCodeFilter extends _Element {
  /** The code-valued attribute of the filter. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept. */
  path: string;
  /** The codes for the code filter. Only one of valueSet, valueCode, valueCoding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes. */
  valueCode?: code[];
  /** The CodeableConcepts for the code filter. Only one of valueSet, valueCode, valueConding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified CodeableConcepts. */
  valueCodeableConcept?: CodeableConcept[];
  /** The Codings for the code filter. Only one of valueSet, valueCode, valueConding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified Codings. */
  valueCoding?: Coding[];
  valueSetReference?: Reference;
  valueSetString?: string;
}
export interface DataRequirementCodeFilter extends _DataRequirementCodeFilter {
  constructor: { new (): DataRequirementCodeFilter };
}
export var DataRequirementCodeFilter: { new (): DataRequirementCodeFilter };

/** Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _DataRequirementDateFilter extends _Element {
  /** The date-valued attribute of the filter. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant. The path must resolve to an element of type dateTime, Period, Schedule, or Timing. */
  path: string;
  valueDateTime?: dateTime;
  valueDuration?: Duration;
  valuePeriod?: Period;
}
export interface DataRequirementDateFilter extends _DataRequirementDateFilter {
  constructor: { new (): DataRequirementDateFilter };
}
export var DataRequirementDateFilter: { new (): DataRequirementDateFilter };

/** A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.If the element is present, it must have either a @value, an @id, or extensions */
interface _date extends _Element {
  value?: datePrimitive;
}
export interface date extends _date {
  constructor: { new (): date };
}
export var date: { new (): date };

interface _datePrimitive extends BaseType {}
export interface datePrimitive extends _datePrimitive {
  constructor: { new (): datePrimitive };
}
export var datePrimitive: { new (): datePrimitive };

/** A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.If the element is present, it must have either a @value, an @id, or extensions */
interface _dateTime extends _Element {
  value?: dateTimePrimitive;
}
export interface dateTime extends _dateTime {
  constructor: { new (): dateTime };
}
export var dateTime: { new (): dateTime };

interface _dateTimePrimitive extends BaseType {}
export interface dateTimePrimitive extends _dateTimePrimitive {
  constructor: { new (): dateTimePrimitive };
}
export var dateTimePrimitive: { new (): dateTimePrimitive };

/** The days of the week.If the element is present, it must have either a @value, an @id, or extensions */
interface _DaysOfWeek extends _Element {
  value?: DaysOfWeekList;
}
export interface DaysOfWeek extends _DaysOfWeek {
  constructor: { new (): DaysOfWeek };
}
export var DaysOfWeek: { new (): DaysOfWeek };

export type DaysOfWeekList = 'mon' | 'tue' | 'wed' | 'thu' | 'fri' | 'sat' | 'sun';
interface _DaysOfWeekList extends _codePrimitive {
  content: DaysOfWeekList;
}

/** A rational number with implicit precisionDo not use a IEEE type floating point type, instead use something that works like a true decimal, with inbuilt precision (e.g. Java BigInteger)If the element is present, it must have either a @value, an @id, or extensions */
interface _decimal extends _Element {
  value?: number;
}
export interface decimal extends _decimal {
  constructor: { new (): decimal };
}
export var decimal: { new (): decimal };

export type decimalPrimitive = number;
type _decimalPrimitive = Primitive._number;

/** Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.If the element is present, it must have either a @value, an @id, or extensions */
interface _DetectedIssue extends _DomainResource {
  /** Individual or device responsible for the issue being raised.  For example, a decision support application or a pharmacist conducting a medication review. */
  author?: Reference;
  /** Identifies the general type of issue identified. */
  category?: CodeableConcept;
  /** The date or date-time when the detected issue was initially identified. */
  date?: dateTime;
  /** A textual explanation of the detected issue. */
  detail?: string;
  /** Business identifier associated with the detected issue record. */
  identifier?: Identifier;
  /** Indicates the resource representing the current activity or proposed activity that is potentially problematic. */
  implicated?: Reference[];
  /** Indicates an action that has been taken or is committed to to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action. */
  mitigation?: DetectedIssueMitigation[];
  /** Indicates the patient whose record the detected issue is associated with. */
  patient?: Reference;
  /** The literature, knowledge-base or similar reference that describes the propensity for the detected issue identified. */
  reference?: uri;
  /** Indicates the degree of importance associated with the identified issue based on the potential impact on the patient. */
  severity?: DetectedIssueSeverity;
  /** Indicates the status of the detected issue. */
  status: ObservationStatus;
}
export interface DetectedIssue extends _DetectedIssue {
  constructor: { new (): DetectedIssue };
}
export var DetectedIssue: { new (): DetectedIssue };

/** Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc. */
interface _DetectedIssueMitigation extends _BackboneElement {
  /** Describes the action that was taken or the observation that was made that reduces/eliminates the risk associated with the identified issue. */
  action: CodeableConcept;
  /** Identifies the practitioner who determined the mitigation and takes responsibility for the mitigation step occurring. */
  author?: Reference;
  /** Indicates when the mitigating action was documented. */
  date?: dateTime;
}
export interface DetectedIssueMitigation extends _DetectedIssueMitigation {
  constructor: { new (): DetectedIssueMitigation };
}
export var DetectedIssueMitigation: { new (): DetectedIssueMitigation };

/** Indicates the potential degree of impact of the identified issue on the patient.If the element is present, it must have either a @value, an @id, or extensions */
interface _DetectedIssueSeverity extends _Element {
  value?: DetectedIssueSeverityList;
}
export interface DetectedIssueSeverity extends _DetectedIssueSeverity {
  constructor: { new (): DetectedIssueSeverity };
}
export var DetectedIssueSeverity: { new (): DetectedIssueSeverity };

export type DetectedIssueSeverityList = 'high' | 'moderate' | 'low';
interface _DetectedIssueSeverityList extends _codePrimitive {
  content: DetectedIssueSeverityList;
}

/** This resource identifies an instance or a type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.  Medical devices include durable (reusable) medical equipment, implantable devices, as well as disposable equipment used for diagnostic, treatment, and research for healthcare and public health.  Non-medical devices may include items such as a machine, cellphone, computer, application, etc.If the element is present, it must have either a @value, an @id, or extensions */
interface _Device extends _DomainResource {
  /** Contact details for an organization or a particular human that is responsible for the device. */
  contact?: ContactPoint[];
  /** The date and time beyond which this device is no longer valid or should not be used (if applicable). */
  expirationDate?: dateTime;
  /** Unique instance identifiers assigned to a device by manufacturers other organizations or owners. */
  identifier?: Identifier[];
  /** The place where the device can be found. */
  location?: Reference;
  /** Lot number assigned by the manufacturer. */
  lotNumber?: string;
  /** The date and time when the device was manufactured. */
  manufactureDate?: dateTime;
  /** A name of the manufacturer. */
  manufacturer?: string;
  /** The "model" is an identifier assigned by the manufacturer to identify the product by its type. This number is shared by the all devices sold as the same type. */
  model?: string;
  /** Descriptive information, usage information or implantation information that is not captured in an existing element. */
  note?: Annotation[];
  /** An organization that is responsible for the provision and ongoing maintenance of the device. */
  owner?: Reference;
  /** Patient information, If the device is affixed to a person. */
  patient?: Reference;
  /** Provides additional safety characteristics about a medical device.  For example devices containing latex. */
  safety?: CodeableConcept[];
  /** Status of the Device availability. */
  status?: FHIRDeviceStatus;
  /** Code or identifier to identify a kind of device. */
  type?: CodeableConcept;
  /** [Unique device identifier (UDI)](device.html#5.11.3.2.2) assigned to device label or package. */
  udi?: DeviceUdi;
  /** A network address on which the device may be contacted directly. */
  url?: uri;
  /** The version of the device, if the device has multiple releases under the same model, or if the device is software or carries firmware. */
  version?: string;
}
export interface Device extends _Device {
  constructor: { new (): Device };
}
export var Device: { new (): Device };

/** The characteristics, operational status and capabilities of a medical-related component of a medical device.If the element is present, it must have either a @value, an @id, or extensions */
interface _DeviceComponent extends _DomainResource {
  /** The locally assigned unique identification by the software. For example: handle ID. */
  identifier: Identifier;
  /** The language code for the human-readable text string produced by the device. This language code will follow the IETF language tag. Example: en-US. */
  languageCode?: CodeableConcept;
  /** The timestamp for the most recent system change which includes device configuration or setting change. */
  lastSystemChange?: instant;
  /** The physical principle of the measurement. For example: thermal, chemical, acoustical, etc. */
  measurementPrinciple?: MeasmntPrinciple;
  /** The current operational status of the device. For example: On, Off, Standby, etc. */
  operationalStatus?: CodeableConcept[];
  /** The parameter group supported by the current device component that is based on some nomenclature, e.g. cardiovascular. */
  parameterGroup?: CodeableConcept;
  /** The link to the parent resource. For example: Channel is linked to its VMD parent. */
  parent?: Reference;
  /** The production specification such as component revision, serial number, etc. */
  productionSpecification?: DeviceComponentProductionSpecification[];
  /** The link to the source Device that contains administrative device information such as manufacture, serial number, etc. */
  source?: Reference;
  /** The component type as defined in the object-oriented or metric nomenclature partition. */
  type: CodeableConcept;
}
export interface DeviceComponent extends _DeviceComponent {
  constructor: { new (): DeviceComponent };
}
export var DeviceComponent: { new (): DeviceComponent };

/** The characteristics, operational status and capabilities of a medical-related component of a medical device. */
interface _DeviceComponentProductionSpecification extends _BackboneElement {
  /** The internal component unique identification. This is a provision for manufacture specific standard components using a private OID. 11073-10101 has a partition for private OID semantic that the manufacturer can make use of. */
  componentId?: Identifier;
  /** The printable string defining the component. */
  productionSpec?: string;
  /** The specification type, such as, serial number, part number, hardware revision, software revision, etc. */
  specType?: CodeableConcept;
}
export interface DeviceComponentProductionSpecification extends _DeviceComponentProductionSpecification {
  constructor: { new (): DeviceComponentProductionSpecification };
}
export var DeviceComponentProductionSpecification: { new (): DeviceComponentProductionSpecification };

/** Describes a measurement, calculation or setting capability of a medical device.If the element is present, it must have either a @value, an @id, or extensions */
interface _DeviceMetric extends _DomainResource {
  /** Describes the calibrations that have been performed or that are required to be performed. */
  calibration?: DeviceMetricCalibration[];
  /** Indicates the category of the observation generation process. A DeviceMetric can be for example a setting, measurement, or calculation. */
  category: DeviceMetricCategory;
  /** Describes the color representation for the metric. This is often used to aid clinicians to track and identify parameter types by color. In practice, consider a Patient Monitor that has ECG/HR and Pleth for example; the parameters are displayed in different characteristic colors, such as HR-blue, BP-green, and PR and SpO2- magenta. */
  color?: DeviceMetricColor;
  /** Describes the unique identification of this metric that has been assigned by the device or gateway software. For example: handle ID.  It should be noted that in order to make the identifier unique, the system element of the identifier should be set to the unique identifier of the device. */
  identifier: Identifier;
  /** Describes the measurement repetition time. This is not necessarily the same as the update period. The measurement repetition time can range from milliseconds up to hours. An example for a measurement repetition time in the range of milliseconds is the sampling rate of an ECG. An example for a measurement repetition time in the range of hours is a NIBP that is triggered automatically every hour. The update period may be different than the measurement repetition time, if the device does not update the published observed value with the same frequency as it was measured. */
  measurementPeriod?: Timing;
  /** Indicates current operational state of the device. For example: On, Off, Standby, etc. */
  operationalStatus?: DeviceMetricOperationalStatus;
  /** Describes the link to the  DeviceComponent that this DeviceMetric belongs to and that provide information about the location of this DeviceMetric in the containment structure of the parent Device. An example would be a DeviceComponent that represents a Channel. This reference can be used by a client application to distinguish DeviceMetrics that have the same type, but should be interpreted based on their containment location. */
  parent?: Reference;
  /** Describes the link to the  Device that this DeviceMetric belongs to and that contains administrative device information such as manufacturer, serial number, etc. */
  source?: Reference;
  /** Describes the type of the metric. For example: Heart Rate, PEEP Setting, etc. */
  type: CodeableConcept;
  /** Describes the unit that an observed value determined for this metric will have. For example: Percent, Seconds, etc. */
  unit?: CodeableConcept;
}
export interface DeviceMetric extends _DeviceMetric {
  constructor: { new (): DeviceMetric };
}
export var DeviceMetric: { new (): DeviceMetric };

/** Describes a measurement, calculation or setting capability of a medical device. */
interface _DeviceMetricCalibration extends _BackboneElement {
  /** Describes the state of the calibration. */
  state?: DeviceMetricCalibrationState;
  /** Describes the time last calibration has been performed. */
  time?: instant;
  /** Describes the type of the calibration method. */
  type?: DeviceMetricCalibrationType;
}
export interface DeviceMetricCalibration extends _DeviceMetricCalibration {
  constructor: { new (): DeviceMetricCalibration };
}
export var DeviceMetricCalibration: { new (): DeviceMetricCalibration };

/** Describes the state of a metric calibration.If the element is present, it must have either a @value, an @id, or extensions */
interface _DeviceMetricCalibrationState extends _Element {
  value?: DeviceMetricCalibrationStateList;
}
export interface DeviceMetricCalibrationState extends _DeviceMetricCalibrationState {
  constructor: { new (): DeviceMetricCalibrationState };
}
export var DeviceMetricCalibrationState: { new (): DeviceMetricCalibrationState };

export type DeviceMetricCalibrationStateList = 'not-calibrated' | 'calibration-required' | 'calibrated' | 'unspecified';
interface _DeviceMetricCalibrationStateList extends _codePrimitive {
  content: DeviceMetricCalibrationStateList;
}

/** Describes the type of a metric calibration.If the element is present, it must have either a @value, an @id, or extensions */
interface _DeviceMetricCalibrationType extends _Element {
  value?: DeviceMetricCalibrationTypeList;
}
export interface DeviceMetricCalibrationType extends _DeviceMetricCalibrationType {
  constructor: { new (): DeviceMetricCalibrationType };
}
export var DeviceMetricCalibrationType: { new (): DeviceMetricCalibrationType };

export type DeviceMetricCalibrationTypeList = 'unspecified' | 'offset' | 'gain' | 'two-point';
interface _DeviceMetricCalibrationTypeList extends _codePrimitive {
  content: DeviceMetricCalibrationTypeList;
}

/** Describes the category of the metric.If the element is present, it must have either a @value, an @id, or extensions */
interface _DeviceMetricCategory extends _Element {
  value?: DeviceMetricCategoryList;
}
export interface DeviceMetricCategory extends _DeviceMetricCategory {
  constructor: { new (): DeviceMetricCategory };
}
export var DeviceMetricCategory: { new (): DeviceMetricCategory };

export type DeviceMetricCategoryList = 'measurement' | 'setting' | 'calculation' | 'unspecified';
interface _DeviceMetricCategoryList extends _codePrimitive {
  content: DeviceMetricCategoryList;
}

/** Describes the typical color of representation.If the element is present, it must have either a @value, an @id, or extensions */
interface _DeviceMetricColor extends _Element {
  value?: DeviceMetricColorList;
}
export interface DeviceMetricColor extends _DeviceMetricColor {
  constructor: { new (): DeviceMetricColor };
}
export var DeviceMetricColor: { new (): DeviceMetricColor };

export type DeviceMetricColorList = 'black' | 'red' | 'green' | 'yellow' | 'blue' | 'magenta' | 'cyan' | 'white';
interface _DeviceMetricColorList extends _codePrimitive {
  content: DeviceMetricColorList;
}

/** Describes the operational status of the DeviceMetric.If the element is present, it must have either a @value, an @id, or extensions */
interface _DeviceMetricOperationalStatus extends _Element {
  value?: DeviceMetricOperationalStatusList;
}
export interface DeviceMetricOperationalStatus extends _DeviceMetricOperationalStatus {
  constructor: { new (): DeviceMetricOperationalStatus };
}
export var DeviceMetricOperationalStatus: { new (): DeviceMetricOperationalStatus };

export type DeviceMetricOperationalStatusList = 'on' | 'off' | 'standby' | 'entered-in-error';
interface _DeviceMetricOperationalStatusList extends _codePrimitive {
  content: DeviceMetricOperationalStatusList;
}

/** Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.If the element is present, it must have either a @value, an @id, or extensions */
interface _DeviceRequest extends _DomainResource {
  /** When the request transitioned to being actionable. */
  authoredOn?: dateTime;
  /** Plan/proposal/order fulfilled by this request. */
  basedOn?: Reference[];
  codeCodeableConcept: CodeableConcept;
  codeReference: Reference;
  /** An encounter that provides additional context in which this request is made. */
  context?: Reference;
  /** Protocol or definition followed by this request. For example: The proposed act must be performed if the indicated conditions occur, e.g.., shortness of breath, SpO2 less than x%. */
  definition?: Reference[];
  /** Composite request this is part of. */
  groupIdentifier?: Identifier;
  /** Identifiers assigned to this order by the orderer or by the receiver. */
  identifier?: Identifier[];
  /** Whether the request is a proposal, plan, an original order or a reflex order. */
  intent: CodeableConcept;
  /** Details about this request that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement. */
  note?: Annotation[];
  occurrenceDateTime?: dateTime;
  occurrencePeriod?: Period;
  occurrenceTiming?: Timing;
  /** The desired perfomer for doing the diagnostic testing. */
  performer?: Reference;
  /** Desired type of performer for doing the diagnostic testing. */
  performerType?: CodeableConcept;
  /** Indicates how quickly the {{title}} should be addressed with respect to other requests. */
  priority?: RequestPriority;
  /** The request takes the place of the referenced completed or terminated request(s). */
  priorRequest?: Reference[];
  /** Reason or justification for the use of this device. */
  reasonCode?: CodeableConcept[];
  /** Reason or justification for the use of this device. */
  reasonReference?: Reference[];
  /** Key events in the history of the request. */
  relevantHistory?: Reference[];
  /** The individual who initiated the request and has responsibility for its activation. */
  requester?: DeviceRequestRequester;
  /** The status of the request. */
  status?: RequestStatus;
  /** The patient who will use the device. */
  subject: Reference;
  /** Additional clinical information about the patient that may influence the request fulfilment.  For example, this may includes body where on the subject's the device will be used ( i.e. the target site). */
  supportingInfo?: Reference[];
}
export interface DeviceRequest extends _DeviceRequest {
  constructor: { new (): DeviceRequest };
}
export var DeviceRequest: { new (): DeviceRequest };

/** Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker. */
interface _DeviceRequestRequester extends _BackboneElement {
  /** The device, practitioner, etc. who initiated the request. */
  agent: Reference;
  /** The organization the device or practitioner was acting on behalf of. */
  onBehalfOf?: Reference;
}
export interface DeviceRequestRequester extends _DeviceRequestRequester {
  constructor: { new (): DeviceRequestRequester };
}
export var DeviceRequestRequester: { new (): DeviceRequestRequester };

/** This resource identifies an instance or a type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.  Medical devices include durable (reusable) medical equipment, implantable devices, as well as disposable equipment used for diagnostic, treatment, and research for healthcare and public health.  Non-medical devices may include items such as a machine, cellphone, computer, application, etc. */
interface _DeviceUdi extends _BackboneElement {
  /** The full UDI carrier of the Automatic Identification and Data Capture (AIDC) technology representation of the barcode string as printed on the packaging of the device - E.g a barcode or RFID.   Because of limitations on character sets in XML and the need to round-trip JSON data through XML, AIDC Formats *SHALL* be base64 encoded. */
  carrierAIDC?: base64Binary;
  /** The full UDI carrier as the human readable form (HRF) representation of the barcode string as printed on the packaging of the device. */
  carrierHRF?: string;
  /** The device identifier (DI) is a mandatory, fixed portion of a UDI that identifies the labeler and the specific version or model of a device. */
  deviceIdentifier?: string;
  /** A coded entry to indicate how the data was entered. */
  entryType?: UDIEntryType;
  /** Organization that is charged with issuing UDIs for devices.  For example, the US FDA issuers include :
   * 1) GS1:
   * http://hl7.org/fhir/NamingSystem/gs1-di,
   * 2) HIBCC:
   * http://hl7.org/fhir/NamingSystem/hibcc-dI,
   * 3) ICCBBA for blood containers:
   * http://hl7.org/fhir/NamingSystem/iccbba-blood-di,
   * 4) ICCBA for other devices:
   * http://hl7.org/fhir/NamingSystem/iccbba-other-di. */
  issuer?: uri;
  /** The identity of the authoritative source for UDI generation within a  jurisdiction.  All UDIs are globally unique within a single namespace. with the appropriate repository uri as the system.  For example,  UDIs of devices managed in the U.S. by the FDA, the value is  http://hl7.org/fhir/NamingSystem/fda-udi. */
  jurisdiction?: uri;
  /** Name of device as used in labeling or catalog. */
  name?: string;
}
export interface DeviceUdi extends _DeviceUdi {
  constructor: { new (): DeviceUdi };
}
export var DeviceUdi: { new (): DeviceUdi };

/** A record of a device being used by a patient where the record is the result of a report from the patient or another clinician.If the element is present, it must have either a @value, an @id, or extensions */
interface _DeviceUseStatement extends _DomainResource {
  /** Indicates the site on the subject's body where the device was used ( i.e. the target site). */
  bodySite?: CodeableConcept;
  /** The details of the device used. */
  device: Reference;
  /** An external identifier for this statement such as an IRI. */
  identifier?: Identifier[];
  /** Reason or justification for the use of the device. */
  indication?: CodeableConcept[];
  /** Details about the device statement that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement. */
  note?: Annotation[];
  /** The time at which the statement was made/recorded. */
  recordedOn?: dateTime;
  /** Who reported the device was being used by the patient. */
  source?: Reference;
  /** A code representing the patient or other source's judgment about the state of the device used that this statement is about.  Generally this will be active or completed. */
  status: DeviceUseStatementStatus;
  /** The patient who used the device. */
  subject: Reference;
  timingDateTime?: dateTime;
  timingPeriod?: Period;
  timingTiming?: Timing;
  /** The time period over which the device was used. */
  whenUsed?: Period;
}
export interface DeviceUseStatement extends _DeviceUseStatement {
  constructor: { new (): DeviceUseStatement };
}
export var DeviceUseStatement: { new (): DeviceUseStatement };

/** A coded concept indicating the current status of a the Device UsageIf the element is present, it must have either a @value, an @id, or extensions */
interface _DeviceUseStatementStatus extends _Element {
  value?: DeviceUseStatementStatusList;
}
export interface DeviceUseStatementStatus extends _DeviceUseStatementStatus {
  constructor: { new (): DeviceUseStatementStatus };
}
export var DeviceUseStatementStatus: { new (): DeviceUseStatementStatus };

export type DeviceUseStatementStatusList = 'active' | 'completed' | 'entered-in-error' | 'intended' | 'stopped' | 'on-hold';
interface _DeviceUseStatementStatusList extends _codePrimitive {
  content: DeviceUseStatementStatusList;
}

/** The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.If the element is present, it must have either a @value, an @id, or extensions */
interface _DiagnosticReport extends _DomainResource {
  /** Details concerning a test or procedure requested. */
  basedOn?: Reference[];
  /** A code that classifies the clinical discipline, department or diagnostic service that created the report (e.g. cardiology, biochemistry, hematology, MRI). This is used for searching, sorting and display purposes. */
  category?: CodeableConcept;
  /** A code or name that describes this diagnostic report. */
  code: CodeableConcept;
  /** Codes for the conclusion. */
  codedDiagnosis?: CodeableConcept[];
  /** Concise and clinically contextualized impression / summary of the diagnostic report. */
  conclusion?: string;
  /** The healthcare event  (e.g. a patient and healthcare provider interaction) which this DiagnosticReport per is about. */
  context?: Reference;
  effectiveDateTime?: dateTime;
  effectivePeriod?: Period;
  /** Identifiers assigned to this report by the performer or other systems. */
  identifier?: Identifier[];
  /** A list of key images associated with this report. The images are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest). */
  image?: DiagnosticReportImage[];
  /** One or more links to full details of any imaging performed during the diagnostic investigation. Typically, this is imaging performed by DICOM enabled modalities, but this is not required. A fully enabled PACS viewer can use this information to provide views of the source images. */
  imagingStudy?: Reference[];
  /** The date and time that this version of the report was released from the source diagnostic service. */
  issued?: instant;
  /** Indicates who or what participated in producing the report. */
  performer?: DiagnosticReportPerformer[];
  /** Rich text representation of the entire result as issued by the diagnostic service. Multiple formats are allowed but they SHALL be semantically equivalent. */
  presentedForm?: Attachment[];
  /** Observations that are part of this diagnostic report. Observations can be simple name/value pairs (e.g. "atomic" results), or they can be grouping observations that include references to other members of the group (e.g. "panels"). */
  result?: Reference[];
  /** Details about the specimens on which this diagnostic report is based. */
  specimen?: Reference[];
  /** The status of the diagnostic report as a whole. */
  status: DiagnosticReportStatus;
  /** The subject of the report. Usually, but not always, this is a patient. However diagnostic services also perform analyses on specimens collected from a variety of other sources. */
  subject?: Reference;
}
export interface DiagnosticReport extends _DiagnosticReport {
  constructor: { new (): DiagnosticReport };
}
export var DiagnosticReport: { new (): DiagnosticReport };

/** The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports. */
interface _DiagnosticReportImage extends _BackboneElement {
  /** A comment about the image. Typically, this is used to provide an explanation for why the image is included, or to draw the viewer's attention to important features. */
  comment?: string;
  /** Reference to the image source. */
  link: Reference;
}
export interface DiagnosticReportImage extends _DiagnosticReportImage {
  constructor: { new (): DiagnosticReportImage };
}
export var DiagnosticReportImage: { new (): DiagnosticReportImage };

/** The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports. */
interface _DiagnosticReportPerformer extends _BackboneElement {
  /** The reference to the  practitioner or organization involved in producing the report. For example, the diagnostic service that is responsible for issuing the report. */
  actor: Reference;
  /** Describes the type of participation (e.g.  a responsible party, author, or verifier). */
  role?: CodeableConcept;
}
export interface DiagnosticReportPerformer extends _DiagnosticReportPerformer {
  constructor: { new (): DiagnosticReportPerformer };
}
export var DiagnosticReportPerformer: { new (): DiagnosticReportPerformer };

/** The status of the diagnostic report as a whole.If the element is present, it must have either a @value, an @id, or extensions */
interface _DiagnosticReportStatus extends _Element {
  value?: DiagnosticReportStatusList;
}
export interface DiagnosticReportStatus extends _DiagnosticReportStatus {
  constructor: { new (): DiagnosticReportStatus };
}
export var DiagnosticReportStatus: { new (): DiagnosticReportStatus };

export type DiagnosticReportStatusList =
  | 'registered'
  | 'partial'
  | 'preliminary'
  | 'final'
  | 'amended'
  | 'corrected'
  | 'appended'
  | 'cancelled'
  | 'entered-in-error'
  | 'unknown';
interface _DiagnosticReportStatusList extends _codePrimitive {
  content: DiagnosticReportStatusList;
}

/** Whether the media is a photo, video, or audioIf the element is present, it must have either a @value, an @id, or extensions */
interface _DigitalMediaType extends _Element {
  value?: DigitalMediaTypeList;
}
export interface DigitalMediaType extends _DigitalMediaType {
  constructor: { new (): DigitalMediaType };
}
export var DigitalMediaType: { new (): DigitalMediaType };

export type DigitalMediaTypeList = 'photo' | 'video' | 'audio';
interface _DigitalMediaTypeList extends _codePrimitive {
  content: DigitalMediaTypeList;
}

/** How an element value is interpreted when discrimination is evaluatedIf the element is present, it must have either a @value, an @id, or extensions */
interface _DiscriminatorType extends _Element {
  value?: DiscriminatorTypeList;
}
export interface DiscriminatorType extends _DiscriminatorType {
  constructor: { new (): DiscriminatorType };
}
export var DiscriminatorType: { new (): DiscriminatorType };

export type DiscriminatorTypeList = 'value' | 'exists' | 'pattern' | 'type' | 'profile';
interface _DiscriminatorTypeList extends _codePrimitive {
  content: DiscriminatorTypeList;
}

/** A length - a value with a unit that is a physical distance.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _Distance extends _Quantity {}
export interface Distance extends _Distance {
  constructor: { new (): Distance };
}
export var Distance: { new (): Distance };

/** A collection of documents compiled for a purpose together with metadata that applies to the collection.If the element is present, it must have either a @value, an @id, or extensions */
interface _DocumentManifest extends _DomainResource {
  /** Identifies who is responsible for creating the manifest, and adding  documents to it. */
  author?: Reference[];
  /** The list of Documents included in the manifest. */
  content: DocumentManifestContent[];
  /** When the document manifest was created for submission to the server (not necessarily the same thing as the actual resource last modified time, since it may be modified, replicated, etc.). */
  created?: dateTime;
  /** Human-readable description of the source document. This is sometimes known as the "title". */
  description?: string;
  /** Other identifiers associated with the document manifest, including version independent  identifiers. */
  identifier?: Identifier[];
  /** A single identifier that uniquely identifies this manifest. Principally used to refer to the manifest in non-FHIR contexts. */
  masterIdentifier?: Identifier;
  /** A patient, practitioner, or organization for which this set of documents is intended. */
  recipient?: Reference[];
  /** Related identifiers or resources associated with the DocumentManifest. */
  related?: DocumentManifestRelated[];
  /** Identifies the source system, application, or software that produced the document manifest. */
  source?: uri;
  /** The status of this document manifest. */
  status: DocumentReferenceStatus;
  /** Who or what the set of documents is about. The documents can be about a person, (patient or healthcare practitioner), a device (i.e. machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure). If the documents cross more than one subject, then more than one subject is allowed here (unusual use case). */
  subject?: Reference;
  /** Specifies the kind of this set of documents (e.g. Patient Summary, Discharge Summary, Prescription, etc.). The type of a set of documents may be the same as one of the documents in it - especially if there is only one - but it may be wider. */
  type?: CodeableConcept;
}
export interface DocumentManifest extends _DocumentManifest {
  constructor: { new (): DocumentManifest };
}
export var DocumentManifest: { new (): DocumentManifest };

/** A collection of documents compiled for a purpose together with metadata that applies to the collection. */
interface _DocumentManifestContent extends _BackboneElement {
  pAttachment: Attachment;
  pReference: Reference;
}
export interface DocumentManifestContent extends _DocumentManifestContent {
  constructor: { new (): DocumentManifestContent };
}
export var DocumentManifestContent: { new (): DocumentManifestContent };

/** A collection of documents compiled for a purpose together with metadata that applies to the collection. */
interface _DocumentManifestRelated extends _BackboneElement {
  /** Related identifier to this DocumentManifest.  For example, Order numbers, accession numbers, XDW workflow numbers. */
  identifier?: Identifier;
  /** Related Resource to this DocumentManifest. For example, Order, ProcedureRequest,  Procedure, EligibilityRequest, etc. */
  ref?: Reference;
}
export interface DocumentManifestRelated extends _DocumentManifestRelated {
  constructor: { new (): DocumentManifestRelated };
}
export var DocumentManifestRelated: { new (): DocumentManifestRelated };

/** Whether the application produces or consumes documents.If the element is present, it must have either a @value, an @id, or extensions */
interface _DocumentMode extends _Element {
  value?: DocumentModeList;
}
export interface DocumentMode extends _DocumentMode {
  constructor: { new (): DocumentMode };
}
export var DocumentMode: { new (): DocumentMode };

export type DocumentModeList = 'producer' | 'consumer';
interface _DocumentModeList extends _codePrimitive {
  content: DocumentModeList;
}

/** A reference to a document.If the element is present, it must have either a @value, an @id, or extensions */
interface _DocumentReference extends _DomainResource {
  /** Which person or organization authenticates that this document is valid. */
  authenticator?: Reference;
  /** Identifies who is responsible for adding the information to the document. */
  author?: Reference[];
  /** A categorization for the type of document referenced - helps for indexing and searching. This may be implied by or derived from the code specified in the DocumentReference.type. */
  class?: CodeableConcept;
  /** The document and format referenced. There may be multiple content element repetitions, each with a different format. */
  content: DocumentReferenceContent[];
  /** The clinical context in which the document was prepared. */
  context?: DocumentReferenceContext;
  /** When the document was created. */
  created?: dateTime;
  /** Identifies the organization or group who is responsible for ongoing maintenance of and access to the document. */
  custodian?: Reference;
  /** Human-readable description of the source document. This is sometimes known as the "title". */
  description?: string;
  /** The status of the underlying document. */
  docStatus?: CompositionStatus;
  /** Other identifiers associated with the document, including version independent identifiers. */
  identifier?: Identifier[];
  /** When the document reference was created. */
  indexed: instant;
  /** Document identifier as assigned by the source of the document. This identifier is specific to this version of the document. This unique identifier may be used elsewhere to identify this version of the document. */
  masterIdentifier?: Identifier;
  /** Relationships that this document has with other document references that already exist. */
  relatesTo?: DocumentReferenceRelatesTo[];
  /** A set of Security-Tag codes specifying the level of privacy/security of the Document. Note that DocumentReference.meta.security contains the security labels of the "reference" to the document, while DocumentReference.securityLabel contains a snapshot of the security labels on the document the reference refers to. */
  securityLabel?: CodeableConcept[];
  /** The status of this document reference. */
  status: DocumentReferenceStatus;
  /** Who or what the document is about. The document can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure). */
  subject?: Reference;
  /** Specifies the particular kind of document referenced  (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the document referenced. */
  type: CodeableConcept;
}
export interface DocumentReference extends _DocumentReference {
  constructor: { new (): DocumentReference };
}
export var DocumentReference: { new (): DocumentReference };

/** A reference to a document. */
interface _DocumentReferenceContent extends _BackboneElement {
  /** The document or URL of the document along with critical metadata to prove content has integrity. */
  attachment: Attachment;
  /** An identifier of the document encoding, structure, and template that the document conforms to beyond the base format indicated in the mimeType. */
  format?: Coding;
}
export interface DocumentReferenceContent extends _DocumentReferenceContent {
  constructor: { new (): DocumentReferenceContent };
}
export var DocumentReferenceContent: { new (): DocumentReferenceContent };

/** A reference to a document. */
interface _DocumentReferenceContext extends _BackboneElement {
  /** Describes the clinical encounter or type of care that the document content is associated with. */
  encounter?: Reference;
  /** This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act. */
  event?: CodeableConcept[];
  /** The kind of facility where the patient was seen. */
  facilityType?: CodeableConcept;
  /** The time period over which the service that is described by the document was provided. */
  period?: Period;
  /** This property may convey specifics about the practice setting where the content was created, often reflecting the clinical specialty. */
  practiceSetting?: CodeableConcept;
  /** Related identifiers or resources associated with the DocumentReference. */
  related?: DocumentReferenceRelated[];
  /** The Patient Information as known when the document was published. May be a reference to a version specific, or contained. */
  sourcePatientInfo?: Reference;
}
export interface DocumentReferenceContext extends _DocumentReferenceContext {
  constructor: { new (): DocumentReferenceContext };
}
export var DocumentReferenceContext: { new (): DocumentReferenceContext };

/** A reference to a document. */
interface _DocumentReferenceRelated extends _BackboneElement {
  /** Related identifier to this DocumentReference. If both id and ref are present they shall refer to the same thing. */
  identifier?: Identifier;
  /** Related Resource to this DocumentReference. If both id and ref are present they shall refer to the same thing. */
  ref?: Reference;
}
export interface DocumentReferenceRelated extends _DocumentReferenceRelated {
  constructor: { new (): DocumentReferenceRelated };
}
export var DocumentReferenceRelated: { new (): DocumentReferenceRelated };

/** A reference to a document. */
interface _DocumentReferenceRelatesTo extends _BackboneElement {
  /** The type of relationship that this document has with anther document. */
  code: DocumentRelationshipType;
  /** The target document of this relationship. */
  target: Reference;
}
export interface DocumentReferenceRelatesTo extends _DocumentReferenceRelatesTo {
  constructor: { new (): DocumentReferenceRelatesTo };
}
export var DocumentReferenceRelatesTo: { new (): DocumentReferenceRelatesTo };

/** If the element is present, it must have either a @value, an @id, or extensions */
interface _DocumentReferenceStatus extends _Element {
  value?: DocumentReferenceStatusList;
}
export interface DocumentReferenceStatus extends _DocumentReferenceStatus {
  constructor: { new (): DocumentReferenceStatus };
}
export var DocumentReferenceStatus: { new (): DocumentReferenceStatus };

export type DocumentReferenceStatusList = 'current' | 'superseded' | 'entered-in-error';
interface _DocumentReferenceStatusList extends _codePrimitive {
  content: DocumentReferenceStatusList;
}

/** The type of relationship between documents.If the element is present, it must have either a @value, an @id, or extensions */
interface _DocumentRelationshipType extends _Element {
  value?: DocumentRelationshipTypeList;
}
export interface DocumentRelationshipType extends _DocumentRelationshipType {
  constructor: { new (): DocumentRelationshipType };
}
export var DocumentRelationshipType: { new (): DocumentRelationshipType };

export type DocumentRelationshipTypeList = 'replaces' | 'transforms' | 'signs' | 'appends';
interface _DocumentRelationshipTypeList extends _codePrimitive {
  content: DocumentRelationshipTypeList;
}

/** A resource that includes narrative, extensions, and contained resources. */
interface _DomainResource extends _Resource {
  /** These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope. */
  contained?: ResourceContainer[];
  /** May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
  extension?: Extension[];
  /** May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. */
  modifierExtension?: Extension[];
  /** A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
  text?: Narrative;
}
export interface DomainResource extends _DomainResource {
  constructor: { new (): DomainResource };
}
export var DomainResource: { new (): DomainResource };

/** Indicates how the medication is/was taken or should be taken by the patient.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _Dosage extends _Element {
  /** Supplemental instruction - e.g. "with meals". */
  additionalInstruction?: CodeableConcept[];
  asNeededBoolean?: boolean;
  asNeededCodeableConcept?: CodeableConcept;
  doseQuantity?: Quantity;
  doseRange?: Range;
  /** Upper limit on medication per administration. */
  maxDosePerAdministration?: Quantity;
  /** Upper limit on medication per lifetime of the patient. */
  maxDosePerLifetime?: Quantity;
  /** Upper limit on medication per unit of time. */
  maxDosePerPeriod?: Ratio;
  /** Technique for administering medication. */
  method?: CodeableConcept;
  /** Instructions in terms that are understood by the patient or consumer. */
  patientInstruction?: string;
  rateQuantity?: Quantity;
  rateRange?: Range;
  rateRatio?: Ratio;
  /** How drug should enter body. */
  route?: CodeableConcept;
  /** Indicates the order in which the dosage instructions should be applied or interpreted. */
  sequence?: integer;
  /** Body site to administer to. */
  site?: CodeableConcept;
  /** Free text dosage instructions e.g. SIG. */
  text?: string;
  /** When medication should be administered. */
  timing?: Timing;
}
export interface Dosage extends _Dosage {
  constructor: { new (): Dosage };
}
export var Dosage: { new (): Dosage };

/** A length of time.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _Duration extends _Quantity {}
export interface Duration extends _Duration {
  constructor: { new (): Duration };
}
export var Duration: { new (): Duration };

/** Base definition for all elements in a resource.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _Element extends BaseType {
  id?: string;
  /** May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
  extension?: Extension[];
}
export interface Element extends _Element {
  constructor: { new (): Element };
}
export var Element: { new (): Element };

/** Captures constraints on each element within the resource, profile, or extension.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _ElementDefinition extends _Element {
  /** Identifies additional names by which this element might also be known. */
  alias?: string[];
  /** Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. This information is provided when the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot. */
  base?: ElementDefinitionBase;
  /** Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri). */
  binding?: ElementDefinitionBinding;
  /** A code that has the same meaning as the element in a particular terminology. */
  code?: Coding[];
  /** Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. */
  comment?: markdown;
  /** A reference to an invariant that may make additional statements about the cardinality or value in the instance. */
  condition?: id[];
  /** Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance. */
  constraint?: ElementDefinitionConstraint[];
  /** Identifies the identity of an element defined elsewhere in the profile whose content rules should be applied to the current element. */
  contentReference?: uri;
  defaultValueAddress?: Address;
  defaultValueAge?: Age;
  defaultValueAnnotation?: Annotation;
  defaultValueAttachment?: Attachment;
  defaultValueBase64Binary?: base64Binary;
  defaultValueBoolean?: boolean;
  defaultValueCode?: code;
  defaultValueCodeableConcept?: CodeableConcept;
  defaultValueCoding?: Coding;
  defaultValueContactPoint?: ContactPoint;
  defaultValueCount?: Count;
  defaultValueDate?: date;
  defaultValueDateTime?: dateTime;
  defaultValueDecimal?: decimal;
  defaultValueDistance?: Distance;
  defaultValueDuration?: Duration;
  defaultValueHumanName?: HumanName;
  defaultValueId?: id;
  defaultValueIdentifier?: Identifier;
  defaultValueInstant?: instant;
  defaultValueInteger?: integer;
  defaultValueMarkdown?: markdown;
  defaultValueMeta?: Meta;
  defaultValueMoney?: Money;
  defaultValueOid?: oid;
  defaultValuePeriod?: Period;
  defaultValuePositiveInt?: positiveInt;
  defaultValueQuantity?: Quantity;
  defaultValueRange?: Range;
  defaultValueRatio?: Ratio;
  defaultValueReference?: Reference;
  defaultValueSampledData?: SampledData;
  defaultValueSignature?: Signature;
  defaultValueString?: string;
  defaultValueTime?: time;
  defaultValueTiming?: Timing;
  defaultValueUnsignedInt?: unsignedInt;
  defaultValueUri?: uri;
  /** Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. */
  definition?: markdown;
  /** A sample value for this element demonstrating the type of information that would typically be found in the element. */
  example?: ElementDefinitionExample[];
  fixedAddress?: Address;
  fixedAge?: Age;
  fixedAnnotation?: Annotation;
  fixedAttachment?: Attachment;
  fixedBase64Binary?: base64Binary;
  fixedBoolean?: boolean;
  fixedCode?: code;
  fixedCodeableConcept?: CodeableConcept;
  fixedCoding?: Coding;
  fixedContactPoint?: ContactPoint;
  fixedCount?: Count;
  fixedDate?: date;
  fixedDateTime?: dateTime;
  fixedDecimal?: decimal;
  fixedDistance?: Distance;
  fixedDuration?: Duration;
  fixedHumanName?: HumanName;
  fixedId?: id;
  fixedIdentifier?: Identifier;
  fixedInstant?: instant;
  fixedInteger?: integer;
  fixedMarkdown?: markdown;
  fixedMeta?: Meta;
  fixedMoney?: Money;
  fixedOid?: oid;
  fixedPeriod?: Period;
  fixedPositiveInt?: positiveInt;
  fixedQuantity?: Quantity;
  fixedRange?: Range;
  fixedRatio?: Ratio;
  fixedReference?: Reference;
  fixedSampledData?: SampledData;
  fixedSignature?: Signature;
  fixedString?: string;
  fixedTime?: time;
  fixedTiming?: Timing;
  fixedUnsignedInt?: unsignedInt;
  fixedUri?: uri;
  /** If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system. */
  isModifier?: boolean;
  /** Whether the element should be included if a client requests a search with the parameter _summary=true. */
  isSummary?: boolean;
  /** A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form. */
  label?: string;
  /** Identifies a concept from an external specification that roughly corresponds to this element. */
  mapping?: ElementDefinitionMapping[];
  /** The maximum number of times this element is permitted to appear in the instance. */
  max?: string;
  /** Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element. */
  maxLength?: integer;
  maxValueDate?: date;
  maxValueDateTime?: dateTime;
  maxValueDecimal?: decimal;
  maxValueInstant?: instant;
  maxValueInteger?: integer;
  maxValuePositiveInt?: positiveInt;
  maxValueQuantity?: Quantity;
  maxValueTime?: time;
  maxValueUnsignedInt?: unsignedInt;
  /** The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing'. */
  meaningWhenMissing?: markdown;
  /** The minimum number of times this element SHALL appear in the instance. */
  min?: unsignedInt;
  minValueDate?: date;
  minValueDateTime?: dateTime;
  minValueDecimal?: decimal;
  minValueInstant?: instant;
  minValueInteger?: integer;
  minValuePositiveInt?: positiveInt;
  minValueQuantity?: Quantity;
  minValueTime?: time;
  minValueUnsignedInt?: unsignedInt;
  /** If true, implementations that produce or consume resources SHALL provide "support" for the element in some meaningful way.  If false, the element may be ignored and not supported. */
  mustSupport?: boolean;
  /** If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning. */
  orderMeaning?: string;
  /** The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension. */
  path: string;
  patternAddress?: Address;
  patternAge?: Age;
  patternAnnotation?: Annotation;
  patternAttachment?: Attachment;
  patternBase64Binary?: base64Binary;
  patternBoolean?: boolean;
  patternCode?: code;
  patternCodeableConcept?: CodeableConcept;
  patternCoding?: Coding;
  patternContactPoint?: ContactPoint;
  patternCount?: Count;
  patternDate?: date;
  patternDateTime?: dateTime;
  patternDecimal?: decimal;
  patternDistance?: Distance;
  patternDuration?: Duration;
  patternHumanName?: HumanName;
  patternId?: id;
  patternIdentifier?: Identifier;
  patternInstant?: instant;
  patternInteger?: integer;
  patternMarkdown?: markdown;
  patternMeta?: Meta;
  patternMoney?: Money;
  patternOid?: oid;
  patternPeriod?: Period;
  patternPositiveInt?: positiveInt;
  patternQuantity?: Quantity;
  patternRange?: Range;
  patternRatio?: Ratio;
  patternReference?: Reference;
  patternSampledData?: SampledData;
  patternSignature?: Signature;
  patternString?: string;
  patternTime?: time;
  patternTiming?: Timing;
  patternUnsignedInt?: unsignedInt;
  patternUri?: uri;
  /** Codes that define how this element is represented in instances, when the deviation varies from the normal case. */
  representation?: PropertyRepresentation[];
  /** This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element. */
  requirements?: markdown;
  /** A concise description of what this element means (e.g. for use in autogenerated summaries). */
  short?: string;
  /** The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element. */
  sliceName?: string;
  /** Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set). */
  slicing?: ElementDefinitionSlicing;
  /** The data type or resource that the value of this element is permitted to be. */
  type?: ElementDefinitionType[];
}
export interface ElementDefinition extends _ElementDefinition {
  constructor: { new (): ElementDefinition };
}
export var ElementDefinition: { new (): ElementDefinition };

/** Captures constraints on each element within the resource, profile, or extension.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _ElementDefinitionBase extends _Element {
  /** Maximum cardinality of the base element identified by the path. */
  max: string;
  /** Minimum cardinality of the base element identified by the path. */
  min: unsignedInt;
  /** The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [[[StructureDefinition]]] without a StructureDefinition.base. */
  path: string;
}
export interface ElementDefinitionBase extends _ElementDefinitionBase {
  constructor: { new (): ElementDefinitionBase };
}
export var ElementDefinitionBase: { new (): ElementDefinitionBase };

/** Captures constraints on each element within the resource, profile, or extension.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _ElementDefinitionBinding extends _Element {
  /** Describes the intended use of this particular set of codes. */
  description?: string;
  /** Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances. */
  strength: BindingStrength;
  valueSetReference?: Reference;
  valueSetUri?: uri;
}
export interface ElementDefinitionBinding extends _ElementDefinitionBinding {
  constructor: { new (): ElementDefinitionBinding };
}
export var ElementDefinitionBinding: { new (): ElementDefinitionBinding };

/** Captures constraints on each element within the resource, profile, or extension.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _ElementDefinitionConstraint extends _Element {
  /** A [FHIRPath](http://hl7.org/fluentpath) expression of constraint that can be executed to see if this constraint is met. */
  expression: string;
  /** Text that can be used to describe the constraint in messages identifying that the constraint has been violated. */
  human: string;
  /** Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality. */
  key: id;
  /** Description of why this constraint is necessary or appropriate. */
  requirements?: string;
  /** Identifies the impact constraint violation has on the conformance of the instance. */
  severity: ConstraintSeverity;
  /** A reference to the original source of the constraint, for traceability purposes. */
  source?: uri;
  /** An XPath expression of constraint that can be executed to see if this constraint is met. */
  xpath?: string;
}
export interface ElementDefinitionConstraint extends _ElementDefinitionConstraint {
  constructor: { new (): ElementDefinitionConstraint };
}
export var ElementDefinitionConstraint: { new (): ElementDefinitionConstraint };

/** Captures constraints on each element within the resource, profile, or extension.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _ElementDefinitionDiscriminator extends _Element {
  /** A FHIRPath expression, using a restricted subset of FHIRPath, that is used to identify the element on which discrimination is based. */
  path: string;
  /** How the element value is interpreted when discrimination is evaluated. */
  type: DiscriminatorType;
}
export interface ElementDefinitionDiscriminator extends _ElementDefinitionDiscriminator {
  constructor: { new (): ElementDefinitionDiscriminator };
}
export var ElementDefinitionDiscriminator: { new (): ElementDefinitionDiscriminator };

/** Captures constraints on each element within the resource, profile, or extension.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _ElementDefinitionExample extends _Element {
  /** Describes the purpose of this example amoung the set of examples. */
  label: string;
  valueAddress: Address;
  valueAge: Age;
  valueAnnotation: Annotation;
  valueAttachment: Attachment;
  valueBase64Binary: base64Binary;
  valueBoolean: boolean;
  valueCode: code;
  valueCodeableConcept: CodeableConcept;
  valueCoding: Coding;
  valueContactPoint: ContactPoint;
  valueCount: Count;
  valueDate: date;
  valueDateTime: dateTime;
  valueDecimal: decimal;
  valueDistance: Distance;
  valueDuration: Duration;
  valueHumanName: HumanName;
  valueId: id;
  valueIdentifier: Identifier;
  valueInstant: instant;
  valueInteger: integer;
  valueMarkdown: markdown;
  valueMeta: Meta;
  valueMoney: Money;
  valueOid: oid;
  valuePeriod: Period;
  valuePositiveInt: positiveInt;
  valueQuantity: Quantity;
  valueRange: Range;
  valueRatio: Ratio;
  valueReference: Reference;
  valueSampledData: SampledData;
  valueSignature: Signature;
  valueString: string;
  valueTime: time;
  valueTiming: Timing;
  valueUnsignedInt: unsignedInt;
  valueUri: uri;
}
export interface ElementDefinitionExample extends _ElementDefinitionExample {
  constructor: { new (): ElementDefinitionExample };
}
export var ElementDefinitionExample: { new (): ElementDefinitionExample };

/** Captures constraints on each element within the resource, profile, or extension.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _ElementDefinitionMapping extends _Element {
  /** Comments that provide information about the mapping or its use. */
  comment?: string;
  /** An internal reference to the definition of a mapping. */
  identity: id;
  /** Identifies the computable language in which mapping.map is expressed. */
  language?: code;
  /** Expresses what part of the target specification corresponds to this element. */
  map: string;
}
export interface ElementDefinitionMapping extends _ElementDefinitionMapping {
  constructor: { new (): ElementDefinitionMapping };
}
export var ElementDefinitionMapping: { new (): ElementDefinitionMapping };

/** Captures constraints on each element within the resource, profile, or extension.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _ElementDefinitionSlicing extends _Element {
  /** A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated. */
  description?: string;
  /** Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices. */
  discriminator?: ElementDefinitionDiscriminator[];
  /** If the matching elements have to occur in the same order as defined in the profile. */
  ordered?: boolean;
  /** Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end. */
  rules: SlicingRules;
}
export interface ElementDefinitionSlicing extends _ElementDefinitionSlicing {
  constructor: { new (): ElementDefinitionSlicing };
}
export var ElementDefinitionSlicing: { new (): ElementDefinitionSlicing };

/** Captures constraints on each element within the resource, profile, or extension.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _ElementDefinitionType extends _Element {
  /** If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle. */
  aggregation?: AggregationMode[];
  /** URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models. */
  code: uri;
  /** Identifies a profile structure or implementation Guide that SHALL hold for the datatype this element refers to. Can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the resource SHALL conform to at least one profile defined in the implementation guide. */
  profile?: uri;
  /** Identifies a profile structure or implementation Guide that SHALL hold for the target of the reference this element refers to. Can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the resource SHALL conform to at least one profile defined in the implementation guide. */
  targetProfile?: uri;
  /** Whether this reference needs to be version specific or version independent, or whether either can be used. */
  versioning?: ReferenceVersionRules;
}
export interface ElementDefinitionType extends _ElementDefinitionType {
  constructor: { new (): ElementDefinitionType };
}
export var ElementDefinitionType: { new (): ElementDefinitionType };

/** The EligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an EligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.If the element is present, it must have either a @value, an @id, or extensions */
interface _EligibilityRequest extends _DomainResource {
  /** Dental, Vision, Medical, Pharmacy, Rehab etc. */
  benefitCategory?: CodeableConcept;
  /** Dental: basic, major, ortho; Vision exam, glasses, contacts; etc. */
  benefitSubCategory?: CodeableConcept;
  /** The contract number of a business agreement which describes the terms and conditions. */
  businessArrangement?: string;
  /** Financial instrument by which payment information for health care. */
  coverage?: Reference;
  /** The date when this resource was created. */
  created?: dateTime;
  /** Person who created the invoice/claim/pre-determination or pre-authorization. */
  enterer?: Reference;
  /** Facility where the services were provided. */
  facility?: Reference;
  /** The Response business identifier. */
  identifier?: Identifier[];
  /** The Insurer who is target  of the request. */
  insurer?: Reference;
  /** The organization which is responsible for the services rendered to the patient. */
  organization?: Reference;
  /** Patient Resource. */
  patient?: Reference;
  /** Immediate (STAT), best effort (NORMAL), deferred (DEFER). */
  priority?: CodeableConcept;
  /** The practitioner who is responsible for the services rendered to the patient. */
  provider?: Reference;
  servicedDate?: date;
  servicedPeriod?: Period;
  /** The status of the resource instance. */
  status?: FinancialResourceStatusCodes;
}
export interface EligibilityRequest extends _EligibilityRequest {
  constructor: { new (): EligibilityRequest };
}
export var EligibilityRequest: { new (): EligibilityRequest };

/** This resource provides eligibility and plan details from the processing of an Eligibility resource.If the element is present, it must have either a @value, an @id, or extensions */
interface _EligibilityResponse extends _DomainResource {
  /** The date when the enclosed suite of services were performed or completed. */
  created?: dateTime;
  /** A description of the status of the adjudication. */
  disposition?: string;
  /** Mutually exclusive with Services Provided (Item). */
  error?: EligibilityResponseError[];
  /** The form to be used for printing the content. */
  form?: CodeableConcept;
  /** The Response business identifier. */
  identifier?: Identifier[];
  /** Flag indicating if the coverage provided is inforce currently  if no service date(s) specified or for the whole duration of the service dates. */
  inforce?: boolean;
  /** The insurer may provide both the details for the requested coverage as well as details for additional coverages known to the insurer. */
  insurance?: EligibilityResponseInsurance[];
  /** The Insurer who produced this adjudicated response. */
  insurer?: Reference;
  /** Transaction status: error, complete. */
  outcome?: CodeableConcept;
  /** Original request resource reference. */
  request?: Reference;
  /** The organization which is responsible for the services rendered to the patient. */
  requestOrganization?: Reference;
  /** The practitioner who is responsible for the services rendered to the patient. */
  requestProvider?: Reference;
  /** The status of the resource instance. */
  status?: FinancialResourceStatusCodes;
}
export interface EligibilityResponse extends _EligibilityResponse {
  constructor: { new (): EligibilityResponse };
}
export var EligibilityResponse: { new (): EligibilityResponse };

/** This resource provides eligibility and plan details from the processing of an Eligibility resource. */
interface _EligibilityResponseBenefitBalance extends _BackboneElement {
  /** Dental, Vision, Medical, Pharmacy, Rehab etc. */
  category: CodeableConcept;
  /** A richer description of the benefit, for example 'DENT2 covers 100% of basic, 50% of major but exclused Ortho, Implants and Costmetic services'. */
  description?: string;
  /** True if the indicated class of service is excluded from the plan, missing or False indicated the service is included in the coverage. */
  excluded?: boolean;
  /** Benefits Used to date. */
  financial?: EligibilityResponseFinancial[];
  /** A short name or tag for the benefit, for example MED01, or DENT2. */
  name?: string;
  /** Network designation. */
  network?: CodeableConcept;
  /** Dental: basic, major, ortho; Vision exam, glasses, contacts; etc. */
  subCategory?: CodeableConcept;
  /** The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual vistis'. */
  term?: CodeableConcept;
  /** Unit designation: individual or family. */
  unit?: CodeableConcept;
}
export interface EligibilityResponseBenefitBalance extends _EligibilityResponseBenefitBalance {
  constructor: { new (): EligibilityResponseBenefitBalance };
}
export var EligibilityResponseBenefitBalance: { new (): EligibilityResponseBenefitBalance };

/** This resource provides eligibility and plan details from the processing of an Eligibility resource. */
interface _EligibilityResponseError extends _BackboneElement {
  /** An error code,from a specified code system, which details why the eligibility check could not be performed. */
  code: CodeableConcept;
}
export interface EligibilityResponseError extends _EligibilityResponseError {
  constructor: { new (): EligibilityResponseError };
}
export var EligibilityResponseError: { new (): EligibilityResponseError };

/** This resource provides eligibility and plan details from the processing of an Eligibility resource. */
interface _EligibilityResponseFinancial extends _BackboneElement {
  allowedMoney?: Money;
  allowedString?: string;
  allowedUnsignedInt?: unsignedInt;
  /** Deductable, visits, benefit amount. */
  type: CodeableConcept;
  usedMoney?: Money;
  usedUnsignedInt?: unsignedInt;
}
export interface EligibilityResponseFinancial extends _EligibilityResponseFinancial {
  constructor: { new (): EligibilityResponseFinancial };
}
export var EligibilityResponseFinancial: { new (): EligibilityResponseFinancial };

/** This resource provides eligibility and plan details from the processing of an Eligibility resource. */
interface _EligibilityResponseInsurance extends _BackboneElement {
  /** Benefits and optionally current balances by Category. */
  benefitBalance?: EligibilityResponseBenefitBalance[];
  /** The contract resource which may provide more detailed information. */
  contract?: Reference;
  /** A suite of updated or additional Coverages from the Insurer. */
  coverage?: Reference;
}
export interface EligibilityResponseInsurance extends _EligibilityResponseInsurance {
  constructor: { new (): EligibilityResponseInsurance };
}
export var EligibilityResponseInsurance: { new (): EligibilityResponseInsurance };

/** An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.If the element is present, it must have either a @value, an @id, or extensions */
interface _Encounter extends _DomainResource {
  /** The set of accounts that may be used for billing for this Encounter. */
  account?: Reference[];
  /** The appointment that scheduled this encounter. */
  appointment?: Reference;
  /** inpatient | outpatient | ambulatory | emergency +. */
  class?: Coding;
  /** The class history permits the tracking of the encounters transitions without needing to go  through the resource history.
   *
   * This would be used for a case where an admission starts of as an emergency encounter, then transisions into an inpatient scenario. Doing this and not restarting a new encounter ensures that any lab/diagnostic results can more easily follow the patient and not require re-processing and not get lost or cancelled during a kindof discharge from emergency to inpatient. */
  classHistory?: EncounterClassHistory[];
  /** The list of diagnosis relevant to this encounter. */
  diagnosis?: EncounterDiagnosis[];
  /** Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem.  The association is recorded on the encounter as these are typically created after the episode of care, and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years). */
  episodeOfCare?: Reference[];
  /** Details about the admission to a healthcare service. */
  hospitalization?: EncounterHospitalization;
  /** Identifier(s) by which this encounter is known. */
  identifier?: Identifier[];
  /** The referral request this encounter satisfies (incoming referral). */
  incomingReferral?: Reference[];
  /** Quantity of time the encounter lasted. This excludes the time during leaves of absence. */
  length?: Duration;
  /** List of locations where  the patient has been during this encounter. */
  location?: EncounterLocation[];
  /** The list of people responsible for providing the service. */
  participant?: EncounterParticipant[];
  /** Another Encounter of which this encounter is a part of (administratively or in time). */
  partOf?: Reference;
  /** The start and end time of the encounter. */
  period?: Period;
  /** Indicates the urgency of the encounter. */
  priority?: CodeableConcept;
  /** Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis. */
  reason?: CodeableConcept[];
  /** An organization that is in charge of maintaining the information of this Encounter (e.g. who maintains the report or the master service catalog item, etc.). This MAY be the same as the organization on the Patient record, however it could be different. This MAY not be not the Service Delivery Location's Organization. */
  serviceProvider?: Reference;
  /** planned | arrived | triaged | in-progress | onleave | finished | cancelled +. */
  status: EncounterStatus;
  /** The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them. */
  statusHistory?: EncounterStatusHistory[];
  /** The patient ro group present at the encounter. */
  subject?: Reference;
  /** Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation). */
  type?: CodeableConcept[];
}
export interface Encounter extends _Encounter {
  constructor: { new (): Encounter };
}
export var Encounter: { new (): Encounter };

/** An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient. */
interface _EncounterClassHistory extends _BackboneElement {
  /** inpatient | outpatient | ambulatory | emergency +. */
  class: Coding;
  /** The time that the episode was in the specified class. */
  period: Period;
}
export interface EncounterClassHistory extends _EncounterClassHistory {
  constructor: { new (): EncounterClassHistory };
}
export var EncounterClassHistory: { new (): EncounterClassHistory };

/** An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient. */
interface _EncounterDiagnosis extends _BackboneElement {
  /** Reason the encounter takes place, as specified using information from another resource. For admissions, this is the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure. */
  condition: Reference;
  /** Ranking of the diagnosis (for each role type). */
  rank?: positiveInt;
  /** Role that this diagnosis has within the encounter (e.g. admission, billing, discharge …). */
  role?: CodeableConcept;
}
export interface EncounterDiagnosis extends _EncounterDiagnosis {
  constructor: { new (): EncounterDiagnosis };
}
export var EncounterDiagnosis: { new (): EncounterDiagnosis };

/** An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient. */
interface _EncounterHospitalization extends _BackboneElement {
  /** From where patient was admitted (physician referral, transfer). */
  admitSource?: CodeableConcept;
  /** Location to which the patient is discharged. */
  destination?: Reference;
  /** Diet preferences reported by the patient. */
  dietPreference?: CodeableConcept[];
  /** Category or kind of location after discharge. */
  dischargeDisposition?: CodeableConcept;
  /** The location from which the patient came before admission. */
  origin?: Reference;
  /** Pre-admission identifier. */
  preAdmissionIdentifier?: Identifier;
  /** Whether this hospitalization is a readmission and why if known. */
  reAdmission?: CodeableConcept;
  /** Any special requests that have been made for this hospitalization encounter, such as the provision of specific equipment or other things. */
  specialArrangement?: CodeableConcept[];
  /** Special courtesies (VIP, board member). */
  specialCourtesy?: CodeableConcept[];
}
export interface EncounterHospitalization extends _EncounterHospitalization {
  constructor: { new (): EncounterHospitalization };
}
export var EncounterHospitalization: { new (): EncounterHospitalization };

/** An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient. */
interface _EncounterLocation extends _BackboneElement {
  /** The location where the encounter takes place. */
  location: Reference;
  /** Time period during which the patient was present at the location. */
  period?: Period;
  /** The status of the participants' presence at the specified location during the period specified. If the participant is is no longer at the location, then the period will have an end date/time. */
  status?: EncounterLocationStatus;
}
export interface EncounterLocation extends _EncounterLocation {
  constructor: { new (): EncounterLocation };
}
export var EncounterLocation: { new (): EncounterLocation };

/** The status of the location.If the element is present, it must have either a @value, an @id, or extensions */
interface _EncounterLocationStatus extends _Element {
  value?: EncounterLocationStatusList;
}
export interface EncounterLocationStatus extends _EncounterLocationStatus {
  constructor: { new (): EncounterLocationStatus };
}
export var EncounterLocationStatus: { new (): EncounterLocationStatus };

export type EncounterLocationStatusList = 'planned' | 'active' | 'reserved' | 'completed';
interface _EncounterLocationStatusList extends _codePrimitive {
  content: EncounterLocationStatusList;
}

/** An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient. */
interface _EncounterParticipant extends _BackboneElement {
  /** Persons involved in the encounter other than the patient. */
  individual?: Reference;
  /** The period of time that the specified participant participated in the encounter. These can overlap or be sub-sets of the overall encounter's period. */
  period?: Period;
  /** Role of participant in encounter. */
  type?: CodeableConcept[];
}
export interface EncounterParticipant extends _EncounterParticipant {
  constructor: { new (): EncounterParticipant };
}
export var EncounterParticipant: { new (): EncounterParticipant };

/** Current state of the encounterIf the element is present, it must have either a @value, an @id, or extensions */
interface _EncounterStatus extends _Element {
  value?: EncounterStatusList;
}
export interface EncounterStatus extends _EncounterStatus {
  constructor: { new (): EncounterStatus };
}
export var EncounterStatus: { new (): EncounterStatus };

/** An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient. */
interface _EncounterStatusHistory extends _BackboneElement {
  /** The time that the episode was in the specified status. */
  period: Period;
  /** planned | arrived | triaged | in-progress | onleave | finished | cancelled +. */
  status: EncounterStatus;
}
export interface EncounterStatusHistory extends _EncounterStatusHistory {
  constructor: { new (): EncounterStatusHistory };
}
export var EncounterStatusHistory: { new (): EncounterStatusHistory };

export type EncounterStatusList =
  | 'planned'
  | 'arrived'
  | 'triaged'
  | 'in-progress'
  | 'onleave'
  | 'finished'
  | 'cancelled'
  | 'entered-in-error'
  | 'unknown';
interface _EncounterStatusList extends _codePrimitive {
  content: EncounterStatusList;
}

/** The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b or a REST endpoint for another FHIR server. This may include any security context information.If the element is present, it must have either a @value, an @id, or extensions */
interface _Endpoint extends _DomainResource {
  /** The uri that describes the actual end-point to connect to. */
  address: uri;
  /** A coded value that represents the technical details of the usage of this endpoint, such as what WSDLs should be used in what way. (e.g. XDS.b/DICOM/cds-hook). */
  connectionType: Coding;
  /** Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting. */
  contact?: ContactPoint[];
  /** Additional headers / information to send as part of the notification. */
  header?: string[];
  /** Identifier for the organization that is used to identify the endpoint across multiple disparate systems. */
  identifier?: Identifier[];
  /** The organization that manages this endpoint (even if technically another organisation is hosting this in the cloud, it is the organisation associated with the data). */
  managingOrganization?: Reference;
  /** A friendly name that this endpoint can be referred to with. */
  name?: string;
  /** The mime type to send the payload in - e.g. application/fhir+xml, application/fhir+json. If the mime type is not specified, then the sender could send any content (including no content depending on the connectionType). */
  payloadMimeType?: code[];
  /** The payload type describes the acceptable content that can be communicated on the endpoint. */
  payloadType: CodeableConcept[];
  /** The interval during which the endpoint is expected to be operational. */
  period?: Period;
  /** active | suspended | error | off | test. */
  status: EndpointStatus;
}
export interface Endpoint extends _Endpoint {
  constructor: { new (): Endpoint };
}
export var Endpoint: { new (): Endpoint };

/** The status of the endpointIf the element is present, it must have either a @value, an @id, or extensions */
interface _EndpointStatus extends _Element {
  value?: EndpointStatusList;
}
export interface EndpointStatus extends _EndpointStatus {
  constructor: { new (): EndpointStatus };
}
export var EndpointStatus: { new (): EndpointStatus };

export type EndpointStatusList = 'active' | 'suspended' | 'error' | 'off' | 'entered-in-error' | 'test';
interface _EndpointStatusList extends _codePrimitive {
  content: EndpointStatusList;
}

/** This resource provides the insurance enrollment details to the insurer regarding a specified coverage.If the element is present, it must have either a @value, an @id, or extensions */
interface _EnrollmentRequest extends _DomainResource {
  /** Reference to the program or plan identification, underwriter or payor. */
  coverage?: Reference;
  /** The date when this resource was created. */
  created?: dateTime;
  /** The Response business identifier. */
  identifier?: Identifier[];
  /** The Insurer who is target  of the request. */
  insurer?: Reference;
  /** The organization which is responsible for the services rendered to the patient. */
  organization?: Reference;
  /** The practitioner who is responsible for the services rendered to the patient. */
  provider?: Reference;
  /** The status of the resource instance. */
  status?: FinancialResourceStatusCodes;
  /** Patient Resource. */
  subject?: Reference;
}
export interface EnrollmentRequest extends _EnrollmentRequest {
  constructor: { new (): EnrollmentRequest };
}
export var EnrollmentRequest: { new (): EnrollmentRequest };

/** This resource provides enrollment and plan details from the processing of an Enrollment resource.If the element is present, it must have either a @value, an @id, or extensions */
interface _EnrollmentResponse extends _DomainResource {
  /** The date when the enclosed suite of services were performed or completed. */
  created?: dateTime;
  /** A description of the status of the adjudication. */
  disposition?: string;
  /** The Response business identifier. */
  identifier?: Identifier[];
  /** The Insurer who produced this adjudicated response. */
  organization?: Reference;
  /** Processing status: error, complete. */
  outcome?: CodeableConcept;
  /** Original request resource reference. */
  request?: Reference;
  /** The organization which is responsible for the services rendered to the patient. */
  requestOrganization?: Reference;
  /** The practitioner who is responsible for the services rendered to the patient. */
  requestProvider?: Reference;
  /** The status of the resource instance. */
  status?: FinancialResourceStatusCodes;
}
export interface EnrollmentResponse extends _EnrollmentResponse {
  constructor: { new (): EnrollmentResponse };
}
export var EnrollmentResponse: { new (): EnrollmentResponse };

/** An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.If the element is present, it must have either a @value, an @id, or extensions */
interface _EpisodeOfCare extends _DomainResource {
  /** The set of accounts that may be used for billing for this EpisodeOfCare. */
  account?: Reference[];
  /** The practitioner that is the care manager/care co-ordinator for this patient. */
  careManager?: Reference;
  /** The list of diagnosis relevant to this episode of care. */
  diagnosis?: EpisodeOfCareDiagnosis[];
  /** The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes. */
  identifier?: Identifier[];
  /** The organization that has assumed the specific responsibilities for the specified duration. */
  managingOrganization?: Reference;
  /** The patient who is the focus of this episode of care. */
  patient: Reference;
  /** The interval during which the managing organization assumes the defined responsibility. */
  period?: Period;
  /** Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals. */
  referralRequest?: Reference[];
  /** planned | waitlist | active | onhold | finished | cancelled. */
  status: EpisodeOfCareStatus;
  /** The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource). */
  statusHistory?: EpisodeOfCareStatusHistory[];
  /** The list of practitioners that may be facilitating this episode of care for specific purposes. */
  team?: Reference[];
  /** A classification of the type of episode of care; e.g. specialist referral, disease management, type of funded care. */
  type?: CodeableConcept[];
}
export interface EpisodeOfCare extends _EpisodeOfCare {
  constructor: { new (): EpisodeOfCare };
}
export var EpisodeOfCare: { new (): EpisodeOfCare };

/** An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time. */
interface _EpisodeOfCareDiagnosis extends _BackboneElement {
  /** A list of conditions/problems/diagnoses that this episode of care is intended to be providing care for. */
  condition: Reference;
  /** Ranking of the diagnosis (for each role type). */
  rank?: positiveInt;
  /** Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge …). */
  role?: CodeableConcept;
}
export interface EpisodeOfCareDiagnosis extends _EpisodeOfCareDiagnosis {
  constructor: { new (): EpisodeOfCareDiagnosis };
}
export var EpisodeOfCareDiagnosis: { new (): EpisodeOfCareDiagnosis };

/** The status of the episode of care.If the element is present, it must have either a @value, an @id, or extensions */
interface _EpisodeOfCareStatus extends _Element {
  value?: EpisodeOfCareStatusList;
}
export interface EpisodeOfCareStatus extends _EpisodeOfCareStatus {
  constructor: { new (): EpisodeOfCareStatus };
}
export var EpisodeOfCareStatus: { new (): EpisodeOfCareStatus };

/** An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time. */
interface _EpisodeOfCareStatusHistory extends _BackboneElement {
  /** The period during this EpisodeOfCare that the specific status applied. */
  period: Period;
  /** planned | waitlist | active | onhold | finished | cancelled. */
  status: EpisodeOfCareStatus;
}
export interface EpisodeOfCareStatusHistory extends _EpisodeOfCareStatusHistory {
  constructor: { new (): EpisodeOfCareStatusHistory };
}
export var EpisodeOfCareStatusHistory: { new (): EpisodeOfCareStatusHistory };

export type EpisodeOfCareStatusList = 'planned' | 'waitlist' | 'active' | 'onhold' | 'finished' | 'cancelled' | 'entered-in-error';
interface _EpisodeOfCareStatusList extends _codePrimitive {
  content: EpisodeOfCareStatusList;
}

/** The mode of a message capability statement.If the element is present, it must have either a @value, an @id, or extensions */
interface _EventCapabilityMode extends _Element {
  value?: EventCapabilityModeList;
}
export interface EventCapabilityMode extends _EventCapabilityMode {
  constructor: { new (): EventCapabilityMode };
}
export var EventCapabilityMode: { new (): EventCapabilityMode };

export type EventCapabilityModeList = 'sender' | 'receiver';
interface _EventCapabilityModeList extends _codePrimitive {
  content: EventCapabilityModeList;
}

/** The status of the communication.If the element is present, it must have either a @value, an @id, or extensions */
interface _EventStatus extends _Element {
  value?: EventStatusList;
}
export interface EventStatus extends _EventStatus {
  constructor: { new (): EventStatus };
}
export var EventStatus: { new (): EventStatus };

export type EventStatusList = 'preparation' | 'in-progress' | 'suspended' | 'aborted' | 'completed' | 'entered-in-error' | 'unknown';
interface _EventStatusList extends _codePrimitive {
  content: EventStatusList;
}

/** Real world event relating to the schedule.If the element is present, it must have either a @value, an @id, or extensions */
interface _EventTiming extends _Element {
  value?: EventTimingList;
}
export interface EventTiming extends _EventTiming {
  constructor: { new (): EventTiming };
}
export var EventTiming: { new (): EventTiming };

export type EventTimingList =
  | 'MORN'
  | 'AFT'
  | 'EVE'
  | 'NIGHT'
  | 'PHS'
  | 'HS'
  | 'WAKE'
  | 'C'
  | 'CM'
  | 'CD'
  | 'CV'
  | 'AC'
  | 'ACM'
  | 'ACD'
  | 'ACV'
  | 'PC'
  | 'PCM'
  | 'PCD'
  | 'PCV';
interface _EventTimingList extends _codePrimitive {
  content: EventTimingList;
}

/** Resource to define constraints on the Expansion of a FHIR ValueSet.If the element is present, it must have either a @value, an @id, or extensions */
interface _ExpansionProfile extends _DomainResource {
  /** Controls whether inactive concepts are included or excluded in value set expansions. */
  activeOnly?: boolean;
  /** Contact details to assist a user in finding and communicating with the publisher. */
  contact?: ContactDetail[];
  /** The date  (and optionally time) when the expansion profile was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the expansion profile changes. */
  date?: dateTime;
  /** A free text natural language description of the expansion profile from a consumer's perspective. */
  description?: markdown;
  /** A set of criteria that provide the constraints imposed on the value set expansion by including or excluding designations. */
  designation?: ExpansionProfileDesignation;
  /** Specifies the language to be used for description in the expansions i.e. the language to be used for ValueSet.expansion.contains.display. */
  displayLanguage?: code;
  /** Code system, or a particular version of a code system to be excluded from value set expansions. */
  excludedSystem?: ExpansionProfileExcludedSystem;
  /** Controls whether or not the value set expansion nests codes or not (i.e. ValueSet.expansion.contains.contains). */
  excludeNested?: boolean;
  /** Controls whether or not the value set expansion includes codes which cannot be displayed in user interfaces. */
  excludeNotForUI?: boolean;
  /** Controls whether or not the value set expansion includes post coordinated codes. */
  excludePostCoordinated?: boolean;
  /** A boolean value to indicate that this expansion profile is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage. */
  experimental?: boolean;
  /** Fix use of a particular code system to a particular version. */
  fixedVersion?: ExpansionProfileFixedVersion[];
  /** A formal identifier that is used to identify this expansion profile when it is represented in other formats, or referenced in a specification, model, design or an instance. */
  identifier?: Identifier;
  /** Controls whether the value set definition is included or excluded in value set expansions. */
  includeDefinition?: boolean;
  /** Controls whether concept designations are to be included or excluded in value set expansions. */
  includeDesignations?: boolean;
  /** A legal or geographic region in which the expansion profile is intended to be used. */
  jurisdiction?: CodeableConcept[];
  /** If the value set being expanded is incomplete (because it is too big to expand), return a limited expansion (a subset) with an indicator that expansion is incomplete, using the extension [http://hl7.org/fhir/StructureDefinition/valueset-toocostly](extension-valueset-toocostly.html). */
  limitedExpansion?: boolean;
  /** A natural language name identifying the expansion profile. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
  name?: string;
  /** The name of the individual or organization that published the expansion profile. */
  publisher?: string;
  /** The status of this expansion profile. Enables tracking the life-cycle of the content. */
  status: PublicationStatus;
  /** An absolute URI that is used to identify this expansion profile when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this expansion profile is (or will be) published. The URL SHOULD include the major version of the expansion profile. For more information see [Technical and Business Versions](resource.html#versions). */
  url?: uri;
  /** The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate expansion profile instances. */
  useContext?: UsageContext[];
  /** The identifier that is used to identify this version of the expansion profile when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the expansion profile author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
  version?: string;
}
export interface ExpansionProfile extends _ExpansionProfile {
  constructor: { new (): ExpansionProfile };
}
export var ExpansionProfile: { new (): ExpansionProfile };

/** Resource to define constraints on the Expansion of a FHIR ValueSet. */
interface _ExpansionProfileDesignation extends _BackboneElement {
  /** Designations to be excluded. */
  exclude?: ExpansionProfileExclude;
  /** Designations to be included. */
  include?: ExpansionProfileInclude;
}
export interface ExpansionProfileDesignation extends _ExpansionProfileDesignation {
  constructor: { new (): ExpansionProfileDesignation };
}
export var ExpansionProfileDesignation: { new (): ExpansionProfileDesignation };

/** Resource to define constraints on the Expansion of a FHIR ValueSet. */
interface _ExpansionProfileDesignation1 extends _BackboneElement {
  /** The language this designation is defined for. */
  language?: code;
  /** Which kinds of designation to include in the expansion. */
  use?: Coding;
}
export interface ExpansionProfileDesignation1 extends _ExpansionProfileDesignation1 {
  constructor: { new (): ExpansionProfileDesignation1 };
}
export var ExpansionProfileDesignation1: { new (): ExpansionProfileDesignation1 };

/** Resource to define constraints on the Expansion of a FHIR ValueSet. */
interface _ExpansionProfileDesignation2 extends _BackboneElement {
  /** The language this designation is defined for. */
  language?: code;
  /** Which kinds of designation to exclude from the expansion. */
  use?: Coding;
}
export interface ExpansionProfileDesignation2 extends _ExpansionProfileDesignation2 {
  constructor: { new (): ExpansionProfileDesignation2 };
}
export var ExpansionProfileDesignation2: { new (): ExpansionProfileDesignation2 };

/** Resource to define constraints on the Expansion of a FHIR ValueSet. */
interface _ExpansionProfileExclude extends _BackboneElement {
  /** A data group for each designation to be excluded. */
  designation?: ExpansionProfileDesignation2[];
}
export interface ExpansionProfileExclude extends _ExpansionProfileExclude {
  constructor: { new (): ExpansionProfileExclude };
}
export var ExpansionProfileExclude: { new (): ExpansionProfileExclude };

/** Resource to define constraints on the Expansion of a FHIR ValueSet. */
interface _ExpansionProfileExcludedSystem extends _BackboneElement {
  /** An absolute URI which is the code system to be excluded. */
  system: uri;
  /** The version of the code system from which codes in the expansion should be excluded. */
  version?: string;
}
export interface ExpansionProfileExcludedSystem extends _ExpansionProfileExcludedSystem {
  constructor: { new (): ExpansionProfileExcludedSystem };
}
export var ExpansionProfileExcludedSystem: { new (): ExpansionProfileExcludedSystem };

/** Resource to define constraints on the Expansion of a FHIR ValueSet. */
interface _ExpansionProfileFixedVersion extends _BackboneElement {
  /** How to manage the intersection between a fixed version in a value set, and this fixed version of the system in the expansion profile. */
  mode: SystemVersionProcessingMode;
  /** The specific system for which to fix the version. */
  system: uri;
  /** The version of the code system from which codes in the expansion should be included. */
  version: string;
}
export interface ExpansionProfileFixedVersion extends _ExpansionProfileFixedVersion {
  constructor: { new (): ExpansionProfileFixedVersion };
}
export var ExpansionProfileFixedVersion: { new (): ExpansionProfileFixedVersion };

/** Resource to define constraints on the Expansion of a FHIR ValueSet. */
interface _ExpansionProfileInclude extends _BackboneElement {
  /** A data group for each designation to be included. */
  designation?: ExpansionProfileDesignation1[];
}
export interface ExpansionProfileInclude extends _ExpansionProfileInclude {
  constructor: { new (): ExpansionProfileInclude };
}
export var ExpansionProfileInclude: { new (): ExpansionProfileInclude };

/** This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.If the element is present, it must have either a @value, an @id, or extensions */
interface _ExplanationOfBenefit extends _DomainResource {
  /** An accident which resulted in the need for healthcare services. */
  accident?: ExplanationOfBenefitAccident;
  /** The first tier service adjudications for payor added services. */
  addItem?: ExplanationOfBenefitAddItem[];
  /** Balance by Benefit Category. */
  benefitBalance?: ExplanationOfBenefitBenefitBalance[];
  /** The billable period for which charges are being submitted. */
  billablePeriod?: Period;
  /** The members of the team who provided the overall service as well as their role and whether responsible and qualifications. */
  careTeam?: ExplanationOfBenefitCareTeam[];
  /** The business identifier for the instance: invoice number, claim number, pre-determination or pre-authorization number. */
  claim?: Reference;
  /** The business identifier for the instance: invoice number, claim number, pre-determination or pre-authorization number. */
  claimResponse?: Reference;
  /** The date when the EOB was created. */
  created?: dateTime;
  /** Ordered list of patient diagnosis for which care is sought. */
  diagnosis?: ExplanationOfBenefitDiagnosis[];
  /** A description of the status of the adjudication. */
  disposition?: string;
  /** The start and optional end dates of when the patient was precluded from working due to the treatable condition(s). */
  employmentImpacted?: Period;
  /** The person who created the explanation of benefit. */
  enterer?: Reference;
  /** Facility where the services were provided. */
  facility?: Reference;
  /** The form to be used for printing the content. */
  form?: CodeableConcept;
  /** The start and optional end dates of when the patient was confined to a treatment center. */
  hospitalization?: Period;
  /** The EOB Business Identifier. */
  identifier?: Identifier[];
  /** Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues. Often there are mutiple jurisdiction specific valuesets which are required. */
  information?: ExplanationOfBenefitInformation[];
  /** Financial instrument by which payment information for health care. */
  insurance?: ExplanationOfBenefitInsurance;
  /** The insurer which is responsible for the explanation of benefit. */
  insurer?: Reference;
  /** First tier of goods and services. */
  item?: ExplanationOfBenefitItem[];
  /** The provider which is responsible for the claim. */
  organization?: Reference;
  /** Original prescription which has been superceded by this prescription to support the dispensing of pharmacy services, medications or products. For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefor issues a new precription for an alternate medication which has the same theraputic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'. */
  originalPrescription?: Reference;
  /** Processing outcome errror, partial or complete processing. */
  outcome?: CodeableConcept;
  /** Patient Resource. */
  patient?: Reference;
  /** The party to be reimbursed for the services. */
  payee?: ExplanationOfBenefitPayee;
  /** Payment details for the claim if the claim has been paid. */
  payment?: ExplanationOfBenefitPayment;
  /** Precedence (primary, secondary, etc.). */
  precedence?: positiveInt;
  /** Prescription to support the dispensing of Pharmacy or Vision products. */
  prescription?: Reference;
  /** Ordered list of patient procedures performed to support the adjudication. */
  procedure?: ExplanationOfBenefitProcedure[];
  /** Note text. */
  processNote?: ExplanationOfBenefitProcessNote[];
  /** The provider which is responsible for the claim. */
  provider?: Reference;
  /** The referral resource which lists the date, practitioner, reason and other supporting information. */
  referral?: Reference;
  /** Other claims which are related to this claim such as prior claim versions or for related services. */
  related?: ExplanationOfBenefitRelated[];
  /** The status of the resource instance. */
  status?: ExplanationOfBenefitStatus;
  /** A finer grained suite of claim subtype codes which may convey Inpatient vs Outpatient and/or a specialty service. In the US the BillType. */
  subType?: CodeableConcept[];
  /** Total amount of benefit payable (Equal to sum of the Benefit amounts from all detail lines and additions less the Unallocated Deductable). */
  totalBenefit?: Money;
  /** The total cost of the services reported. */
  totalCost?: Money;
  /** The category of claim, eg, oral, pharmacy, vision, insitutional, professional. */
  type?: CodeableConcept;
  /** The amount of deductable applied which was not allocated to any particular service line. */
  unallocDeductable?: Money;
}
export interface ExplanationOfBenefit extends _ExplanationOfBenefit {
  constructor: { new (): ExplanationOfBenefit };
}
export var ExplanationOfBenefit: { new (): ExplanationOfBenefit };

/** This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
interface _ExplanationOfBenefitAccident extends _BackboneElement {
  /** Date of an accident which these services are addressing. */
  date?: date;
  locationAddress?: Address;
  locationReference?: Reference;
  /** Type of accident: work, auto, etc. */
  type?: CodeableConcept;
}
export interface ExplanationOfBenefitAccident extends _ExplanationOfBenefitAccident {
  constructor: { new (): ExplanationOfBenefitAccident };
}
export var ExplanationOfBenefitAccident: { new (): ExplanationOfBenefitAccident };

/** This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
interface _ExplanationOfBenefitAddItem extends _BackboneElement {
  /** The adjudications results. */
  adjudication?: ExplanationOfBenefitAdjudication[];
  /** Health Care Service Type Codes  to identify the classification of service or benefits. */
  category?: CodeableConcept;
  /** The second tier service adjudications for payor added services. */
  detail?: ExplanationOfBenefitDetail1[];
  /** The fee charged for the professional service or product. */
  fee?: Money;
  /** Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours. */
  modifier?: CodeableConcept[];
  /** A list of note references to the notes provided below. */
  noteNumber?: positiveInt[];
  /** The type of reveneu or cost center providing the product and/or service. */
  revenue?: CodeableConcept;
  /** List of input service items which this service line is intended to replace. */
  sequenceLinkId?: positiveInt[];
  /** If this is an actual service or product line, ie. not a Group, then use code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI). If a grouping item then use a group code to indicate the type of thing being grouped eg. 'glasses' or 'compound'. */
  service?: CodeableConcept;
}
export interface ExplanationOfBenefitAddItem extends _ExplanationOfBenefitAddItem {
  constructor: { new (): ExplanationOfBenefitAddItem };
}
export var ExplanationOfBenefitAddItem: { new (): ExplanationOfBenefitAddItem };

/** This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
interface _ExplanationOfBenefitAdjudication extends _BackboneElement {
  /** Monitory amount associated with the code. */
  amount?: Money;
  /** Code indicating: Co-Pay, deductable, elegible, benefit, tax, etc. */
  category: CodeableConcept;
  /** Adjudication reason such as limit reached. */
  reason?: CodeableConcept;
  /** A non-monetary value for example a percentage. Mutually exclusive to the amount element above. */
  value?: decimal;
}
export interface ExplanationOfBenefitAdjudication extends _ExplanationOfBenefitAdjudication {
  constructor: { new (): ExplanationOfBenefitAdjudication };
}
export var ExplanationOfBenefitAdjudication: { new (): ExplanationOfBenefitAdjudication };

/** This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
interface _ExplanationOfBenefitBenefitBalance extends _BackboneElement {
  /** Dental, Vision, Medical, Pharmacy, Rehab etc. */
  category: CodeableConcept;
  /** A richer description of the benefit, for example 'DENT2 covers 100% of basic, 50% of major but exclused Ortho, Implants and Costmetic services'. */
  description?: string;
  /** True if the indicated class of service is excluded from the plan, missing or False indicated the service is included in the coverage. */
  excluded?: boolean;
  /** Benefits Used to date. */
  financial?: ExplanationOfBenefitFinancial[];
  /** A short name or tag for the benefit, for example MED01, or DENT2. */
  name?: string;
  /** Network designation. */
  network?: CodeableConcept;
  /** Dental: basic, major, ortho; Vision exam, glasses, contacts; etc. */
  subCategory?: CodeableConcept;
  /** The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual vistis'. */
  term?: CodeableConcept;
  /** Unit designation: individual or family. */
  unit?: CodeableConcept;
}
export interface ExplanationOfBenefitBenefitBalance extends _ExplanationOfBenefitBenefitBalance {
  constructor: { new (): ExplanationOfBenefitBenefitBalance };
}
export var ExplanationOfBenefitBenefitBalance: { new (): ExplanationOfBenefitBenefitBalance };

/** This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
interface _ExplanationOfBenefitCareTeam extends _BackboneElement {
  /** The members of the team who provided the overall service. */
  provider: Reference;
  /** The qualification which is applicable for this service. */
  qualification?: CodeableConcept;
  /** The practitioner who is billing and responsible for the claimed services rendered to the patient. */
  responsible?: boolean;
  /** The lead, assisting or supervising practitioner and their discipline if a multidisiplinary team. */
  role?: CodeableConcept;
  /** Sequence of careteam which serves to order and provide a link. */
  sequence: positiveInt;
}
export interface ExplanationOfBenefitCareTeam extends _ExplanationOfBenefitCareTeam {
  constructor: { new (): ExplanationOfBenefitCareTeam };
}
export var ExplanationOfBenefitCareTeam: { new (): ExplanationOfBenefitCareTeam };

/** This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
interface _ExplanationOfBenefitDetail extends _BackboneElement {
  /** The adjudications results. */
  adjudication?: ExplanationOfBenefitAdjudication[];
  /** Health Care Service Type Codes  to identify the classification of service or benefits. */
  category?: CodeableConcept;
  /** A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount. */
  factor?: decimal;
  /** Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours. */
  modifier?: CodeableConcept[];
  /** The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied. */
  net?: Money;
  /** A list of note references to the notes provided below. */
  noteNumber?: positiveInt[];
  /** For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program. */
  programCode?: CodeableConcept[];
  /** The number of repetitions of a service or product. */
  quantity?: Quantity;
  /** The type of reveneu or cost center providing the product and/or service. */
  revenue?: CodeableConcept;
  /** A service line number. */
  sequence: positiveInt;
  /** If this is an actual service or product line, ie. not a Group, then use code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI). If a grouping item then use a group code to indicate the type of thing being grouped eg. 'glasses' or 'compound'. */
  service?: CodeableConcept;
  /** Third tier of goods and services. */
  subDetail?: ExplanationOfBenefitSubDetail[];
  /** The type of product or service. */
  type: CodeableConcept;
  /** List of Unique Device Identifiers associated with this line item. */
  udi?: Reference[];
  /** If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group. */
  unitPrice?: Money;
}
export interface ExplanationOfBenefitDetail extends _ExplanationOfBenefitDetail {
  constructor: { new (): ExplanationOfBenefitDetail };
}
export var ExplanationOfBenefitDetail: { new (): ExplanationOfBenefitDetail };

/** This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
interface _ExplanationOfBenefitDetail1 extends _BackboneElement {
  /** The adjudications results. */
  adjudication?: ExplanationOfBenefitAdjudication[];
  /** Health Care Service Type Codes  to identify the classification of service or benefits. */
  category?: CodeableConcept;
  /** The fee charged for the professional service or product. */
  fee?: Money;
  /** Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours. */
  modifier?: CodeableConcept[];
  /** A list of note references to the notes provided below. */
  noteNumber?: positiveInt[];
  /** The type of reveneu or cost center providing the product and/or service. */
  revenue?: CodeableConcept;
  /** A code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI). */
  service?: CodeableConcept;
}
export interface ExplanationOfBenefitDetail1 extends _ExplanationOfBenefitDetail1 {
  constructor: { new (): ExplanationOfBenefitDetail1 };
}
export var ExplanationOfBenefitDetail1: { new (): ExplanationOfBenefitDetail1 };

/** This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
interface _ExplanationOfBenefitDiagnosis extends _BackboneElement {
  diagnosisCodeableConcept: CodeableConcept;
  diagnosisReference: Reference;
  /** The package billing code, for example DRG, based on the assigned grouping code system. */
  packageCode?: CodeableConcept;
  /** Sequence of diagnosis which serves to provide a link. */
  sequence: positiveInt;
  /** The type of the Diagnosis, for example: admitting, primary, secondary, discharge. */
  type?: CodeableConcept[];
}
export interface ExplanationOfBenefitDiagnosis extends _ExplanationOfBenefitDiagnosis {
  constructor: { new (): ExplanationOfBenefitDiagnosis };
}
export var ExplanationOfBenefitDiagnosis: { new (): ExplanationOfBenefitDiagnosis };

/** This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
interface _ExplanationOfBenefitFinancial extends _BackboneElement {
  allowedMoney?: Money;
  allowedString?: string;
  allowedUnsignedInt?: unsignedInt;
  /** Deductable, visits, benefit amount. */
  type: CodeableConcept;
  usedMoney?: Money;
  usedUnsignedInt?: unsignedInt;
}
export interface ExplanationOfBenefitFinancial extends _ExplanationOfBenefitFinancial {
  constructor: { new (): ExplanationOfBenefitFinancial };
}
export var ExplanationOfBenefitFinancial: { new (): ExplanationOfBenefitFinancial };

/** This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
interface _ExplanationOfBenefitInformation extends _BackboneElement {
  /** The general class of the information supplied: information; exception; accident, employment; onset, etc. */
  category: CodeableConcept;
  /** System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought which may influence the adjudication. */
  code?: CodeableConcept;
  /** For example, provides the reason for: the additional stay, or missing tooth or any other situation where a reason code is required in addition to the content. */
  reason?: Coding;
  /** Sequence of the information element which serves to provide a link. */
  sequence: positiveInt;
  timingDate?: date;
  timingPeriod?: Period;
  valueAttachment?: Attachment;
  valueQuantity?: Quantity;
  valueReference?: Reference;
  valueString?: string;
}
export interface ExplanationOfBenefitInformation extends _ExplanationOfBenefitInformation {
  constructor: { new (): ExplanationOfBenefitInformation };
}
export var ExplanationOfBenefitInformation: { new (): ExplanationOfBenefitInformation };

/** This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
interface _ExplanationOfBenefitInsurance extends _BackboneElement {
  /** Reference to the program or plan identification, underwriter or payor. */
  coverage?: Reference;
  /** A list of references from the Insurer to which these services pertain. */
  preAuthRef?: string[];
}
export interface ExplanationOfBenefitInsurance extends _ExplanationOfBenefitInsurance {
  constructor: { new (): ExplanationOfBenefitInsurance };
}
export var ExplanationOfBenefitInsurance: { new (): ExplanationOfBenefitInsurance };

/** This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
interface _ExplanationOfBenefitItem extends _BackboneElement {
  /** The adjudications results. */
  adjudication?: ExplanationOfBenefitAdjudication[];
  /** Physical service site on the patient (limb, tooth, etc). */
  bodySite?: CodeableConcept;
  /** Careteam applicable for this service or product line. */
  careTeamLinkId?: positiveInt[];
  /** Health Care Service Type Codes  to identify the classification of service or benefits. */
  category?: CodeableConcept;
  /** Second tier of goods and services. */
  detail?: ExplanationOfBenefitDetail[];
  /** Diagnosis applicable for this service or product line. */
  diagnosisLinkId?: positiveInt[];
  /** A billed item may include goods or services provided in multiple encounters. */
  encounter?: Reference[];
  /** A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount. */
  factor?: decimal;
  /** Exceptions, special conditions and supporting information pplicable for this service or product line. */
  informationLinkId?: positiveInt[];
  locationAddress?: Address;
  locationCodeableConcept?: CodeableConcept;
  locationReference?: Reference;
  /** Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours. */
  modifier?: CodeableConcept[];
  /** The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied. */
  net?: Money;
  /** A list of note references to the notes provided below. */
  noteNumber?: positiveInt[];
  /** Procedures applicable for this service or product line. */
  procedureLinkId?: positiveInt[];
  /** For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program. */
  programCode?: CodeableConcept[];
  /** The number of repetitions of a service or product. */
  quantity?: Quantity;
  /** The type of reveneu or cost center providing the product and/or service. */
  revenue?: CodeableConcept;
  /** A service line number. */
  sequence: positiveInt;
  /** If this is an actual service or product line, ie. not a Group, then use code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI). If a grouping item then use a group code to indicate the type of thing being grouped eg. 'glasses' or 'compound'. */
  service?: CodeableConcept;
  servicedDate?: date;
  servicedPeriod?: Period;
  /** A region or surface of the site, eg. limb region or tooth surface(s). */
  subSite?: CodeableConcept[];
  /** List of Unique Device Identifiers associated with this line item. */
  udi?: Reference[];
  /** If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group. */
  unitPrice?: Money;
}
export interface ExplanationOfBenefitItem extends _ExplanationOfBenefitItem {
  constructor: { new (): ExplanationOfBenefitItem };
}
export var ExplanationOfBenefitItem: { new (): ExplanationOfBenefitItem };

/** This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
interface _ExplanationOfBenefitPayee extends _BackboneElement {
  /** Party to be reimbursed: Subscriber, provider, other. */
  party?: Reference;
  /** organization | patient | practitioner | relatedperson. */
  resourceType?: CodeableConcept;
  /** Type of Party to be reimbursed: Subscriber, provider, other. */
  type?: CodeableConcept;
}
export interface ExplanationOfBenefitPayee extends _ExplanationOfBenefitPayee {
  constructor: { new (): ExplanationOfBenefitPayee };
}
export var ExplanationOfBenefitPayee: { new (): ExplanationOfBenefitPayee };

/** This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
interface _ExplanationOfBenefitPayment extends _BackboneElement {
  /** Adjustment to the payment of this transaction which is not related to adjudication of this transaction. */
  adjustment?: Money;
  /** Reason for the payment adjustment. */
  adjustmentReason?: CodeableConcept;
  /** Payable less any payment adjustment. */
  amount?: Money;
  /** Estimated payment date. */
  date?: date;
  /** Payment identifer. */
  identifier?: Identifier;
  /** Whether this represents partial or complete payment of the claim. */
  type?: CodeableConcept;
}
export interface ExplanationOfBenefitPayment extends _ExplanationOfBenefitPayment {
  constructor: { new (): ExplanationOfBenefitPayment };
}
export var ExplanationOfBenefitPayment: { new (): ExplanationOfBenefitPayment };

/** This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
interface _ExplanationOfBenefitProcedure extends _BackboneElement {
  /** Date and optionally time the procedure was performed . */
  date?: dateTime;
  procedureCodeableConcept: CodeableConcept;
  procedureReference: Reference;
  /** Sequence of procedures which serves to order and provide a link. */
  sequence: positiveInt;
}
export interface ExplanationOfBenefitProcedure extends _ExplanationOfBenefitProcedure {
  constructor: { new (): ExplanationOfBenefitProcedure };
}
export var ExplanationOfBenefitProcedure: { new (): ExplanationOfBenefitProcedure };

/** This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
interface _ExplanationOfBenefitProcessNote extends _BackboneElement {
  /** The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-EN" for England English. */
  language?: CodeableConcept;
  /** An integer associated with each note which may be referred to from each service line item. */
  number?: positiveInt;
  /** The note text. */
  text?: string;
  /** The note purpose: Print/Display. */
  type?: CodeableConcept;
}
export interface ExplanationOfBenefitProcessNote extends _ExplanationOfBenefitProcessNote {
  constructor: { new (): ExplanationOfBenefitProcessNote };
}
export var ExplanationOfBenefitProcessNote: { new (): ExplanationOfBenefitProcessNote };

/** This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
interface _ExplanationOfBenefitRelated extends _BackboneElement {
  /** Other claims which are related to this claim such as prior claim versions or for related services. */
  claim?: Reference;
  /** An alternate organizational reference to the case or file to which this particular claim pertains - eg Property/Casualy insurer claim # or Workers Compensation case # . */
  reference?: Identifier;
  /** For example prior or umbrella. */
  relationship?: CodeableConcept;
}
export interface ExplanationOfBenefitRelated extends _ExplanationOfBenefitRelated {
  constructor: { new (): ExplanationOfBenefitRelated };
}
export var ExplanationOfBenefitRelated: { new (): ExplanationOfBenefitRelated };

/** A code specifying the state of the resource instance.If the element is present, it must have either a @value, an @id, or extensions */
interface _ExplanationOfBenefitStatus extends _Element {
  value?: ExplanationOfBenefitStatusList;
}
export interface ExplanationOfBenefitStatus extends _ExplanationOfBenefitStatus {
  constructor: { new (): ExplanationOfBenefitStatus };
}
export var ExplanationOfBenefitStatus: { new (): ExplanationOfBenefitStatus };

export type ExplanationOfBenefitStatusList = 'active' | 'cancelled' | 'draft' | 'entered-in-error';
interface _ExplanationOfBenefitStatusList extends _codePrimitive {
  content: ExplanationOfBenefitStatusList;
}

/** This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
interface _ExplanationOfBenefitSubDetail extends _BackboneElement {
  /** The adjudications results. */
  adjudication?: ExplanationOfBenefitAdjudication[];
  /** Health Care Service Type Codes  to identify the classification of service or benefits. */
  category?: CodeableConcept;
  /** A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount. */
  factor?: decimal;
  /** Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours. */
  modifier?: CodeableConcept[];
  /** The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied. */
  net?: Money;
  /** A list of note references to the notes provided below. */
  noteNumber?: positiveInt[];
  /** For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program. */
  programCode?: CodeableConcept[];
  /** The number of repetitions of a service or product. */
  quantity?: Quantity;
  /** The type of reveneu or cost center providing the product and/or service. */
  revenue?: CodeableConcept;
  /** A service line number. */
  sequence: positiveInt;
  /** A code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI). */
  service?: CodeableConcept;
  /** The type of product or service. */
  type: CodeableConcept;
  /** List of Unique Device Identifiers associated with this line item. */
  udi?: Reference[];
  /** The fee for an addittional service or product or charge. */
  unitPrice?: Money;
}
export interface ExplanationOfBenefitSubDetail extends _ExplanationOfBenefitSubDetail {
  constructor: { new (): ExplanationOfBenefitSubDetail };
}
export var ExplanationOfBenefitSubDetail: { new (): ExplanationOfBenefitSubDetail };

/** Optional Extension Element - found in all resources.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _Extension extends _Element {
  url: string;
  valueAddress?: Address;
  valueAge?: Age;
  valueAnnotation?: Annotation;
  valueAttachment?: Attachment;
  valueBase64Binary?: base64Binary;
  valueBoolean?: boolean;
  valueCode?: code;
  valueCodeableConcept?: CodeableConcept;
  valueCoding?: Coding;
  valueContactPoint?: ContactPoint;
  valueCount?: Count;
  valueDate?: date;
  valueDateTime?: dateTime;
  valueDecimal?: decimal;
  valueDistance?: Distance;
  valueDuration?: Duration;
  valueHumanName?: HumanName;
  valueId?: id;
  valueIdentifier?: Identifier;
  valueInstant?: instant;
  valueInteger?: integer;
  valueMarkdown?: markdown;
  valueMeta?: Meta;
  valueMoney?: Money;
  valueOid?: oid;
  valuePeriod?: Period;
  valuePositiveInt?: positiveInt;
  valueQuantity?: Quantity;
  valueRange?: Range;
  valueRatio?: Ratio;
  valueReference?: Reference;
  valueSampledData?: SampledData;
  valueSignature?: Signature;
  valueString?: string;
  valueTime?: time;
  valueTiming?: Timing;
  valueUnsignedInt?: unsignedInt;
  valueUri?: uri;
}
export interface Extension extends _Extension {
  constructor: { new (): Extension };
}
export var Extension: { new (): Extension };

/** How an extension context is interpreted.If the element is present, it must have either a @value, an @id, or extensions */
interface _ExtensionContext extends _Element {
  value?: ExtensionContextList;
}
export interface ExtensionContext extends _ExtensionContext {
  constructor: { new (): ExtensionContext };
}
export var ExtensionContext: { new (): ExtensionContext };

export type ExtensionContextList = 'resource' | 'datatype' | 'extension';
interface _ExtensionContextList extends _codePrimitive {
  content: ExtensionContextList;
}

/** A code that identifies the status of the family history record.If the element is present, it must have either a @value, an @id, or extensions */
interface _FamilyHistoryStatus extends _Element {
  value?: FamilyHistoryStatusList;
}
export interface FamilyHistoryStatus extends _FamilyHistoryStatus {
  constructor: { new (): FamilyHistoryStatus };
}
export var FamilyHistoryStatus: { new (): FamilyHistoryStatus };

export type FamilyHistoryStatusList = 'partial' | 'completed' | 'entered-in-error' | 'health-unknown';
interface _FamilyHistoryStatusList extends _codePrimitive {
  content: FamilyHistoryStatusList;
}

/** Significant health events and conditions for a person related to the patient relevant in the context of care for the patient.If the element is present, it must have either a @value, an @id, or extensions */
interface _FamilyMemberHistory extends _DomainResource {
  ageAge?: Age;
  ageRange?: Range;
  ageString?: string;
  bornDate?: date;
  bornPeriod?: Period;
  bornString?: string;
  /** The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition. */
  condition?: FamilyMemberHistoryCondition[];
  /** The date (and possibly time) when the family member history was taken. */
  date?: dateTime;
  deceasedAge?: Age;
  deceasedBoolean?: boolean;
  deceasedDate?: date;
  deceasedRange?: Range;
  deceasedString?: string;
  /** A protocol or questionnaire that was adhered to in whole or in part by this event. */
  definition?: Reference[];
  /** If true, indicates that the age value specified is an estimated value. */
  estimatedAge?: boolean;
  /** Administrative Gender - the gender that the relative is considered to have for administration and record keeping purposes. */
  gender?: AdministrativeGender;
  /** This records identifiers associated with this family member history record that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation). */
  identifier?: Identifier[];
  /** This will either be a name or a description; e.g. "Aunt Susan", "my cousin with the red hair". */
  name?: string;
  /** If true, indicates the taking of an individual family member's history did not occur. The notDone element should not be used to document negated conditions, such as a family member that did not have a condition. */
  notDone?: boolean;
  /** Describes why the family member's history is absent. */
  notDoneReason?: CodeableConcept;
  /** This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible. */
  note?: Annotation[];
  /** The person who this history concerns. */
  patient: Reference;
  /** Describes why the family member history occurred in coded or textual form. */
  reasonCode?: CodeableConcept[];
  /** Indicates a Condition, Observation, AllergyIntolerance, or QuestionnaireResponse that justifies this family member history event. */
  reasonReference?: Reference[];
  /** The type of relationship this person has to the patient (father, mother, brother etc.). */
  relationship: CodeableConcept;
  /** A code specifying the status of the record of the family history of a specific family member. */
  status: FamilyHistoryStatus;
}
export interface FamilyMemberHistory extends _FamilyMemberHistory {
  constructor: { new (): FamilyMemberHistory };
}
export var FamilyMemberHistory: { new (): FamilyMemberHistory };

/** Significant health events and conditions for a person related to the patient relevant in the context of care for the patient. */
interface _FamilyMemberHistoryCondition extends _BackboneElement {
  /** The actual condition specified. Could be a coded condition (like MI or Diabetes) or a less specific string like 'cancer' depending on how much is known about the condition and the capabilities of the creating system. */
  code: CodeableConcept;
  /** An area where general notes can be placed about this specific condition. */
  note?: Annotation[];
  onsetAge?: Age;
  onsetPeriod?: Period;
  onsetRange?: Range;
  onsetString?: string;
  /** Indicates what happened as a result of this condition.  If the condition resulted in death, deceased date is captured on the relation. */
  outcome?: CodeableConcept;
}
export interface FamilyMemberHistoryCondition extends _FamilyMemberHistoryCondition {
  constructor: { new (): FamilyMemberHistoryCondition };
}
export var FamilyMemberHistoryCondition: { new (): FamilyMemberHistoryCondition };

/** If the element is present, it must have either a @value, an @id, or extensions */
interface _FHIRAllTypes extends _Element {
  value?: FHIRAllTypesList;
}
export interface FHIRAllTypes extends _FHIRAllTypes {
  constructor: { new (): FHIRAllTypes };
}
export var FHIRAllTypes: { new (): FHIRAllTypes };

export type FHIRAllTypesList =
  | 'Address'
  | 'Age'
  | 'Annotation'
  | 'Attachment'
  | 'BackboneElement'
  | 'CodeableConcept'
  | 'Coding'
  | 'ContactDetail'
  | 'ContactPoint'
  | 'Contributor'
  | 'Count'
  | 'DataRequirement'
  | 'Distance'
  | 'Dosage'
  | 'Duration'
  | 'Element'
  | 'ElementDefinition'
  | 'Extension'
  | 'HumanName'
  | 'Identifier'
  | 'Meta'
  | 'Money'
  | 'Narrative'
  | 'ParameterDefinition'
  | 'Period'
  | 'Quantity'
  | 'Range'
  | 'Ratio'
  | 'Reference'
  | 'RelatedArtifact'
  | 'SampledData'
  | 'Signature'
  | 'SimpleQuantity'
  | 'Timing'
  | 'TriggerDefinition'
  | 'UsageContext'
  | 'base64Binary'
  | 'boolean'
  | 'code'
  | 'date'
  | 'dateTime'
  | 'decimal'
  | 'id'
  | 'instant'
  | 'integer'
  | 'markdown'
  | 'oid'
  | 'positiveInt'
  | 'string'
  | 'time'
  | 'unsignedInt'
  | 'uri'
  | 'uuid'
  | 'xhtml'
  | 'Account'
  | 'ActivityDefinition'
  | 'AdverseEvent'
  | 'AllergyIntolerance'
  | 'Appointment'
  | 'AppointmentResponse'
  | 'AuditEvent'
  | 'Basic'
  | 'Binary'
  | 'BodySite'
  | 'Bundle'
  | 'CapabilityStatement'
  | 'CarePlan'
  | 'CareTeam'
  | 'ChargeItem'
  | 'Claim'
  | 'ClaimResponse'
  | 'ClinicalImpression'
  | 'CodeSystem'
  | 'Communication'
  | 'CommunicationRequest'
  | 'CompartmentDefinition'
  | 'Composition'
  | 'ConceptMap'
  | 'Condition'
  | 'Consent'
  | 'Contract'
  | 'Coverage'
  | 'DataElement'
  | 'DetectedIssue'
  | 'Device'
  | 'DeviceComponent'
  | 'DeviceMetric'
  | 'DeviceRequest'
  | 'DeviceUseStatement'
  | 'DiagnosticReport'
  | 'DocumentManifest'
  | 'DocumentReference'
  | 'DomainResource'
  | 'EligibilityRequest'
  | 'EligibilityResponse'
  | 'Encounter'
  | 'Endpoint'
  | 'EnrollmentRequest'
  | 'EnrollmentResponse'
  | 'EpisodeOfCare'
  | 'ExpansionProfile'
  | 'ExplanationOfBenefit'
  | 'FamilyMemberHistory'
  | 'Flag'
  | 'Goal'
  | 'GraphDefinition'
  | 'Group'
  | 'GuidanceResponse'
  | 'HealthcareService'
  | 'ImagingManifest'
  | 'ImagingStudy'
  | 'Immunization'
  | 'ImmunizationRecommendation'
  | 'ImplementationGuide'
  | 'Library'
  | 'Linkage'
  | 'List'
  | 'Location'
  | 'Measure'
  | 'MeasureReport'
  | 'Media'
  | 'Medication'
  | 'MedicationAdministration'
  | 'MedicationDispense'
  | 'MedicationRequest'
  | 'MedicationStatement'
  | 'MessageDefinition'
  | 'MessageHeader'
  | 'NamingSystem'
  | 'NutritionOrder'
  | 'Observation'
  | 'OperationDefinition'
  | 'OperationOutcome'
  | 'Organization'
  | 'Parameters'
  | 'Patient'
  | 'PaymentNotice'
  | 'PaymentReconciliation'
  | 'Person'
  | 'PlanDefinition'
  | 'Practitioner'
  | 'PractitionerRole'
  | 'Procedure'
  | 'ProcedureRequest'
  | 'ProcessRequest'
  | 'ProcessResponse'
  | 'Provenance'
  | 'Questionnaire'
  | 'QuestionnaireResponse'
  | 'ReferralRequest'
  | 'RelatedPerson'
  | 'RequestGroup'
  | 'ResearchStudy'
  | 'ResearchSubject'
  | 'Resource'
  | 'RiskAssessment'
  | 'Schedule'
  | 'SearchParameter'
  | 'Sequence'
  | 'ServiceDefinition'
  | 'Slot'
  | 'Specimen'
  | 'StructureDefinition'
  | 'StructureMap'
  | 'Subscription'
  | 'Substance'
  | 'SupplyDelivery'
  | 'SupplyRequest'
  | 'Task'
  | 'TestReport'
  | 'TestScript'
  | 'ValueSet'
  | 'VisionPrescription'
  | 'Type'
  | 'Any';
interface _FHIRAllTypesList extends _codePrimitive {
  content: FHIRAllTypesList;
}

/** If the element is present, it must have either a @value, an @id, or extensions */
interface _FHIRDefinedType extends _Element {
  value?: FHIRDefinedTypeList;
}
export interface FHIRDefinedType extends _FHIRDefinedType {
  constructor: { new (): FHIRDefinedType };
}
export var FHIRDefinedType: { new (): FHIRDefinedType };

export type FHIRDefinedTypeList =
  | 'Address'
  | 'Age'
  | 'Annotation'
  | 'Attachment'
  | 'BackboneElement'
  | 'CodeableConcept'
  | 'Coding'
  | 'ContactDetail'
  | 'ContactPoint'
  | 'Contributor'
  | 'Count'
  | 'DataRequirement'
  | 'Distance'
  | 'Dosage'
  | 'Duration'
  | 'Element'
  | 'ElementDefinition'
  | 'Extension'
  | 'HumanName'
  | 'Identifier'
  | 'Meta'
  | 'Money'
  | 'Narrative'
  | 'ParameterDefinition'
  | 'Period'
  | 'Quantity'
  | 'Range'
  | 'Ratio'
  | 'Reference'
  | 'RelatedArtifact'
  | 'SampledData'
  | 'Signature'
  | 'SimpleQuantity'
  | 'Timing'
  | 'TriggerDefinition'
  | 'UsageContext'
  | 'base64Binary'
  | 'boolean'
  | 'code'
  | 'date'
  | 'dateTime'
  | 'decimal'
  | 'id'
  | 'instant'
  | 'integer'
  | 'markdown'
  | 'oid'
  | 'positiveInt'
  | 'string'
  | 'time'
  | 'unsignedInt'
  | 'uri'
  | 'uuid'
  | 'xhtml'
  | 'Account'
  | 'ActivityDefinition'
  | 'AdverseEvent'
  | 'AllergyIntolerance'
  | 'Appointment'
  | 'AppointmentResponse'
  | 'AuditEvent'
  | 'Basic'
  | 'Binary'
  | 'BodySite'
  | 'Bundle'
  | 'CapabilityStatement'
  | 'CarePlan'
  | 'CareTeam'
  | 'ChargeItem'
  | 'Claim'
  | 'ClaimResponse'
  | 'ClinicalImpression'
  | 'CodeSystem'
  | 'Communication'
  | 'CommunicationRequest'
  | 'CompartmentDefinition'
  | 'Composition'
  | 'ConceptMap'
  | 'Condition'
  | 'Consent'
  | 'Contract'
  | 'Coverage'
  | 'DataElement'
  | 'DetectedIssue'
  | 'Device'
  | 'DeviceComponent'
  | 'DeviceMetric'
  | 'DeviceRequest'
  | 'DeviceUseStatement'
  | 'DiagnosticReport'
  | 'DocumentManifest'
  | 'DocumentReference'
  | 'DomainResource'
  | 'EligibilityRequest'
  | 'EligibilityResponse'
  | 'Encounter'
  | 'Endpoint'
  | 'EnrollmentRequest'
  | 'EnrollmentResponse'
  | 'EpisodeOfCare'
  | 'ExpansionProfile'
  | 'ExplanationOfBenefit'
  | 'FamilyMemberHistory'
  | 'Flag'
  | 'Goal'
  | 'GraphDefinition'
  | 'Group'
  | 'GuidanceResponse'
  | 'HealthcareService'
  | 'ImagingManifest'
  | 'ImagingStudy'
  | 'Immunization'
  | 'ImmunizationRecommendation'
  | 'ImplementationGuide'
  | 'Library'
  | 'Linkage'
  | 'List'
  | 'Location'
  | 'Measure'
  | 'MeasureReport'
  | 'Media'
  | 'Medication'
  | 'MedicationAdministration'
  | 'MedicationDispense'
  | 'MedicationRequest'
  | 'MedicationStatement'
  | 'MessageDefinition'
  | 'MessageHeader'
  | 'NamingSystem'
  | 'NutritionOrder'
  | 'Observation'
  | 'OperationDefinition'
  | 'OperationOutcome'
  | 'Organization'
  | 'Parameters'
  | 'Patient'
  | 'PaymentNotice'
  | 'PaymentReconciliation'
  | 'Person'
  | 'PlanDefinition'
  | 'Practitioner'
  | 'PractitionerRole'
  | 'Procedure'
  | 'ProcedureRequest'
  | 'ProcessRequest'
  | 'ProcessResponse'
  | 'Provenance'
  | 'Questionnaire'
  | 'QuestionnaireResponse'
  | 'ReferralRequest'
  | 'RelatedPerson'
  | 'RequestGroup'
  | 'ResearchStudy'
  | 'ResearchSubject'
  | 'Resource'
  | 'RiskAssessment'
  | 'Schedule'
  | 'SearchParameter'
  | 'Sequence'
  | 'ServiceDefinition'
  | 'Slot'
  | 'Specimen'
  | 'StructureDefinition'
  | 'StructureMap'
  | 'Subscription'
  | 'Substance'
  | 'SupplyDelivery'
  | 'SupplyRequest'
  | 'Task'
  | 'TestReport'
  | 'TestScript'
  | 'ValueSet'
  | 'VisionPrescription';
interface _FHIRDefinedTypeList extends _codePrimitive {
  content: FHIRDefinedTypeList;
}

/** The availability status of the device.If the element is present, it must have either a @value, an @id, or extensions */
interface _FHIRDeviceStatus extends _Element {
  value?: FHIRDeviceStatusList;
}
export interface FHIRDeviceStatus extends _FHIRDeviceStatus {
  constructor: { new (): FHIRDeviceStatus };
}
export var FHIRDeviceStatus: { new (): FHIRDeviceStatus };

export type FHIRDeviceStatusList = 'active' | 'inactive' | 'entered-in-error' | 'unknown';
interface _FHIRDeviceStatusList extends _codePrimitive {
  content: FHIRDeviceStatusList;
}

/** A code to indicate if the substance is actively usedIf the element is present, it must have either a @value, an @id, or extensions */
interface _FHIRSubstanceStatus extends _Element {
  value?: FHIRSubstanceStatusList;
}
export interface FHIRSubstanceStatus extends _FHIRSubstanceStatus {
  constructor: { new (): FHIRSubstanceStatus };
}
export var FHIRSubstanceStatus: { new (): FHIRSubstanceStatus };

export type FHIRSubstanceStatusList = 'active' | 'inactive' | 'entered-in-error';
interface _FHIRSubstanceStatusList extends _codePrimitive {
  content: FHIRSubstanceStatusList;
}

/** The kind of operation to perform as a part of a property based filter.If the element is present, it must have either a @value, an @id, or extensions */
interface _FilterOperator extends _Element {
  value?: FilterOperatorList;
}
export interface FilterOperator extends _FilterOperator {
  constructor: { new (): FilterOperator };
}
export var FilterOperator: { new (): FilterOperator };

export type FilterOperatorList = '=' | 'is-a' | 'descendent-of' | 'is-not-a' | 'regex' | 'in' | 'not-in' | 'generalizes' | 'exists';
interface _FilterOperatorList extends _codePrimitive {
  content: FilterOperatorList;
}

/** A code specifying the state of the resource instance.If the element is present, it must have either a @value, an @id, or extensions */
interface _FinancialResourceStatusCodes extends _Element {
  value?: FinancialResourceStatusCodesList;
}
export interface FinancialResourceStatusCodes extends _FinancialResourceStatusCodes {
  constructor: { new (): FinancialResourceStatusCodes };
}
export var FinancialResourceStatusCodes: { new (): FinancialResourceStatusCodes };

export type FinancialResourceStatusCodesList = 'active' | 'cancelled' | 'draft' | 'entered-in-error';
interface _FinancialResourceStatusCodesList extends _codePrimitive {
  content: FinancialResourceStatusCodesList;
}

/** Prospective warnings of potential issues when providing care to the patient.If the element is present, it must have either a @value, an @id, or extensions */
interface _Flag extends _DomainResource {
  /** The person, organization or device that created the flag. */
  author?: Reference;
  /** Allows an flag to be divided into different categories like clinical, administrative etc. Intended to be used as a means of filtering which flags are displayed to particular user or in a given context. */
  category?: CodeableConcept;
  /** The coded value or textual component of the flag to display to the user. */
  code: CodeableConcept;
  /** This alert is only relevant during the encounter. */
  encounter?: Reference;
  /** Identifier assigned to the flag for external use (outside the FHIR environment). */
  identifier?: Identifier[];
  /** The period of time from the activation of the flag to inactivation of the flag. If the flag is active, the end of the period should be unspecified. */
  period?: Period;
  /** Supports basic workflow. */
  status: FlagStatus;
  /** The patient, location, group , organization , or practitioner, etc. this is about record this flag is associated with. */
  subject: Reference;
}
export interface Flag extends _Flag {
  constructor: { new (): Flag };
}
export var Flag: { new (): Flag };

/** Indicates whether this flag is active and needs to be displayed to a user, or whether it is no longer needed or entered in error.If the element is present, it must have either a @value, an @id, or extensions */
interface _FlagStatus extends _Element {
  value?: FlagStatusList;
}
export interface FlagStatus extends _FlagStatus {
  constructor: { new (): FlagStatus };
}
export var FlagStatus: { new (): FlagStatus };

export type FlagStatusList = 'active' | 'inactive' | 'entered-in-error';
interface _FlagStatusList extends _codePrimitive {
  content: FlagStatusList;
}

/** Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.If the element is present, it must have either a @value, an @id, or extensions */
interface _Goal extends _DomainResource {
  /** The identified conditions and other health record elements that are intended to be addressed by the goal. */
  addresses?: Reference[];
  /** Indicates a category the goal falls within. */
  category?: CodeableConcept[];
  /** Human-readable and/or coded description of a specific desired objective of care, such as "control blood pressure" or "negotiate an obstacle course" or "dance with child at wedding". */
  description: CodeableConcept;
  /** Indicates whose goal this is - patient goal, practitioner goal, etc. */
  expressedBy?: Reference;
  /** This records identifiers associated with this care plan that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation). */
  identifier?: Identifier[];
  /** Any comments related to the goal. */
  note?: Annotation[];
  /** Identifies the change (or lack of change) at the point when the status of the goal is assessed. */
  outcomeCode?: CodeableConcept[];
  /** Details of what's changed (or not changed). */
  outcomeReference?: Reference[];
  /** Identifies the mutually agreed level of importance associated with reaching/sustaining the goal. */
  priority?: CodeableConcept;
  startCodeableConcept?: CodeableConcept;
  startDate?: date;
  /** Indicates whether the goal has been reached and is still considered relevant. */
  status: GoalStatus;
  /** Identifies when the current status.  I.e. When initially created, when achieved, when cancelled, etc. */
  statusDate?: date;
  /** Captures the reason for the current status. */
  statusReason?: string;
  /** Identifies the patient, group or organization for whom the goal is being established. */
  subject?: Reference;
  /** Indicates what should be done by when. */
  target?: GoalTarget;
}
export interface Goal extends _Goal {
  constructor: { new (): Goal };
}
export var Goal: { new (): Goal };

/** Indicates whether the goal has been met and is still being targetedIf the element is present, it must have either a @value, an @id, or extensions */
interface _GoalStatus extends _Element {
  value?: GoalStatusList;
}
export interface GoalStatus extends _GoalStatus {
  constructor: { new (): GoalStatus };
}
export var GoalStatus: { new (): GoalStatus };

export type GoalStatusList =
  | 'proposed'
  | 'accepted'
  | 'planned'
  | 'in-progress'
  | 'on-target'
  | 'ahead-of-target'
  | 'behind-target'
  | 'sustaining'
  | 'achieved'
  | 'on-hold'
  | 'cancelled'
  | 'entered-in-error'
  | 'rejected';
interface _GoalStatusList extends _codePrimitive {
  content: GoalStatusList;
}

/** Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc. */
interface _GoalTarget extends _BackboneElement {
  detailCodeableConcept?: CodeableConcept;
  detailQuantity?: Quantity;
  detailRange?: Range;
  dueDate?: date;
  dueDuration?: Duration;
  /** The parameter whose value is being tracked, e.g. body weight, blood pressure, or hemoglobin A1c level. */
  measure?: CodeableConcept;
}
export interface GoalTarget extends _GoalTarget {
  constructor: { new (): GoalTarget };
}
export var GoalTarget: { new (): GoalTarget };

/** How a compartment must be linkedIf the element is present, it must have either a @value, an @id, or extensions */
interface _GraphCompartmentRule extends _Element {
  value?: GraphCompartmentRuleList;
}
export interface GraphCompartmentRule extends _GraphCompartmentRule {
  constructor: { new (): GraphCompartmentRule };
}
export var GraphCompartmentRule: { new (): GraphCompartmentRule };

export type GraphCompartmentRuleList = 'identical' | 'matching' | 'different' | 'custom';
interface _GraphCompartmentRuleList extends _codePrimitive {
  content: GraphCompartmentRuleList;
}

/** A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.If the element is present, it must have either a @value, an @id, or extensions */
interface _GraphDefinition extends _DomainResource {
  /** Contact details to assist a user in finding and communicating with the publisher. */
  contact?: ContactDetail[];
  /** The date  (and optionally time) when the graph definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the graph definition changes. */
  date?: dateTime;
  /** A free text natural language description of the graph definition from a consumer's perspective. */
  description?: markdown;
  /** A boolean value to indicate that this graph definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage. */
  experimental?: boolean;
  /** A legal or geographic region in which the graph definition is intended to be used. */
  jurisdiction?: CodeableConcept[];
  /** Links this graph makes rules about. */
  link?: GraphDefinitionLink[];
  /** A natural language name identifying the graph definition. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
  name: string;
  /** The profile that describes the use of the base resource. */
  profile?: uri;
  /** The name of the individual or organization that published the graph definition. */
  publisher?: string;
  /** Explaination of why this graph definition is needed and why it has been designed as it has. */
  purpose?: markdown;
  /** The type of FHIR resource at which instances of this graph start. */
  start: ResourceType;
  /** The status of this graph definition. Enables tracking the life-cycle of the content. */
  status: PublicationStatus;
  /** An absolute URI that is used to identify this graph definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this graph definition is (or will be) published. The URL SHOULD include the major version of the graph definition. For more information see [Technical and Business Versions](resource.html#versions). */
  url?: uri;
  /** The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate graph definition instances. */
  useContext?: UsageContext[];
  /** The identifier that is used to identify this version of the graph definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the graph definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
  version?: string;
}
export interface GraphDefinition extends _GraphDefinition {
  constructor: { new (): GraphDefinition };
}
export var GraphDefinition: { new (): GraphDefinition };

/** A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set. */
interface _GraphDefinitionCompartment extends _BackboneElement {
  /** Identifies the compartment. */
  code: CompartmentType;
  /** Documentation for FHIRPath expression. */
  description?: string;
  /** Custom rule, as a FHIRPath expression. */
  expression?: string;
  /** identical | matching | different | no-rule | custom. */
  rule: GraphCompartmentRule;
}
export interface GraphDefinitionCompartment extends _GraphDefinitionCompartment {
  constructor: { new (): GraphDefinitionCompartment };
}
export var GraphDefinitionCompartment: { new (): GraphDefinitionCompartment };

/** A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set. */
interface _GraphDefinitionLink extends _BackboneElement {
  /** Information about why this link is of interest in this graph definition. */
  description?: string;
  /** Maximum occurrences for this link. */
  max?: string;
  /** Minimum occurrences for this link. */
  min?: integer;
  /** Path in the resource that contains the link. */
  path: string;
  /** Which slice (if profiled). */
  sliceName?: string;
  /** Potential target for the link. */
  target: GraphDefinitionTarget[];
}
export interface GraphDefinitionLink extends _GraphDefinitionLink {
  constructor: { new (): GraphDefinitionLink };
}
export var GraphDefinitionLink: { new (): GraphDefinitionLink };

/** A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set. */
interface _GraphDefinitionTarget extends _BackboneElement {
  /** Compartment Consistency Rules. */
  compartment?: GraphDefinitionCompartment[];
  /** Additional links from target resource. */
  link?: GraphDefinitionLink[];
  /** Profile for the target resource. */
  profile?: uri;
  /** Type of resource this link refers to. */
  type: ResourceType;
}
export interface GraphDefinitionTarget extends _GraphDefinitionTarget {
  constructor: { new (): GraphDefinitionTarget };
}
export var GraphDefinitionTarget: { new (): GraphDefinitionTarget };

/** Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.If the element is present, it must have either a @value, an @id, or extensions */
interface _Group extends _DomainResource {
  /** Indicates whether the record for the group is available for use or is merely being retained for historical purposes. */
  active?: boolean;
  /** If true, indicates that the resource refers to a specific group of real individuals.  If false, the group defines a set of intended individuals. */
  actual: boolean;
  /** Identifies the traits shared by members of the group. */
  characteristic?: GroupCharacteristic[];
  /** Provides a specific type of resource the group includes; e.g. "cow", "syringe", etc. */
  code?: CodeableConcept;
  /** A unique business identifier for this group. */
  identifier?: Identifier[];
  /** Identifies the resource instances that are members of the group. */
  member?: GroupMember[];
  /** A label assigned to the group for human identification and communication. */
  name?: string;
  /** A count of the number of resource instances that are part of the group. */
  quantity?: unsignedInt;
  /** Identifies the broad classification of the kind of resources the group includes. */
  type: GroupType;
}
export interface Group extends _Group {
  constructor: { new (): Group };
}
export var Group: { new (): Group };

/** Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization. */
interface _GroupCharacteristic extends _BackboneElement {
  /** A code that identifies the kind of trait being asserted. */
  code: CodeableConcept;
  /** If true, indicates the characteristic is one that is NOT held by members of the group. */
  exclude: boolean;
  /** The period over which the characteristic is tested; e.g. the patient had an operation during the month of June. */
  period?: Period;
  valueBoolean: boolean;
  valueCodeableConcept: CodeableConcept;
  valueQuantity: Quantity;
  valueRange: Range;
}
export interface GroupCharacteristic extends _GroupCharacteristic {
  constructor: { new (): GroupCharacteristic };
}
export var GroupCharacteristic: { new (): GroupCharacteristic };

/** Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization. */
interface _GroupMember extends _BackboneElement {
  /** A reference to the entity that is a member of the group. Must be consistent with Group.type. */
  entity: Reference;
  /** A flag to indicate that the member is no longer in the group, but previously may have been a member. */
  inactive?: boolean;
  /** The period that the member was in the group, if known. */
  period?: Period;
}
export interface GroupMember extends _GroupMember {
  constructor: { new (): GroupMember };
}
export var GroupMember: { new (): GroupMember };

/** Types of resources that are part of groupIf the element is present, it must have either a @value, an @id, or extensions */
interface _GroupType extends _Element {
  value?: GroupTypeList;
}
export interface GroupType extends _GroupType {
  constructor: { new (): GroupType };
}
export var GroupType: { new (): GroupType };

export type GroupTypeList = 'person' | 'animal' | 'practitioner' | 'device' | 'medication' | 'substance';
interface _GroupTypeList extends _codePrimitive {
  content: GroupTypeList;
}

/** A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken.If the element is present, it must have either a @value, an @id, or extensions */
interface _GuidanceResponse extends _DomainResource {
  /** Allows the context of the guidance response to be provided if available. In a service context, this would likely be unavailable. */
  context?: Reference;
  /** If the evaluation could not be completed due to lack of information, or additional information would potentially result in a more accurate response, this element will a description of the data required in order to proceed with the evaluation. A subsequent request to the service should include this data. */
  dataRequirement?: DataRequirement[];
  /** Messages resulting from the evaluation of the artifact or artifacts. As part of evaluating the request, the engine may produce informational or warning messages. These messages will be provided by this element. */
  evaluationMessage?: Reference[];
  /** Allows a service to provide a unique, business identifier for the response. */
  identifier?: Identifier;
  /** A reference to the knowledge module that was invoked. */
  module: Reference;
  /** Provides a mechanism to communicate additional information about the response. */
  note?: Annotation[];
  /** Indicates when the guidance response was processed. */
  occurrenceDateTime?: dateTime;
  /** The output parameters of the evaluation, if any. Many modules will result in the return of specific resources such as procedure or communication requests that are returned as part of the operation result. However, modules may define specific outputs that would be returned as the result of the evaluation, and these would be returned in this element. */
  outputParameters?: Reference;
  /** Provides a reference to the device that performed the guidance. */
  performer?: Reference;
  reasonCodeableConcept?: CodeableConcept;
  reasonReference?: Reference;
  /** The id of the request associated with this response. If an id was given as part of the request, it will be reproduced here to enable the requester to more easily identify the response in a multi-request scenario. */
  requestId?: id;
  /** The actions, if any, produced by the evaluation of the artifact. */
  result?: Reference;
  /** The status of the response. If the evaluation is completed successfully, the status will indicate success. However, in order to complete the evaluation, the engine may require more information. In this case, the status will be data-required, and the response will contain a description of the additional required information. If the evaluation completed successfully, but the engine determines that a potentially more accurate response could be provided if more data was available, the status will be data-requested, and the response will contain a description of the additional requested information. */
  status: GuidanceResponseStatus;
  /** The patient for which the request was processed. */
  subject?: Reference;
}
export interface GuidanceResponse extends _GuidanceResponse {
  constructor: { new (): GuidanceResponse };
}
export var GuidanceResponse: { new (): GuidanceResponse };

/** The status of a guidance responseIf the element is present, it must have either a @value, an @id, or extensions */
interface _GuidanceResponseStatus extends _Element {
  value?: GuidanceResponseStatusList;
}
export interface GuidanceResponseStatus extends _GuidanceResponseStatus {
  constructor: { new (): GuidanceResponseStatus };
}
export var GuidanceResponseStatus: { new (): GuidanceResponseStatus };

export type GuidanceResponseStatusList = 'success' | 'data-requested' | 'data-required' | 'in-progress' | 'failure' | 'entered-in-error';
interface _GuidanceResponseStatusList extends _codePrimitive {
  content: GuidanceResponseStatusList;
}

/** How a dependency is represented when the guide is published.If the element is present, it must have either a @value, an @id, or extensions */
interface _GuideDependencyType extends _Element {
  value?: GuideDependencyTypeList;
}
export interface GuideDependencyType extends _GuideDependencyType {
  constructor: { new (): GuideDependencyType };
}
export var GuideDependencyType: { new (): GuideDependencyType };

export type GuideDependencyTypeList = 'reference' | 'inclusion';
interface _GuideDependencyTypeList extends _codePrimitive {
  content: GuideDependencyTypeList;
}

/** The kind of an included page.If the element is present, it must have either a @value, an @id, or extensions */
interface _GuidePageKind extends _Element {
  value?: GuidePageKindList;
}
export interface GuidePageKind extends _GuidePageKind {
  constructor: { new (): GuidePageKind };
}
export var GuidePageKind: { new (): GuidePageKind };

export type GuidePageKindList = 'page' | 'example' | 'list' | 'include' | 'directory' | 'dictionary' | 'toc' | 'resource';
interface _GuidePageKindList extends _codePrimitive {
  content: GuidePageKindList;
}

/** The details of a healthcare service available at a location.If the element is present, it must have either a @value, an @id, or extensions */
interface _HealthcareService extends _DomainResource {
  /** Whether this healthcareservice record is in active use. */
  active?: boolean;
  /** Indicates whether or not a prospective consumer will require an appointment for a particular service at a site to be provided by the Organization. Indicates if an appointment is required for access to this service. */
  appointmentRequired?: boolean;
  /** A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times. */
  availabilityExceptions?: string;
  /** A collection of times that the Service Site is available. */
  availableTime?: HealthcareServiceAvailableTime[];
  /** Identifies the broad category of service being performed or delivered. */
  category?: CodeableConcept;
  /** Collection of characteristics (attributes). */
  characteristic?: CodeableConcept[];
  /** Any additional description of the service and/or any specific issues not covered by the other attributes, which can be displayed as further detail under the serviceName. */
  comment?: string;
  /** The location(s) that this service is available to (not where the service is provided). */
  coverageArea?: Reference[];
  /** Does this service have specific eligibility requirements that need to be met in order to use the service? */
  eligibility?: CodeableConcept;
  /** Describes the eligibility conditions for the service. */
  eligibilityNote?: string;
  /** Technical endpoints providing access to services operated for the specific healthcare services defined at this resource. */
  endpoint?: Reference[];
  /** Extra details about the service that can't be placed in the other fields. */
  extraDetails?: string;
  /** External identifiers for this item. */
  identifier?: Identifier[];
  /** The location(s) where this healthcare service may be provided. */
  location?: Reference[];
  /** Further description of the service as it would be presented to a consumer while searching. */
  name?: string;
  /** The HealthcareService is not available during this period of time due to the provided reason. */
  notAvailable?: HealthcareServiceNotAvailable[];
  /** If there is a photo/symbol associated with this HealthcareService, it may be included here to facilitate quick identification of the service in a list. */
  photo?: Attachment;
  /** Program Names that can be used to categorize the service. */
  programName?: string[];
  /** The organization that provides this healthcare service. */
  providedBy?: Reference;
  /** Ways that the service accepts referrals, if this is not provided then it is implied that no referral is required. */
  referralMethod?: CodeableConcept[];
  /** The code(s) that detail the conditions under which the healthcare service is available/offered. */
  serviceProvisionCode?: CodeableConcept[];
  /** Collection of specialties handled by the service site. This is more of a medical term. */
  specialty?: CodeableConcept[];
  /** List of contacts related to this specific healthcare service. */
  telecom?: ContactPoint[];
  /** The specific type of service that may be delivered or performed. */
  type?: CodeableConcept[];
}
export interface HealthcareService extends _HealthcareService {
  constructor: { new (): HealthcareService };
}
export var HealthcareService: { new (): HealthcareService };

/** The details of a healthcare service available at a location. */
interface _HealthcareServiceAvailableTime extends _BackboneElement {
  /** Is this always available? (hence times are irrelevant) e.g. 24 hour service. */
  allDay?: boolean;
  /** The closing time of day. Note: If the AllDay flag is set, then this time is ignored. */
  availableEndTime?: time;
  /** The opening time of day. Note: If the AllDay flag is set, then this time is ignored. */
  availableStartTime?: time;
  /** Indicates which days of the week are available between the start and end Times. */
  daysOfWeek?: DaysOfWeek[];
}
export interface HealthcareServiceAvailableTime extends _HealthcareServiceAvailableTime {
  constructor: { new (): HealthcareServiceAvailableTime };
}
export var HealthcareServiceAvailableTime: { new (): HealthcareServiceAvailableTime };

/** The details of a healthcare service available at a location. */
interface _HealthcareServiceNotAvailable extends _BackboneElement {
  /** The reason that can be presented to the user as to why this time is not available. */
  description: string;
  /** Service is not available (seasonally or for a public holiday) from this date. */
  during?: Period;
}
export interface HealthcareServiceNotAvailable extends _HealthcareServiceNotAvailable {
  constructor: { new (): HealthcareServiceNotAvailable };
}
export var HealthcareServiceNotAvailable: { new (): HealthcareServiceNotAvailable };

/** HTTP verbs (in the HTTP command line).If the element is present, it must have either a @value, an @id, or extensions */
interface _HTTPVerb extends _Element {
  value?: HTTPVerbList;
}
export interface HTTPVerb extends _HTTPVerb {
  constructor: { new (): HTTPVerb };
}
export var HTTPVerb: { new (): HTTPVerb };

export type HTTPVerbList = 'GET' | 'POST' | 'PUT' | 'DELETE';
interface _HTTPVerbList extends _codePrimitive {
  content: HTTPVerbList;
}

/** A human's name with the ability to identify parts and usage.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _HumanName extends _Element {
  /** The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father. */
  family?: string;
  /** Given name. */
  given?: string[];
  /** Indicates the period of time when this name was valid for the named person. */
  period?: Period;
  /** Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name. */
  prefix?: string[];
  /** Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name. */
  suffix?: string[];
  /** A full text representation of the name. */
  text?: string;
  /** Identifies the purpose for this name. */
  use?: NameUse;
}
export interface HumanName extends _HumanName {
  constructor: { new (): HumanName };
}
export var HumanName: { new (): HumanName };

/** Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.RFC 4122If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions */
interface _id extends _Element {
  value: string;
}
export interface id extends _id {
  constructor: { new (): id };
}
export var id: { new (): id };

/** A technical identifier - identifies some entity uniquely and unambiguously.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _Identifier extends _Element {
  /** Organization that issued/manages the identifier. */
  assigner?: Reference;
  /** Time period during which identifier is/was valid for use. */
  period?: Period;
  /** Establishes the namespace for the value - that is, a URL that describes a set values that are unique. */
  system?: uri;
  /** A coded type for the identifier that can be used to determine which identifier to use for a specific purpose. */
  type?: CodeableConcept;
  /** The purpose of this identifier. */
  use?: IdentifierUse;
  /** The portion of the identifier typically relevant to the user and which is unique within the context of the system. */
  value?: string;
}
export interface Identifier extends _Identifier {
  constructor: { new (): Identifier };
}
export var Identifier: { new (): Identifier };

/** Identifies the purpose for this identifier, if known .If the element is present, it must have either a @value, an @id, or extensions */
interface _IdentifierUse extends _Element {
  value?: IdentifierUseList;
}
export interface IdentifierUse extends _IdentifierUse {
  constructor: { new (): IdentifierUse };
}
export var IdentifierUse: { new (): IdentifierUse };

export type IdentifierUseList = 'usual' | 'official' | 'temp' | 'secondary';
interface _IdentifierUseList extends _codePrimitive {
  content: IdentifierUseList;
}

/** The level of confidence that this link represents the same actual person, based on NIST Authentication Levels.If the element is present, it must have either a @value, an @id, or extensions */
interface _IdentityAssuranceLevel extends _Element {
  value?: IdentityAssuranceLevelList;
}
export interface IdentityAssuranceLevel extends _IdentityAssuranceLevel {
  constructor: { new (): IdentityAssuranceLevel };
}
export var IdentityAssuranceLevel: { new (): IdentityAssuranceLevel };

export type IdentityAssuranceLevelList = 'level1' | 'level2' | 'level3' | 'level4';
interface _IdentityAssuranceLevelList extends _codePrimitive {
  content: IdentityAssuranceLevelList;
}

export type idPrimitive = string;
type _idPrimitive = Primitive._string;

/** A text description of the DICOM SOP instances selected in the ImagingManifest; or the reason for, or significance of, the selection.If the element is present, it must have either a @value, an @id, or extensions */
interface _ImagingManifest extends _DomainResource {
  /** Author of ImagingManifest. It can be a human author or a device which made the decision of the SOP instances selected. For example, a radiologist selected a set of imaging SOP instances to attach in a diagnostic report, and a CAD application may author a selection to describe SOP instances it used to generate a detection conclusion. */
  author?: Reference;
  /** Date and time when the selection of the referenced instances were made. It is (typically) different from the creation date of the selection resource, and from dates associated with the referenced instances (e.g. capture time of the referenced image). */
  authoringTime?: dateTime;
  /** Free text narrative description of the ImagingManifest.
   * The value may be derived from the DICOM Standard Part 16, CID-7010 descriptions (e.g. Best in Set, Complete Study Content). Note that those values cover the wide range of uses of the DICOM Key Object Selection object, several of which are not supported by ImagingManifest. Specifically, there is no expected behavior associated with descriptions that suggest referenced images be removed or not used. */
  description?: string;
  /** Unique identifier of the DICOM Key Object Selection (KOS) that this resource represents. */
  identifier?: Identifier;
  /** A patient resource reference which is the patient subject of all DICOM SOP Instances in this ImagingManifest. */
  patient: Reference;
  /** Study identity and locating information of the DICOM SOP instances in the selection. */
  study: ImagingManifestStudy[];
}
export interface ImagingManifest extends _ImagingManifest {
  constructor: { new (): ImagingManifest };
}
export var ImagingManifest: { new (): ImagingManifest };

/** A text description of the DICOM SOP instances selected in the ImagingManifest; or the reason for, or significance of, the selection. */
interface _ImagingManifestInstance extends _BackboneElement {
  /** SOP class UID of the selected instance. */
  sopClass: oid;
  /** SOP Instance UID of the selected instance. */
  uid: oid;
}
export interface ImagingManifestInstance extends _ImagingManifestInstance {
  constructor: { new (): ImagingManifestInstance };
}
export var ImagingManifestInstance: { new (): ImagingManifestInstance };

/** A text description of the DICOM SOP instances selected in the ImagingManifest; or the reason for, or significance of, the selection. */
interface _ImagingManifestSeries extends _BackboneElement {
  /** The network service providing access (e.g., query, view, or retrieval) for this series. See implementation notes for information about using DICOM endpoints. A series-level endpoint, if present, has precedence over a study-level endpoint with the same Endpoint.type. */
  endpoint?: Reference[];
  /** Identity and locating information of the selected DICOM SOP instances. */
  instance: ImagingManifestInstance[];
  /** Series instance UID of the SOP instances in the selection. */
  uid: oid;
}
export interface ImagingManifestSeries extends _ImagingManifestSeries {
  constructor: { new (): ImagingManifestSeries };
}
export var ImagingManifestSeries: { new (): ImagingManifestSeries };

/** A text description of the DICOM SOP instances selected in the ImagingManifest; or the reason for, or significance of, the selection. */
interface _ImagingManifestStudy extends _BackboneElement {
  /** The network service providing access (e.g., query, view, or retrieval) for the study. See implementation notes for information about using DICOM endpoints. A study-level endpoint applies to each series in the study, unless overridden by a series-level endpoint with the same Endpoint.type. */
  endpoint?: Reference[];
  /** Reference to the Imaging Study in FHIR form. */
  imagingStudy?: Reference;
  /** Series identity and locating information of the DICOM SOP instances in the selection. */
  series: ImagingManifestSeries[];
  /** Study instance UID of the SOP instances in the selection. */
  uid: oid;
}
export interface ImagingManifestStudy extends _ImagingManifestStudy {
  constructor: { new (): ImagingManifestStudy };
}
export var ImagingManifestStudy: { new (): ImagingManifestStudy };

/** Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.If the element is present, it must have either a @value, an @id, or extensions */
interface _ImagingStudy extends _DomainResource {
  /** Accession Number is an identifier related to some aspect of imaging workflow and data management. Usage may vary across different institutions.  See for instance [IHE Radiology Technical Framework Volume 1 Appendix A](http://www.ihe.net/uploadedFiles/Documents/Radiology/IHE_RAD_TF_Rev13.0_Vol1_FT_2014-07-30.pdf). */
  accession?: Identifier;
  /** Availability of study (online, offline, or nearline). */
  availability?: InstanceAvailability;
  /** A list of the diagnostic requests that resulted in this imaging study being performed. */
  basedOn?: Reference[];
  /** The encounter or episode at which the request is initiated. */
  context?: Reference;
  /** Institution-generated description or classification of the Study performed. */
  description?: string;
  /** The network service providing access (e.g., query, view, or retrieval) for the study. See implementation notes for information about using DICOM endpoints. A study-level endpoint applies to each series in the study, unless overridden by a series-level endpoint with the same Endpoint.type. */
  endpoint?: Reference[];
  /** Other identifiers for the study. */
  identifier?: Identifier[];
  /** Who read the study and interpreted the images or other content. */
  interpreter?: Reference[];
  /** A list of all the Series.ImageModality values that are actual acquisition modalities, i.e. those in the DICOM Context Group 29 (value set OID 1.2.840.10008.6.1.19). */
  modalityList?: Coding[];
  /** Number of SOP Instances in Study. This value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present. */
  numberOfInstances?: unsignedInt;
  /** Number of Series in the Study. This value given may be larger than the number of series elements this Resource contains due to resource availability, security, or other factors. This element should be present if any series elements are present. */
  numberOfSeries?: unsignedInt;
  /** The patient imaged in the study. */
  patient: Reference;
  /** The code for the performed procedure type. */
  procedureCode?: CodeableConcept[];
  /** A reference to the performed Procedure. */
  procedureReference?: Reference[];
  /** Description of clinical condition indicating why the ImagingStudy was requested. */
  reason?: CodeableConcept;
  /** The requesting/referring physician. */
  referrer?: Reference;
  /** Each study has one or more series of images or other content. */
  series?: ImagingStudySeries[];
  /** Date and time the study started. */
  started?: dateTime;
  /** Formal identifier for the study. */
  uid: oid;
}
export interface ImagingStudy extends _ImagingStudy {
  constructor: { new (): ImagingStudy };
}
export var ImagingStudy: { new (): ImagingStudy };

/** Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities. */
interface _ImagingStudyInstance extends _BackboneElement {
  /** The number of instance in the series. */
  number?: unsignedInt;
  /** DICOM instance  type. */
  sopClass: oid;
  /** The description of the instance. */
  title?: string;
  /** Formal identifier for this image or other content. */
  uid: oid;
}
export interface ImagingStudyInstance extends _ImagingStudyInstance {
  constructor: { new (): ImagingStudyInstance };
}
export var ImagingStudyInstance: { new (): ImagingStudyInstance };

/** Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities. */
interface _ImagingStudySeries extends _BackboneElement {
  /** Availability of series (online, offline or nearline). */
  availability?: InstanceAvailability;
  /** The anatomic structures examined. See DICOM Part 16 Annex L (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for DICOM to SNOMED-CT mappings. The bodySite may indicate the laterality of body part imaged; if so, it shall be consistent with any content of ImagingStudy.series.laterality. */
  bodySite?: Coding;
  /** A description of the series. */
  description?: string;
  /** The network service providing access (e.g., query, view, or retrieval) for this series. See implementation notes for information about using DICOM endpoints. A series-level endpoint, if present, has precedence over a study-level endpoint with the same Endpoint.type. */
  endpoint?: Reference[];
  /** A single SOP instance within the series, e.g. an image, or presentation state. */
  instance?: ImagingStudyInstance[];
  /** The laterality of the (possibly paired) anatomic structures examined. E.g., the left knee, both lungs, or unpaired abdomen. If present, shall be consistent with any laterality information indicated in ImagingStudy.series.bodySite. */
  laterality?: Coding;
  /** The modality of this series sequence. */
  modality: Coding;
  /** The numeric identifier of this series in the study. */
  number?: unsignedInt;
  /** Number of SOP Instances in the Study. The value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present. */
  numberOfInstances?: unsignedInt;
  /** The physician or operator (often the radiology technician)  who performed the series. The performer is recorded at the series level, since each series in a study may be performed by a different practitioner, at different times, and using different devices. A series may be performed by multiple practitioners. */
  performer?: Reference[];
  /** The date and time the series was started. */
  started?: dateTime;
  /** Formal identifier for this series. */
  uid: oid;
}
export interface ImagingStudySeries extends _ImagingStudySeries {
  constructor: { new (): ImagingStudySeries };
}
export var ImagingStudySeries: { new (): ImagingStudySeries };

/** Describes the event of a patient being administered a vaccination or a record of a vaccination as reported by a patient, a clinician or another party and may include vaccine reaction information and what vaccination protocol was followed.If the element is present, it must have either a @value, an @id, or extensions */
interface _Immunization extends _DomainResource {
  /** Date vaccine administered or was to be administered. */
  date?: dateTime;
  /** The quantity of vaccine product that was administered. */
  doseQuantity?: Quantity;
  /** The visit or admission or other contact between patient and health care provider the immunization was performed as part of. */
  encounter?: Reference;
  /** Date vaccine batch expires. */
  expirationDate?: date;
  /** Reasons why a vaccine was or was not administered. */
  explanation?: ImmunizationExplanation;
  /** A unique identifier assigned to this immunization record. */
  identifier?: Identifier[];
  /** The service delivery location where the vaccine administration occurred. */
  location?: Reference;
  /** Lot number of the  vaccine product. */
  lotNumber?: string;
  /** Name of vaccine manufacturer. */
  manufacturer?: Reference;
  /** Extra information about the immunization that is not conveyed by the other attributes. */
  note?: Annotation[];
  /** Indicates if the vaccination was or was not given. */
  notGiven: boolean;
  /** The patient who either received or did not receive the immunization. */
  patient: Reference;
  /** Indicates who or what performed the event. */
  practitioner?: ImmunizationPractitioner[];
  /** An indication that the content of the record is based on information from the person who administered the vaccine. This reflects the context under which the data was originally recorded. */
  primarySource: boolean;
  /** Categorical data indicating that an adverse event is associated in time to an immunization. */
  reaction?: ImmunizationReaction[];
  /** The source of the data when the report of the immunization event is not based on information from the person who administered the vaccine. */
  reportOrigin?: CodeableConcept;
  /** The path by which the vaccine product is taken into the body. */
  route?: CodeableConcept;
  /** Body site where vaccine was administered. */
  site?: CodeableConcept;
  /** Indicates the current status of the vaccination event. */
  status: ImmunizationStatusCodes;
  /** Contains information about the protocol(s) under which the vaccine was administered. */
  vaccinationProtocol?: ImmunizationVaccinationProtocol[];
  /** Vaccine that was administered or was to be administered. */
  vaccineCode: CodeableConcept;
}
export interface Immunization extends _Immunization {
  constructor: { new (): Immunization };
}
export var Immunization: { new (): Immunization };

/** Describes the event of a patient being administered a vaccination or a record of a vaccination as reported by a patient, a clinician or another party and may include vaccine reaction information and what vaccination protocol was followed. */
interface _ImmunizationExplanation extends _BackboneElement {
  /** Reasons why a vaccine was administered. */
  reason?: CodeableConcept[];
  /** Reason why a vaccine was not administered. */
  reasonNotGiven?: CodeableConcept[];
}
export interface ImmunizationExplanation extends _ImmunizationExplanation {
  constructor: { new (): ImmunizationExplanation };
}
export var ImmunizationExplanation: { new (): ImmunizationExplanation };

/** Describes the event of a patient being administered a vaccination or a record of a vaccination as reported by a patient, a clinician or another party and may include vaccine reaction information and what vaccination protocol was followed. */
interface _ImmunizationPractitioner extends _BackboneElement {
  /** The device, practitioner, etc. who performed the action. */
  actor: Reference;
  /** Describes the type of performance (e.g. ordering provider, administering provider, etc.). */
  role?: CodeableConcept;
}
export interface ImmunizationPractitioner extends _ImmunizationPractitioner {
  constructor: { new (): ImmunizationPractitioner };
}
export var ImmunizationPractitioner: { new (): ImmunizationPractitioner };

/** Describes the event of a patient being administered a vaccination or a record of a vaccination as reported by a patient, a clinician or another party and may include vaccine reaction information and what vaccination protocol was followed. */
interface _ImmunizationReaction extends _BackboneElement {
  /** Date of reaction to the immunization. */
  date?: dateTime;
  /** Details of the reaction. */
  detail?: Reference;
  /** Self-reported indicator. */
  reported?: boolean;
}
export interface ImmunizationReaction extends _ImmunizationReaction {
  constructor: { new (): ImmunizationReaction };
}
export var ImmunizationReaction: { new (): ImmunizationReaction };

/** A patient's point-in-time immunization and recommendation (i.e. forecasting a patient's immunization eligibility according to a published schedule) with optional supporting justification.If the element is present, it must have either a @value, an @id, or extensions */
interface _ImmunizationRecommendation extends _DomainResource {
  /** A unique identifier assigned to this particular recommendation record. */
  identifier?: Identifier[];
  /** The patient the recommendations are for. */
  patient: Reference;
  /** Vaccine administration recommendations. */
  recommendation: ImmunizationRecommendationRecommendation[];
}
export interface ImmunizationRecommendation extends _ImmunizationRecommendation {
  constructor: { new (): ImmunizationRecommendation };
}
export var ImmunizationRecommendation: { new (): ImmunizationRecommendation };

/** A patient's point-in-time immunization and recommendation (i.e. forecasting a patient's immunization eligibility according to a published schedule) with optional supporting justification. */
interface _ImmunizationRecommendationDateCriterion extends _BackboneElement {
  /** Date classification of recommendation.  For example, earliest date to give, latest date to give, etc. */
  code: CodeableConcept;
  /** The date whose meaning is specified by dateCriterion.code. */
  value: dateTime;
}
export interface ImmunizationRecommendationDateCriterion extends _ImmunizationRecommendationDateCriterion {
  constructor: { new (): ImmunizationRecommendationDateCriterion };
}
export var ImmunizationRecommendationDateCriterion: { new (): ImmunizationRecommendationDateCriterion };

/** A patient's point-in-time immunization and recommendation (i.e. forecasting a patient's immunization eligibility according to a published schedule) with optional supporting justification. */
interface _ImmunizationRecommendationProtocol extends _BackboneElement {
  /** Indicates the authority who published the protocol.  For example, ACIP. */
  authority?: Reference;
  /** Contains the description about the protocol under which the vaccine was administered. */
  description?: string;
  /** Indicates the nominal position in a series of the next dose.  This is the recommended dose number as per a specified protocol. */
  doseSequence?: positiveInt;
  /** One possible path to achieve presumed immunity against a disease - within the context of an authority. */
  series?: string;
}
export interface ImmunizationRecommendationProtocol extends _ImmunizationRecommendationProtocol {
  constructor: { new (): ImmunizationRecommendationProtocol };
}
export var ImmunizationRecommendationProtocol: { new (): ImmunizationRecommendationProtocol };

/** A patient's point-in-time immunization and recommendation (i.e. forecasting a patient's immunization eligibility according to a published schedule) with optional supporting justification. */
interface _ImmunizationRecommendationRecommendation extends _BackboneElement {
  /** The date the immunization recommendation was created. */
  date: dateTime;
  /** Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc. */
  dateCriterion?: ImmunizationRecommendationDateCriterion[];
  /** The next recommended dose number (e.g. dose 2 is the next recommended dose). */
  doseNumber?: positiveInt;
  /** Vaccine administration status. */
  forecastStatus: CodeableConcept;
  /** Contains information about the protocol under which the vaccine was administered. */
  protocol?: ImmunizationRecommendationProtocol;
  /** Immunization event history that supports the status and recommendation. */
  supportingImmunization?: Reference[];
  /** Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information. */
  supportingPatientInformation?: Reference[];
  /** The targeted disease for the recommendation. */
  targetDisease?: CodeableConcept;
  /** Vaccine that pertains to the recommendation. */
  vaccineCode?: CodeableConcept;
}
export interface ImmunizationRecommendationRecommendation extends _ImmunizationRecommendationRecommendation {
  constructor: { new (): ImmunizationRecommendationRecommendation };
}
export var ImmunizationRecommendationRecommendation: { new (): ImmunizationRecommendationRecommendation };

/** A set of codes indicating the current status of an ImmunizationIf the element is present, it must have either a @value, an @id, or extensions */
interface _ImmunizationStatusCodes extends _Element {
  value?: ImmunizationStatusCodesList;
}
export interface ImmunizationStatusCodes extends _ImmunizationStatusCodes {
  constructor: { new (): ImmunizationStatusCodes };
}
export var ImmunizationStatusCodes: { new (): ImmunizationStatusCodes };

export type ImmunizationStatusCodesList = 'completed' | 'entered-in-error';
interface _ImmunizationStatusCodesList extends _codePrimitive {
  content: ImmunizationStatusCodesList;
}

/** Describes the event of a patient being administered a vaccination or a record of a vaccination as reported by a patient, a clinician or another party and may include vaccine reaction information and what vaccination protocol was followed. */
interface _ImmunizationVaccinationProtocol extends _BackboneElement {
  /** Indicates the authority who published the protocol.  E.g. ACIP. */
  authority?: Reference;
  /** Contains the description about the protocol under which the vaccine was administered. */
  description?: string;
  /** Nominal position in a series. */
  doseSequence?: positiveInt;
  /** Indicates if the immunization event should "count" against  the protocol. */
  doseStatus: CodeableConcept;
  /** Provides an explanation as to why an immunization event should or should not count against the protocol. */
  doseStatusReason?: CodeableConcept;
  /** One possible path to achieve presumed immunity against a disease - within the context of an authority. */
  series?: string;
  /** The recommended number of doses to achieve immunity. */
  seriesDoses?: positiveInt;
  /** The targeted disease. */
  targetDisease: CodeableConcept[];
}
export interface ImmunizationVaccinationProtocol extends _ImmunizationVaccinationProtocol {
  constructor: { new (): ImmunizationVaccinationProtocol };
}
export var ImmunizationVaccinationProtocol: { new (): ImmunizationVaccinationProtocol };

/** A set of rules of how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.If the element is present, it must have either a @value, an @id, or extensions */
interface _ImplementationGuide extends _DomainResource {
  /** A binary file that is included in the  implementation guide when it is published. */
  binary?: uri[];
  /** Contact details to assist a user in finding and communicating with the publisher. */
  contact?: ContactDetail[];
  /** A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the implementation guide. */
  copyright?: markdown;
  /** The date  (and optionally time) when the implementation guide was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes. */
  date?: dateTime;
  /** Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides. */
  dependency?: ImplementationGuideDependency[];
  /** A free text natural language description of the implementation guide from a consumer's perspective. */
  description?: markdown;
  /** A boolean value to indicate that this implementation guide is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage. */
  experimental?: boolean;
  /** The version of the FHIR specification on which this ImplementationGuide is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 3.0.1 for this version. */
  fhirVersion?: id;
  /** A set of profiles that all resources covered by this implementation guide must conform to. */
  global?: ImplementationGuideGlobal[];
  /** A legal or geographic region in which the implementation guide is intended to be used. */
  jurisdiction?: CodeableConcept[];
  /** A natural language name identifying the implementation guide. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
  name: string;
  /** A logical group of resources. Logical groups can be used when building pages. */
  package?: ImplementationGuidePackage[];
  /** A page / section in the implementation guide. The root page is the implementation guide home page. */
  page?: ImplementationGuidePage;
  /** The name of the individual or organization that published the implementation guide. */
  publisher?: string;
  /** The status of this implementation guide. Enables tracking the life-cycle of the content. */
  status: PublicationStatus;
  /** An absolute URI that is used to identify this implementation guide when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this implementation guide is (or will be) published. The URL SHOULD include the major version of the implementation guide. For more information see [Technical and Business Versions](resource.html#versions). */
  url: uri;
  /** The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate implementation guide instances. */
  useContext?: UsageContext[];
  /** The identifier that is used to identify this version of the implementation guide when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the implementation guide author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
  version?: string;
}
export interface ImplementationGuide extends _ImplementationGuide {
  constructor: { new (): ImplementationGuide };
}
export var ImplementationGuide: { new (): ImplementationGuide };

/** A set of rules of how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts. */
interface _ImplementationGuideDependency extends _BackboneElement {
  /** How the dependency is represented when the guide is published. */
  type: GuideDependencyType;
  /** Where the dependency is located. */
  uri: uri;
}
export interface ImplementationGuideDependency extends _ImplementationGuideDependency {
  constructor: { new (): ImplementationGuideDependency };
}
export var ImplementationGuideDependency: { new (): ImplementationGuideDependency };

/** A set of rules of how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts. */
interface _ImplementationGuideGlobal extends _BackboneElement {
  /** A reference to the profile that all instances must conform to. */
  profile: Reference;
  /** The type of resource that all instances must conform to. */
  type: ResourceType;
}
export interface ImplementationGuideGlobal extends _ImplementationGuideGlobal {
  constructor: { new (): ImplementationGuideGlobal };
}
export var ImplementationGuideGlobal: { new (): ImplementationGuideGlobal };

/** A set of rules of how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts. */
interface _ImplementationGuidePackage extends _BackboneElement {
  /** Human readable text describing the package. */
  description?: string;
  /** The name for the group, as used in page.package. */
  name: string;
  /** A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource. */
  resource: ImplementationGuideResource[];
}
export interface ImplementationGuidePackage extends _ImplementationGuidePackage {
  constructor: { new (): ImplementationGuidePackage };
}
export var ImplementationGuidePackage: { new (): ImplementationGuidePackage };

/** A set of rules of how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts. */
interface _ImplementationGuidePage extends _BackboneElement {
  /** The format of the page. */
  format?: code;
  /** The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest. */
  kind: GuidePageKind;
  /** For constructed pages, a list of packages to include in the page (or else empty for everything). */
  package?: string[];
  /** Nested Pages/Sections under this page. */
  page?: ImplementationGuidePage[];
  /** The source address for the page. */
  source: uri;
  /** A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc. */
  title: string;
  /** For constructed pages, what kind of resources to include in the list. */
  type?: ResourceType[];
}
export interface ImplementationGuidePage extends _ImplementationGuidePage {
  constructor: { new (): ImplementationGuidePage };
}
export var ImplementationGuidePage: { new (): ImplementationGuidePage };

/** A set of rules of how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts. */
interface _ImplementationGuideResource extends _BackboneElement {
  /** A short code that may be used to identify the resource throughout the implementation guide. */
  acronym?: string;
  /** A description of the reason that a resource has been included in the implementation guide. */
  description?: string;
  /** Whether a resource is included in the guide as part of the rules defined by the guide, or just as an example of a resource that conforms to the rules and/or help implementers understand the intent of the guide. */
  example: boolean;
  /** Another resource that this resource is an example for. This is mostly used for resources that are included as examples of StructureDefinitions. */
  exampleFor?: Reference;
  /** A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name). */
  name?: string;
  sourceReference: Reference;
  sourceUri: uri;
}
export interface ImplementationGuideResource extends _ImplementationGuideResource {
  constructor: { new (): ImplementationGuideResource };
}
export var ImplementationGuideResource: { new (): ImplementationGuideResource };

/** Availability of the resourceIf the element is present, it must have either a @value, an @id, or extensions */
interface _InstanceAvailability extends _Element {
  value?: InstanceAvailabilityList;
}
export interface InstanceAvailability extends _InstanceAvailability {
  constructor: { new (): InstanceAvailability };
}
export var InstanceAvailability: { new (): InstanceAvailability };

export type InstanceAvailabilityList = 'ONLINE' | 'OFFLINE' | 'NEARLINE' | 'UNAVAILABLE';
interface _InstanceAvailabilityList extends _codePrimitive {
  content: InstanceAvailabilityList;
}

/** An instant in time - known at least to the secondNote: This is intended for precisely observed times, typically system logs etc., and not human-reported times - for them, see date and dateTime below. Time zone is always requiredIf the element is present, it must have either a @value, an @id, or extensions */
interface _instant extends _Element {
  value?: Date;
}
export interface instant extends _instant {
  constructor: { new (): instant };
}
export var instant: { new (): instant };

export type instantPrimitive = Date;
type _instantPrimitive = Primitive._Date;

/** A whole number32 bit number; for values larger than this, use decimalIf the element is present, it must have either a @value, an @id, or extensions */
interface _integer extends _Element {
  value?: number;
}
export interface integer extends _integer {
  constructor: { new (): integer };
}
export var integer: { new (): integer };

export type integerPrimitive = number;
type _integerPrimitive = Primitive._number;

/** How the issue affects the success of the action.If the element is present, it must have either a @value, an @id, or extensions */
interface _IssueSeverity extends _Element {
  value?: IssueSeverityList;
}
export interface IssueSeverity extends _IssueSeverity {
  constructor: { new (): IssueSeverity };
}
export var IssueSeverity: { new (): IssueSeverity };

export type IssueSeverityList = 'fatal' | 'error' | 'warning' | 'information';
interface _IssueSeverityList extends _codePrimitive {
  content: IssueSeverityList;
}

/** A code that describes the type of issue.If the element is present, it must have either a @value, an @id, or extensions */
interface _IssueType extends _Element {
  value?: IssueTypeList;
}
export interface IssueType extends _IssueType {
  constructor: { new (): IssueType };
}
export var IssueType: { new (): IssueType };

export type IssueTypeList =
  | 'invalid'
  | 'structure'
  | 'required'
  | 'value'
  | 'invariant'
  | 'security'
  | 'login'
  | 'unknown'
  | 'expired'
  | 'forbidden'
  | 'suppressed'
  | 'processing'
  | 'not-supported'
  | 'duplicate'
  | 'not-found'
  | 'too-long'
  | 'code-invalid'
  | 'extension'
  | 'too-costly'
  | 'business-rule'
  | 'conflict'
  | 'incomplete'
  | 'transient'
  | 'lock-error'
  | 'no-store'
  | 'exception'
  | 'timeout'
  | 'throttled'
  | 'informational';
interface _IssueTypeList extends _codePrimitive {
  content: IssueTypeList;
}

/** The Library resource is a general-purpose container for knowledge asset definitions. It can be used to describe and expose existing knowledge assets such as logic libraries and information model descriptions, as well as to describe a collection of knowledge assets.If the element is present, it must have either a @value, an @id, or extensions */
interface _Library extends _DomainResource {
  /** The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
  approvalDate?: date;
  /** Contact details to assist a user in finding and communicating with the publisher. */
  contact?: ContactDetail[];
  /** The content of the library as an Attachment. The content may be a reference to a url, or may be directly embedded as a base-64 string. Either way, the contentType of the attachment determines how to interpret the content. */
  content?: Attachment[];
  /** A contributor to the content of the library, including authors, editors, reviewers, and endorsers. */
  contributor?: Contributor[];
  /** A copyright statement relating to the library and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the library. */
  copyright?: markdown;
  /** Describes a set of data that must be provided in order to be able to successfully perform the computations defined by the library. */
  dataRequirement?: DataRequirement[];
  /** The date  (and optionally time) when the library was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the library changes. */
  date?: dateTime;
  /** A free text natural language description of the library from a consumer's perspective. */
  description?: markdown;
  /** The period during which the library content was or is planned to be in active use. */
  effectivePeriod?: Period;
  /** A boolean value to indicate that this library is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage. */
  experimental?: boolean;
  /** A formal identifier that is used to identify this library when it is represented in other formats, or referenced in a specification, model, design or an instance. e.g. CMS or NQF identifiers for a measure artifact. Note that at least one identifier is required for non-experimental active artifacts. */
  identifier?: Identifier[];
  /** A legal or geographic region in which the library is intended to be used. */
  jurisdiction?: CodeableConcept[];
  /** The date on which the resource content was last reviewed. Review happens periodically after approval, but doesn't change the original approval date. */
  lastReviewDate?: date;
  /** A natural language name identifying the library. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
  name?: string;
  /** The parameter element defines parameters used by the library. */
  parameter?: ParameterDefinition[];
  /** The name of the individual or organization that published the library. */
  publisher?: string;
  /** Explaination of why this library is needed and why it has been designed as it has. */
  purpose?: markdown;
  /** Related artifacts such as additional documentation, justification, or bibliographic references. */
  relatedArtifact?: RelatedArtifact[];
  /** The status of this library. Enables tracking the life-cycle of the content. */
  status: PublicationStatus;
  /** A short, descriptive, user-friendly title for the library. */
  title?: string;
  /** Descriptive topics related to the content of the library. Topics provide a high-level categorization of the library that can be useful for filtering and searching. */
  topic?: CodeableConcept[];
  /** Identifies the type of library such as a Logic Library, Model Definition, Asset Collection, or Module Definition. */
  type: CodeableConcept;
  /** An absolute URI that is used to identify this library when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this library is (or will be) published. The URL SHOULD include the major version of the library. For more information see [Technical and Business Versions](resource.html#versions). */
  url?: uri;
  /** A detailed description of how the library is used from a clinical perspective. */
  usage?: string;
  /** The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate library instances. */
  useContext?: UsageContext[];
  /** The identifier that is used to identify this version of the library when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the library author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts. */
  version?: string;
}
export interface Library extends _Library {
  constructor: { new (): Library };
}
export var Library: { new (): Library };

/** Identifies two or more records (resource instances) that are referring to the same real-world "occurrence".If the element is present, it must have either a @value, an @id, or extensions */
interface _Linkage extends _DomainResource {
  /** Indicates whether the asserted set of linkages are considered to be "in effect". */
  active?: boolean;
  /** Identifies the user or organization responsible for asserting the linkages and who establishes the context for evaluating the nature of each linkage. */
  author?: Reference;
  /** Identifies one of the records that is considered to refer to the same real-world occurrence as well as how the items hould be evaluated within the collection of linked items. */
  item: LinkageItem[];
}
export interface Linkage extends _Linkage {
  constructor: { new (): Linkage };
}
export var Linkage: { new (): Linkage };

/** Identifies two or more records (resource instances) that are referring to the same real-world "occurrence". */
interface _LinkageItem extends _BackboneElement {
  /** The resource instance being linked as part of the group. */
  resource: Reference;
  /** Distinguishes which item is "source of truth" (if any) and which items are no longer considered to be current representations. */
  type: LinkageType;
}
export interface LinkageItem extends _LinkageItem {
  constructor: { new (): LinkageItem };
}
export var LinkageItem: { new (): LinkageItem };

/** Used to distinguish different roles a resource can play within a set of linked resourcesIf the element is present, it must have either a @value, an @id, or extensions */
interface _LinkageType extends _Element {
  value?: LinkageTypeList;
}
export interface LinkageType extends _LinkageType {
  constructor: { new (): LinkageType };
}
export var LinkageType: { new (): LinkageType };

export type LinkageTypeList = 'source' | 'alternate' | 'historical';
interface _LinkageTypeList extends _codePrimitive {
  content: LinkageTypeList;
}

/** The type of link between this patient resource and another patient resource.If the element is present, it must have either a @value, an @id, or extensions */
interface _LinkType extends _Element {
  value?: LinkTypeList;
}
export interface LinkType extends _LinkType {
  constructor: { new (): LinkType };
}
export var LinkType: { new (): LinkType };

export type LinkTypeList = 'replaced-by' | 'replaces' | 'refer' | 'seealso';
interface _LinkTypeList extends _codePrimitive {
  content: LinkTypeList;
}

/** A set of information summarized from a list of other resources.If the element is present, it must have either a @value, an @id, or extensions */
interface _List extends _DomainResource {
  /** This code defines the purpose of the list - why it was created. */
  code?: CodeableConcept;
  /** The date that the list was prepared. */
  date?: dateTime;
  /** If the list is empty, why the list is empty. */
  emptyReason?: CodeableConcept;
  /** The encounter that is the context in which this list was created. */
  encounter?: Reference;
  /** Entries in this list. */
  entry?: ListEntry[];
  /** Identifier for the List assigned for business purposes outside the context of FHIR. */
  identifier?: Identifier[];
  /** How this list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted. */
  mode: ListMode;
  /** Comments that apply to the overall list. */
  note?: Annotation[];
  /** What order applies to the items in the list. */
  orderedBy?: CodeableConcept;
  /** The entity responsible for deciding what the contents of the list were. Where the list was created by a human, this is the same as the author of the list. */
  source?: Reference;
  /** Indicates the current state of this list. */
  status: ListStatus;
  /** The common subject (or patient) of the resources that are in the list, if there is one. */
  subject?: Reference;
  /** A label for the list assigned by the author. */
  title?: string;
}
export interface List extends _List {
  constructor: { new (): List };
}
export var List: { new (): List };

/** A set of information summarized from a list of other resources. */
interface _ListEntry extends _BackboneElement {
  /** When this item was added to the list. */
  date?: dateTime;
  /** True if this item is marked as deleted in the list. */
  deleted?: boolean;
  /** The flag allows the system constructing the list to indicate the role and significance of the item in the list. */
  flag?: CodeableConcept;
  /** A reference to the actual resource from which data was derived. */
  item: Reference;
}
export interface ListEntry extends _ListEntry {
  constructor: { new (): ListEntry };
}
export var ListEntry: { new (): ListEntry };

/** The processing mode that applies to this section.If the element is present, it must have either a @value, an @id, or extensions */
interface _ListMode extends _Element {
  value?: ListModeList;
}
export interface ListMode extends _ListMode {
  constructor: { new (): ListMode };
}
export var ListMode: { new (): ListMode };

export type ListModeList = 'working' | 'snapshot' | 'changes';
interface _ListModeList extends _codePrimitive {
  content: ListModeList;
}

/** The current state of the listIf the element is present, it must have either a @value, an @id, or extensions */
interface _ListStatus extends _Element {
  value?: ListStatusList;
}
export interface ListStatus extends _ListStatus {
  constructor: { new (): ListStatus };
}
export var ListStatus: { new (): ListStatus };

export type ListStatusList = 'current' | 'retired' | 'entered-in-error';
interface _ListStatusList extends _codePrimitive {
  content: ListStatusList;
}

/** Details and position information for a physical place where services are provided  and resources and participants may be stored, found, contained or accommodated.If the element is present, it must have either a @value, an @id, or extensions */
interface _Location extends _DomainResource {
  /** Physical location. */
  address?: Address;
  /** A list of alternate names that the location is known as, or was known as in the past. */
  alias?: string[];
  /** Description of the Location, which helps in finding or referencing the place. */
  description?: string;
  /** Technical endpoints providing access to services operated for the location. */
  endpoint?: Reference[];
  /** Unique code or number identifying the location to its users. */
  identifier?: Identifier[];
  /** The organization responsible for the provisioning and upkeep of the location. */
  managingOrganization?: Reference;
  /** Indicates whether a resource instance represents a specific location or a class of locations. */
  mode?: LocationMode;
  /** Name of the location as used by humans. Does not need to be unique. */
  name?: string;
  /** The Operational status covers operation values most relevant to beds (but can also apply to rooms/units/chair/etc such as an isolation unit/dialisys chair). This typically covers concepts such as contamination, housekeeping and other activities like maintenance. */
  operationalStatus?: Coding;
  /** Another Location which this Location is physically part of. */
  partOf?: Reference;
  /** Physical form of the location, e.g. building, room, vehicle, road. */
  physicalType?: CodeableConcept;
  /** The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML). */
  position?: LocationPosition;
  /** The status property covers the general availability of the resource, not the current value which may be covered by the operationStatus, or by a schedule/slots if they are configured for the location. */
  status?: LocationStatus;
  /** The contact details of communication devices available at the location. This can include phone numbers, fax numbers, mobile numbers, email addresses and web sites. */
  telecom?: ContactPoint[];
  /** Indicates the type of function performed at the location. */
  type?: CodeableConcept;
}
export interface Location extends _Location {
  constructor: { new (): Location };
}
export var Location: { new (): Location };

/** Indicates whether a resource instance represents a specific location or a class of locations.If the element is present, it must have either a @value, an @id, or extensions */
interface _LocationMode extends _Element {
  value?: LocationModeList;
}
export interface LocationMode extends _LocationMode {
  constructor: { new (): LocationMode };
}
export var LocationMode: { new (): LocationMode };

export type LocationModeList = 'instance' | 'kind';
interface _LocationModeList extends _codePrimitive {
  content: LocationModeList;
}

/** Details and position information for a physical place where services are provided  and resources and participants may be stored, found, contained or accommodated. */
interface _LocationPosition extends _BackboneElement {
  /** Altitude. The value domain and the interpretation are the same as for the text of the altitude element in KML (see notes below). */
  altitude?: decimal;
  /** Latitude. The value domain and the interpretation are the same as for the text of the latitude element in KML (see notes below). */
  latitude: decimal;
  /** Longitude. The value domain and the interpretation are the same as for the text of the longitude element in KML (see notes below). */
  longitude: decimal;
}
export interface LocationPosition extends _LocationPosition {
  constructor: { new (): LocationPosition };
}
export var LocationPosition: { new (): LocationPosition };

/** Indicates whether the location is still in use.If the element is present, it must have either a @value, an @id, or extensions */
interface _LocationStatus extends _Element {
  value?: LocationStatusList;
}
export interface LocationStatus extends _LocationStatus {
  constructor: { new (): LocationStatus };
}
export var LocationStatus: { new (): LocationStatus };

export type LocationStatusList = 'active' | 'suspended' | 'inactive';
interface _LocationStatusList extends _codePrimitive {
  content: LocationStatusList;
}

/** A string that may contain markdown syntax for optional processing by a mark down presentation engineSystems are not required to have markdown support, and there is considerable variation in markdown syntax, so the text should be readable without markdown processing. The preferred markdown syntax is described here: http://daringfireball.net/projects/markdown/syntax (and tests here: http://daringfireball.net/projects/downloads/MarkdownTest_1.0.zip)If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions */
interface _markdown extends _Element {
  value: string;
}
export interface markdown extends _markdown {
  constructor: { new (): markdown };
}
export var markdown: { new (): markdown };

export type markdownPrimitive = string;
type _markdownPrimitive = Primitive._string;

/** Different measurement principle supported by the device.If the element is present, it must have either a @value, an @id, or extensions */
interface _MeasmntPrinciple extends _Element {
  value?: MeasmntPrincipleList;
}
export interface MeasmntPrinciple extends _MeasmntPrinciple {
  constructor: { new (): MeasmntPrinciple };
}
export var MeasmntPrinciple: { new (): MeasmntPrinciple };

export type MeasmntPrincipleList =
  | 'other'
  | 'chemical'
  | 'electrical'
  | 'impedance'
  | 'nuclear'
  | 'optical'
  | 'thermal'
  | 'biological'
  | 'mechanical'
  | 'acoustical'
  | 'manual';
interface _MeasmntPrincipleList extends _codePrimitive {
  content: MeasmntPrincipleList;
}

/** The Measure resource provides the definition of a quality measure.If the element is present, it must have either a @value, an @id, or extensions */
interface _Measure extends _DomainResource {
  /** The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
  approvalDate?: date;
  /** Provides a summary of relevant clinical guidelines or other clinical recommendations supporting the measure. */
  clinicalRecommendationStatement?: markdown;
  /** If this is a composite measure, the scoring method used to combine the component measures to determine the composite score. */
  compositeScoring?: CodeableConcept;
  /** Contact details to assist a user in finding and communicating with the publisher. */
  contact?: ContactDetail[];
  /** A contributor to the content of the measure, including authors, editors, reviewers, and endorsers. */
  contributor?: Contributor[];
  /** A copyright statement relating to the measure and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the measure. */
  copyright?: markdown;
  /** The date  (and optionally time) when the measure was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the measure changes. */
  date?: dateTime;
  /** Provides a description of an individual term used within the measure. */
  definition?: markdown[];
  /** A free text natural language description of the measure from a consumer's perspective. */
  description?: markdown;
  /** Notices and disclaimers regarding the use of the measure, or related to intellectual property (such as code systems) referenced by the measure. */
  disclaimer?: markdown;
  /** The period during which the measure content was or is planned to be in active use. */
  effectivePeriod?: Period;
  /** A boolean value to indicate that this measure is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage. */
  experimental?: boolean;
  /** A group of population criteria for the measure. */
  group?: MeasureGroup[];
  /** Additional guidance for the measure including how it can be used in a clinical context, and the intent of the measure. */
  guidance?: markdown;
  /** A formal identifier that is used to identify this measure when it is represented in other formats, or referenced in a specification, model, design or an instance. */
  identifier?: Identifier[];
  /** Information on whether an increase or decrease in score is the preferred result (e.g., a higher score indicates better quality OR a lower score indicates better quality OR quality is whthin a range). */
  improvementNotation?: string;
  /** A legal or geographic region in which the measure is intended to be used. */
  jurisdiction?: CodeableConcept[];
  /** The date on which the resource content was last reviewed. Review happens periodically after approval, but doesn't change the original approval date. */
  lastReviewDate?: date;
  /** A reference to a Library resource containing the formal logic used by the measure. */
  library?: Reference[];
  /** A natural language name identifying the measure. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
  name?: string;
  /** The name of the individual or organization that published the measure. */
  publisher?: string;
  /** Explaination of why this measure is needed and why it has been designed as it has. */
  purpose?: markdown;
  /** Describes how to combine the information calculated, based on logic in each of several populations, into one summarized result. */
  rateAggregation?: string;
  /** Provides a succint statement of the need for the measure. Usually includes statements pertaining to importance criterion: impact, gap in care, and evidence. */
  rationale?: markdown;
  /** Related artifacts such as additional documentation, justification, or bibliographic references. */
  relatedArtifact?: RelatedArtifact[];
  /** A description of the risk adjustment factors that may impact the resulting score for the measure and how they may be accounted for when computing and reporting measure results. */
  riskAdjustment?: string;
  /** Indicates how the calculation is performed for the measure, including proportion, ratio, continuous variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented. */
  scoring?: CodeableConcept;
  /** The measure set, e.g. Preventive Care and Screening. */
  set?: string;
  /** The status of this measure. Enables tracking the life-cycle of the content. */
  status: PublicationStatus;
  /** The supplemental data criteria for the measure report, specified as either the name of a valid CQL expression within a referenced library, or a valid FHIR Resource Path. */
  supplementalData?: MeasureSupplementalData[];
  /** A short, descriptive, user-friendly title for the measure. */
  title?: string;
  /** Descriptive topics related to the content of the measure. Topics provide a high-level categorization of the type of the measure that can be useful for filtering and searching. */
  topic?: CodeableConcept[];
  /** Indicates whether the measure is used to examine a process, an outcome over time, a patient-reported outcome, or a structure measure such as utilization. */
  type?: CodeableConcept[];
  /** An absolute URI that is used to identify this measure when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this measure is (or will be) published. The URL SHOULD include the major version of the measure. For more information see [Technical and Business Versions](resource.html#versions). */
  url?: uri;
  /** A detailed description of how the measure is used from a clinical perspective. */
  usage?: string;
  /** The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate measure instances. */
  useContext?: UsageContext[];
  /** The identifier that is used to identify this version of the measure when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the measure author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts. */
  version?: string;
}
export interface Measure extends _Measure {
  constructor: { new (): Measure };
}
export var Measure: { new (): Measure };

/** The Measure resource provides the definition of a quality measure. */
interface _MeasureGroup extends _BackboneElement {
  /** The human readable description of this population group. */
  description?: string;
  /** A unique identifier for the group. This identifier will used to report data for the group in the measure report. */
  identifier: Identifier;
  /** Optional name or short description of this group. */
  name?: string;
  /** A population criteria for the measure. */
  population?: MeasurePopulation[];
  /** The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library, or a valid FHIR Resource Path. */
  stratifier?: MeasureStratifier[];
}
export interface MeasureGroup extends _MeasureGroup {
  constructor: { new (): MeasureGroup };
}
export var MeasureGroup: { new (): MeasureGroup };

/** The Measure resource provides the definition of a quality measure. */
interface _MeasurePopulation extends _BackboneElement {
  /** The type of population criteria. */
  code?: CodeableConcept;
  /** The name of a valid referenced CQL expression (may be namespaced) that defines this population criteria. */
  criteria: string;
  /** The human readable description of this population criteria. */
  description?: string;
  /** A unique identifier for the population criteria. This identifier is used to report data against this criteria within the measure report. */
  identifier?: Identifier;
  /** Optional name or short description of this population. */
  name?: string;
}
export interface MeasurePopulation extends _MeasurePopulation {
  constructor: { new (): MeasurePopulation };
}
export var MeasurePopulation: { new (): MeasurePopulation };

/** The MeasureReport resource contains the results of evaluating a measure.If the element is present, it must have either a @value, an @id, or extensions */
interface _MeasureReport extends _DomainResource {
  /** The date this measure report was generated. */
  date?: dateTime;
  /** A reference to a Bundle containing the Resources that were used in the evaluation of this report. */
  evaluatedResources?: Reference;
  /** The results of the calculation, one for each population group in the measure. */
  group?: MeasureReportGroup[];
  /** A formal identifier that is used to identify this report when it is represented in other formats, or referenced in a specification, model, design or an instance. */
  identifier?: Identifier;
  /** A reference to the Measure that was evaluated to produce this report. */
  measure: Reference;
  /** Optional Patient if the report was requested for a single patient. */
  patient?: Reference;
  /** The reporting period for which the report was calculated. */
  period: Period;
  /** Reporting Organization. */
  reportingOrganization?: Reference;
  /** The report status. No data will be available until the report status is complete. */
  status: MeasureReportStatus;
  /** The type of measure report. This may be an individual report, which provides a single patient's score for the measure; a patient listing, which returns the list of patients that meet the various criteria in the measure; or a summary report, which returns a population count for each of the criteria in the measure. */
  type: MeasureReportType;
}
export interface MeasureReport extends _MeasureReport {
  constructor: { new (): MeasureReport };
}
export var MeasureReport: { new (): MeasureReport };

/** The MeasureReport resource contains the results of evaluating a measure. */
interface _MeasureReportGroup extends _BackboneElement {
  /** The identifier of the population group as defined in the measure definition. */
  identifier: Identifier;
  /** The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group. */
  measureScore?: decimal;
  /** The populations that make up the population group, one for each type of population appropriate for the measure. */
  population?: MeasureReportPopulation[];
  /** When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure. */
  stratifier?: MeasureReportStratifier[];
}
export interface MeasureReportGroup extends _MeasureReportGroup {
  constructor: { new (): MeasureReportGroup };
}
export var MeasureReportGroup: { new (): MeasureReportGroup };

/** The MeasureReport resource contains the results of evaluating a measure. */
interface _MeasureReportPopulation extends _BackboneElement {
  /** The type of the population. */
  code?: CodeableConcept;
  /** The number of members of the population. */
  count?: integer;
  /** The identifier of the population being reported, as defined by the population element of the measure. */
  identifier?: Identifier;
  /** This element refers to a List of patient level MeasureReport resources, one for each patient in this population. */
  patients?: Reference;
}
export interface MeasureReportPopulation extends _MeasureReportPopulation {
  constructor: { new (): MeasureReportPopulation };
}
export var MeasureReportPopulation: { new (): MeasureReportPopulation };

/** The MeasureReport resource contains the results of evaluating a measure. */
interface _MeasureReportPopulation1 extends _BackboneElement {
  /** The type of the population. */
  code?: CodeableConcept;
  /** The number of members of the population in this stratum. */
  count?: integer;
  /** The identifier of the population being reported, as defined by the population element of the measure. */
  identifier?: Identifier;
  /** This element refers to a List of patient level MeasureReport resources, one for each patient in this population in this stratum. */
  patients?: Reference;
}
export interface MeasureReportPopulation1 extends _MeasureReportPopulation1 {
  constructor: { new (): MeasureReportPopulation1 };
}
export var MeasureReportPopulation1: { new (): MeasureReportPopulation1 };

/** The status of the measure reportIf the element is present, it must have either a @value, an @id, or extensions */
interface _MeasureReportStatus extends _Element {
  value?: MeasureReportStatusList;
}
export interface MeasureReportStatus extends _MeasureReportStatus {
  constructor: { new (): MeasureReportStatus };
}
export var MeasureReportStatus: { new (): MeasureReportStatus };

export type MeasureReportStatusList = 'complete' | 'pending' | 'error';
interface _MeasureReportStatusList extends _codePrimitive {
  content: MeasureReportStatusList;
}

/** The MeasureReport resource contains the results of evaluating a measure. */
interface _MeasureReportStratifier extends _BackboneElement {
  /** The identifier of this stratifier, as defined in the measure definition. */
  identifier?: Identifier;
  /** This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value. */
  stratum?: MeasureReportStratum[];
}
export interface MeasureReportStratifier extends _MeasureReportStratifier {
  constructor: { new (): MeasureReportStratifier };
}
export var MeasureReportStratifier: { new (): MeasureReportStratifier };

/** The MeasureReport resource contains the results of evaluating a measure. */
interface _MeasureReportStratum extends _BackboneElement {
  /** The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum. */
  measureScore?: decimal;
  /** The populations that make up the stratum, one for each type of population appropriate to the measure. */
  population?: MeasureReportPopulation1[];
  /** The value for this stratum, expressed as a string. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique. */
  value: string;
}
export interface MeasureReportStratum extends _MeasureReportStratum {
  constructor: { new (): MeasureReportStratum };
}
export var MeasureReportStratum: { new (): MeasureReportStratum };

/** The type of the measure reportIf the element is present, it must have either a @value, an @id, or extensions */
interface _MeasureReportType extends _Element {
  value?: MeasureReportTypeList;
}
export interface MeasureReportType extends _MeasureReportType {
  constructor: { new (): MeasureReportType };
}
export var MeasureReportType: { new (): MeasureReportType };

export type MeasureReportTypeList = 'individual' | 'patient-list' | 'summary';
interface _MeasureReportTypeList extends _codePrimitive {
  content: MeasureReportTypeList;
}

/** The Measure resource provides the definition of a quality measure. */
interface _MeasureStratifier extends _BackboneElement {
  /** The criteria for the stratifier. This must be the name of an expression defined within a referenced library. */
  criteria?: string;
  /** The identifier for the stratifier used to coordinate the reported data back to this stratifier. */
  identifier?: Identifier;
  /** The path to an element that defines the stratifier, specified as a valid FHIR resource path. */
  path?: string;
}
export interface MeasureStratifier extends _MeasureStratifier {
  constructor: { new (): MeasureStratifier };
}
export var MeasureStratifier: { new (): MeasureStratifier };

/** The Measure resource provides the definition of a quality measure. */
interface _MeasureSupplementalData extends _BackboneElement {
  /** The criteria for the supplemental data. This must be the name of a valid expression defined within a referenced library, and defines the data to be returned for this element. */
  criteria?: string;
  /** An identifier for the supplemental data. */
  identifier?: Identifier;
  /** The supplemental data to be supplied as part of the measure response, specified as a valid FHIR Resource Path. */
  path?: string;
  /** An indicator of the intended usage for the supplemental data element. Supplemental data indicates the data is additional information requested to augment the measure information. Risk adjustment factor indicates the data is additional information used to calculate risk adjustment factors when applying a risk model to the measure calculation. */
  usage?: CodeableConcept[];
}
export interface MeasureSupplementalData extends _MeasureSupplementalData {
  constructor: { new (): MeasureSupplementalData };
}
export var MeasureSupplementalData: { new (): MeasureSupplementalData };

/** A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.If the element is present, it must have either a @value, an @id, or extensions */
interface _Media extends _DomainResource {
  /** A procedure that is fulfilled in whole or in part by the creation of this media. */
  basedOn?: Reference[];
  /** Indicates the site on the subject's body where the media was collected (i.e. the target site). */
  bodySite?: CodeableConcept;
  /** The actual content of the media - inline or by direct reference to the media source file. */
  content: Attachment;
  /** The encounter or episode of care that establishes the context for this media. */
  context?: Reference;
  /** The device used to collect the media. */
  device?: Reference;
  /** The duration of the recording in seconds - for audio and video. */
  duration?: unsignedInt;
  /** The number of frames in a photo. This is used with a multi-page fax, or an imaging acquisition context that takes multiple slices in a single image, or an animated gif. If there is more than one frame, this SHALL have a value in order to alert interface software that a multi-frame capable rendering widget is required. */
  frames?: positiveInt;
  /** Height of the image in pixels (photo/video). */
  height?: positiveInt;
  /** Identifiers associated with the image - these may include identifiers for the image itself, identifiers for the context of its collection (e.g. series ids) and context ids such as accession numbers or other workflow identifiers. */
  identifier?: Identifier[];
  /** Comments made about the media by the performer, subject or other participants. */
  note?: Annotation[];
  occurrenceDateTime?: dateTime;
  occurrencePeriod?: Period;
  /** The person who administered the collection of the image. */
  operator?: Reference;
  /** Describes why the event occurred in coded or textual form. */
  reasonCode?: CodeableConcept[];
  /** Who/What this Media is a record of. */
  subject?: Reference;
  /** Details of the type of the media - usually, how it was acquired (what type of device). If images sourced from a DICOM system, are wrapped in a Media resource, then this is the modality. */
  subtype?: CodeableConcept;
  /** Whether the media is a photo (still image), an audio recording, or a video recording. */
  type: DigitalMediaType;
  /** The name of the imaging view e.g. Lateral or Antero-posterior (AP). */
  view?: CodeableConcept;
  /** Width of the image in pixels (photo/video). */
  width?: positiveInt;
}
export interface Media extends _Media {
  constructor: { new (): Media };
}
export var Media: { new (): Media };

/** This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication.If the element is present, it must have either a @value, an @id, or extensions */
interface _Medication extends _DomainResource {
  /** A code (or set of codes) that specify this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems. */
  code?: CodeableConcept;
  /** Describes the form of the item.  Powder; tablets; capsule. */
  form?: CodeableConcept;
  /** Photo(s) or graphic representation(s) of the medication. */
  image?: Attachment[];
  /** Identifies a particular constituent of interest in the product. */
  ingredient?: MedicationIngredient[];
  /** Set to true if the item is attributable to a specific manufacturer. */
  isBrand?: boolean;
  /** Set to true if the medication can be obtained without an order from a prescriber. */
  isOverTheCounter?: boolean;
  /** Describes the details of the manufacturer of the medication product.  This is not intended to represent the distributor of a medication product. */
  manufacturer?: Reference;
  /** Information that only applies to packages (not products). */
  package?: MedicationPackage;
  /** A code to indicate if the medication is in active use. */
  status?: MedicationStatus;
}
export interface Medication extends _Medication {
  constructor: { new (): Medication };
}
export var Medication: { new (): Medication };

/** Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.If the element is present, it must have either a @value, an @id, or extensions */
interface _MedicationAdministration extends _DomainResource {
  /** Indicates the type of medication administration and where the medication is expected to be consumed or administered. */
  category?: CodeableConcept;
  /** The visit, admission or other contact between patient and health care provider the medication administration was performed as part of. */
  context?: Reference;
  /** A protocol, guideline, orderset or other definition that was adhered to in whole or in part by this event. */
  definition?: Reference[];
  /** The device used in administering the medication to the patient.  For example, a particular infusion pump. */
  device?: Reference[];
  /** Describes the medication dosage information details e.g. dose, rate, site, route, etc. */
  dosage?: MedicationAdministrationDosage;
  effectiveDateTime: dateTime;
  effectivePeriod: Period;
  /** A summary of the events of interest that have occurred, such as when the administration was verified. */
  eventHistory?: Reference[];
  /** External identifier - FHIR will generate its own internal identifiers (probably URLs) which do not need to be explicitly managed by the resource.  The identifier here is one that would be used by another non-FHIR system - for example an automated medication pump would provide a record each time it operated; an administration while the patient was off the ward might be made with a different system and entered after the event.  Particularly important if these records have to be updated. */
  identifier?: Identifier[];
  medicationCodeableConcept: CodeableConcept;
  medicationReference: Reference;
  /** Extra information about the medication administration that is not conveyed by the other attributes. */
  note?: Annotation[];
  /** Set this to true if the record is saying that the medication was NOT administered. */
  notGiven?: boolean;
  /** A larger event of which this particular event is a component or step. */
  partOf?: Reference[];
  /** The individual who was responsible for giving the medication to the patient. */
  performer?: MedicationAdministrationPerformer[];
  /** The original request, instruction or authority to perform the administration. */
  prescription?: Reference;
  /** A code indicating why the medication was given. */
  reasonCode?: CodeableConcept[];
  /** A code indicating why the administration was not performed. */
  reasonNotGiven?: CodeableConcept[];
  /** Condition or observation that supports why the medication was administered. */
  reasonReference?: Reference[];
  /** Will generally be set to show that the administration has been completed.  For some long running administrations such as infusions it is possible for an administration to be started but not completed or it may be paused while some other process is under way. */
  status: MedicationAdministrationStatus;
  /** The person or animal or group receiving the medication. */
  subject: Reference;
  /** Additional information (for example, patient height and weight) that supports the administration of the medication. */
  supportingInformation?: Reference[];
}
export interface MedicationAdministration extends _MedicationAdministration {
  constructor: { new (): MedicationAdministration };
}
export var MedicationAdministration: { new (): MedicationAdministration };

/** Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner. */
interface _MedicationAdministrationDosage extends _BackboneElement {
  /** The amount of the medication given at one administration event.   Use this value when the administration is essentially an instantaneous event such as a swallowing a tablet or giving an injection. */
  dose?: Quantity;
  /** A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.  This attribute will most often NOT be populated.  It is most commonly used for injections.  For example, Slow Push, Deep IV. */
  method?: CodeableConcept;
  rateQuantity?: Quantity;
  rateRatio?: Ratio;
  /** A code specifying the route or physiological path of administration of a therapeutic agent into or onto the patient.  For example, topical, intravenous, etc. */
  route?: CodeableConcept;
  /** A coded specification of the anatomic site where the medication first entered the body.  For example, "left arm". */
  site?: CodeableConcept;
  /** Free text dosage can be used for cases where the dosage administered is too complex to code. When coded dosage is present, the free text dosage may still be present for display to humans.
   *
   * The dosage instructions should reflect the dosage of the medication that was administered. */
  text?: string;
}
export interface MedicationAdministrationDosage extends _MedicationAdministrationDosage {
  constructor: { new (): MedicationAdministrationDosage };
}
export var MedicationAdministrationDosage: { new (): MedicationAdministrationDosage };

/** Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner. */
interface _MedicationAdministrationPerformer extends _BackboneElement {
  /** The device, practitioner, etc. who performed the action. */
  actor: Reference;
  /** The organization the device or practitioner was acting on behalf of. */
  onBehalfOf?: Reference;
}
export interface MedicationAdministrationPerformer extends _MedicationAdministrationPerformer {
  constructor: { new (): MedicationAdministrationPerformer };
}
export var MedicationAdministrationPerformer: { new (): MedicationAdministrationPerformer };

/** A set of codes indicating the current status of a MedicationAdministration.If the element is present, it must have either a @value, an @id, or extensions */
interface _MedicationAdministrationStatus extends _Element {
  value?: MedicationAdministrationStatusList;
}
export interface MedicationAdministrationStatus extends _MedicationAdministrationStatus {
  constructor: { new (): MedicationAdministrationStatus };
}
export var MedicationAdministrationStatus: { new (): MedicationAdministrationStatus };

export type MedicationAdministrationStatusList = 'in-progress' | 'on-hold' | 'completed' | 'entered-in-error' | 'stopped' | 'unknown';
interface _MedicationAdministrationStatusList extends _codePrimitive {
  content: MedicationAdministrationStatusList;
}

/** This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication. */
interface _MedicationBatch extends _BackboneElement {
  /** When this specific batch of product will expire. */
  expirationDate?: dateTime;
  /** The assigned lot number of a batch of the specified product. */
  lotNumber?: string;
}
export interface MedicationBatch extends _MedicationBatch {
  constructor: { new (): MedicationBatch };
}
export var MedicationBatch: { new (): MedicationBatch };

/** This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication. */
interface _MedicationContent extends _BackboneElement {
  /** The amount of the product that is in the package. */
  amount?: Quantity;
  itemCodeableConcept: CodeableConcept;
  itemReference: Reference;
}
export interface MedicationContent extends _MedicationContent {
  constructor: { new (): MedicationContent };
}
export var MedicationContent: { new (): MedicationContent };

/** Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.If the element is present, it must have either a @value, an @id, or extensions */
interface _MedicationDispense extends _DomainResource {
  /** Indicates the medication order that is being dispensed against. */
  authorizingPrescription?: Reference[];
  /** Indicates type of medication dispense and where the medication is expected to be consumed or administered. */
  category?: CodeableConcept;
  /** The encounter or episode of care that establishes the context for this event. */
  context?: Reference;
  /** The amount of medication expressed as a timing amount. */
  daysSupply?: Quantity;
  /** Identification of the facility/location where the medication was shipped to, as part of the dispense event. */
  destination?: Reference;
  /** Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, duplicate therapy, dosage alert etc. */
  detectedIssue?: Reference[];
  /** Indicates how the medication is to be used by the patient. */
  dosageInstruction?: Dosage[];
  /** A summary of the events of interest that have occurred, such as when the dispense was verified. */
  eventHistory?: Reference[];
  /** Identifier assigned by the dispensing facility - this is an identifier assigned outside FHIR. */
  identifier?: Identifier[];
  medicationCodeableConcept: CodeableConcept;
  medicationReference: Reference;
  /** True if the dispense was not performed for some reason. */
  notDone?: boolean;
  notDoneReasonCodeableConcept?: CodeableConcept;
  notDoneReasonReference?: Reference;
  /** Extra information about the dispense that could not be conveyed in the other attributes. */
  note?: Annotation[];
  /** The procedure that the dispense is done because of. */
  partOf?: Reference[];
  /** Indicates who or what performed the event.  It should be assumed that the performer is the dispenser of the medication. */
  performer?: MedicationDispensePerformer[];
  /** The amount of medication that has been dispensed. Includes unit of measure. */
  quantity?: Quantity;
  /** Identifies the person who picked up the medication.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional. */
  receiver?: Reference[];
  /** A code specifying the state of the set of dispense events. */
  status?: MedicationDispenseStatus;
  /** A link to a resource representing the person or the group to whom the medication will be given. */
  subject?: Reference;
  /** Indicates whether or not substitution was made as part of the dispense.  In some cases substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done. */
  substitution?: MedicationDispenseSubstitution;
  /** Additional information that supports the medication being dispensed. */
  supportingInformation?: Reference[];
  /** Indicates the type of dispensing event that is performed. For example, Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc. */
  type?: CodeableConcept;
  /** The time the dispensed product was provided to the patient or their representative. */
  whenHandedOver?: dateTime;
  /** The time when the dispensed product was packaged and reviewed. */
  whenPrepared?: dateTime;
}
export interface MedicationDispense extends _MedicationDispense {
  constructor: { new (): MedicationDispense };
}
export var MedicationDispense: { new (): MedicationDispense };

/** Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order. */
interface _MedicationDispensePerformer extends _BackboneElement {
  /** The device, practitioner, etc. who performed the action.  It should be assumed that the actor is the dispenser of the medication. */
  actor: Reference;
  /** The organization the device or practitioner was acting on behalf of. */
  onBehalfOf?: Reference;
}
export interface MedicationDispensePerformer extends _MedicationDispensePerformer {
  constructor: { new (): MedicationDispensePerformer };
}
export var MedicationDispensePerformer: { new (): MedicationDispensePerformer };

/** A coded concept specifying the state of the dispense event.If the element is present, it must have either a @value, an @id, or extensions */
interface _MedicationDispenseStatus extends _Element {
  value?: MedicationDispenseStatusList;
}
export interface MedicationDispenseStatus extends _MedicationDispenseStatus {
  constructor: { new (): MedicationDispenseStatus };
}
export var MedicationDispenseStatus: { new (): MedicationDispenseStatus };

export type MedicationDispenseStatusList = 'preparation' | 'in-progress' | 'on-hold' | 'completed' | 'entered-in-error' | 'stopped';
interface _MedicationDispenseStatusList extends _codePrimitive {
  content: MedicationDispenseStatusList;
}

/** Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order. */
interface _MedicationDispenseSubstitution extends _BackboneElement {
  /** Indicates the reason for the substitution of (or lack of substitution) from what was prescribed. */
  reason?: CodeableConcept[];
  /** The person or organization that has primary responsibility for the substitution. */
  responsibleParty?: Reference[];
  /** A code signifying whether a different drug was dispensed from what was prescribed. */
  type?: CodeableConcept;
  /** True if the dispenser dispensed a different drug or product from what was prescribed. */
  wasSubstituted: boolean;
}
export interface MedicationDispenseSubstitution extends _MedicationDispenseSubstitution {
  constructor: { new (): MedicationDispenseSubstitution };
}
export var MedicationDispenseSubstitution: { new (): MedicationDispenseSubstitution };

/** This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication. */
interface _MedicationIngredient extends _BackboneElement {
  /** Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet. */
  amount?: Ratio;
  /** Indication of whether this ingredient affects the therapeutic action of the drug. */
  isActive?: boolean;
  itemCodeableConcept: CodeableConcept;
  itemReference: Reference;
}
export interface MedicationIngredient extends _MedicationIngredient {
  constructor: { new (): MedicationIngredient };
}
export var MedicationIngredient: { new (): MedicationIngredient };

/** This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication. */
interface _MedicationPackage extends _BackboneElement {
  /** Information about a group of medication produced or packaged from one production run. */
  batch?: MedicationBatch[];
  /** The kind of container that this package comes as. */
  container?: CodeableConcept;
  /** A set of components that go to make up the described item. */
  content?: MedicationContent[];
}
export interface MedicationPackage extends _MedicationPackage {
  constructor: { new (): MedicationPackage };
}
export var MedicationPackage: { new (): MedicationPackage };

/** An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.If the element is present, it must have either a @value, an @id, or extensions */
interface _MedicationRequest extends _DomainResource {
  /** The date (and perhaps time) when the prescription was initially written or authored on. */
  authoredOn?: dateTime;
  /** A plan or request that is fulfilled in whole or in part by this medication request. */
  basedOn?: Reference[];
  /** Indicates the type of medication order and where the medication is expected to be consumed or administered. */
  category?: CodeableConcept;
  /** A link to an encounter, or episode of care, that identifies the particular occurrence or set occurrences of contact between patient and health care provider. */
  context?: Reference;
  /** Protocol or definition followed by this request. */
  definition?: Reference[];
  /** Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, duplicate therapy, dosage alert etc. */
  detectedIssue?: Reference[];
  /** Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department. */
  dispenseRequest?: MedicationRequestDispenseRequest;
  /** Indicates how the medication is to be used by the patient. */
  dosageInstruction?: Dosage[];
  /** Links to Provenance records for past versions of this resource or fulfilling request or event resources that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the resource. */
  eventHistory?: Reference[];
  /** A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition or prescription. */
  groupIdentifier?: Identifier;
  /** This records identifiers associated with this medication request that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. For example a re-imbursement system might issue its own id for each prescription that is created.  This is particularly important where FHIR only provides part of an entire workflow process where records must be tracked through an entire system. */
  identifier?: Identifier[];
  /** Whether the request is a proposal, plan, or an original order. */
  intent: MedicationRequestIntent;
  medicationCodeableConcept: CodeableConcept;
  medicationReference: Reference;
  /** Extra information about the prescription that could not be conveyed by the other attributes. */
  note?: Annotation[];
  /** Indicates how quickly the Medication Request should be addressed with respect to other requests. */
  priority?: MedicationRequestPriority;
  /** A link to a resource representing an earlier order related order or prescription. */
  priorPrescription?: Reference;
  /** The reason or the indication for ordering the medication. */
  reasonCode?: CodeableConcept[];
  /** Condition or observation that supports why the medication was ordered. */
  reasonReference?: Reference[];
  /** The person who entered the order on behalf of another individual for example in the case of a verbal or a telephone order. */
  recorder?: Reference;
  /** The individual, organization or device that initiated the request and has responsibility for its activation. */
  requester?: MedicationRequestRequester;
  /** A code specifying the current state of the order.  Generally this will be active or completed state. */
  status?: MedicationRequestStatus;
  /** A link to a resource representing the person or set of individuals to whom the medication will be given. */
  subject: Reference;
  /** Indicates whether or not substitution can or should be part of the dispense. In some cases substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done. */
  substitution?: MedicationRequestSubstitution;
  /** Include additional information (for example, patient height and weight) that supports the ordering of the medication. */
  supportingInformation?: Reference[];
}
export interface MedicationRequest extends _MedicationRequest {
  constructor: { new (): MedicationRequest };
}
export var MedicationRequest: { new (): MedicationRequest };

/** An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns. */
interface _MedicationRequestDispenseRequest extends _BackboneElement {
  /** Identifies the period time over which the supplied product is expected to be used, or the length of time the dispense is expected to last. */
  expectedSupplyDuration?: Duration;
  /** An integer indicating the number of times, in addition to the original dispense, (aka refills or repeats) that the patient can receive the prescribed medication. Usage Notes: This integer does not include the original order dispense. This means that if an order indicates dispense 30 tablets plus "3 repeats", then the order can be dispensed a total of 4 times and the patient can receive a total of 120 tablets. */
  numberOfRepeatsAllowed?: positiveInt;
  /** Indicates the intended dispensing Organization specified by the prescriber. */
  performer?: Reference;
  /** The amount that is to be dispensed for one fill. */
  quantity?: Quantity;
  /** This indicates the validity period of a prescription (stale dating the Prescription). */
  validityPeriod?: Period;
}
export interface MedicationRequestDispenseRequest extends _MedicationRequestDispenseRequest {
  constructor: { new (): MedicationRequestDispenseRequest };
}
export var MedicationRequestDispenseRequest: { new (): MedicationRequestDispenseRequest };

/** The kind of medication orderIf the element is present, it must have either a @value, an @id, or extensions */
interface _MedicationRequestIntent extends _Element {
  value?: MedicationRequestIntentList;
}
export interface MedicationRequestIntent extends _MedicationRequestIntent {
  constructor: { new (): MedicationRequestIntent };
}
export var MedicationRequestIntent: { new (): MedicationRequestIntent };

export type MedicationRequestIntentList = 'proposal' | 'plan' | 'order' | 'instance-order';
interface _MedicationRequestIntentList extends _codePrimitive {
  content: MedicationRequestIntentList;
}

/** Identifies the level of importance to be assigned to actioning the requestIf the element is present, it must have either a @value, an @id, or extensions */
interface _MedicationRequestPriority extends _Element {
  value?: MedicationRequestPriorityList;
}
export interface MedicationRequestPriority extends _MedicationRequestPriority {
  constructor: { new (): MedicationRequestPriority };
}
export var MedicationRequestPriority: { new (): MedicationRequestPriority };

export type MedicationRequestPriorityList = 'routine' | 'urgent' | 'stat' | 'asap';
interface _MedicationRequestPriorityList extends _codePrimitive {
  content: MedicationRequestPriorityList;
}

/** An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns. */
interface _MedicationRequestRequester extends _BackboneElement {
  /** The healthcare professional responsible for authorizing the initial prescription. */
  agent: Reference;
  /** The organization the device or practitioner was acting on behalf of. */
  onBehalfOf?: Reference;
}
export interface MedicationRequestRequester extends _MedicationRequestRequester {
  constructor: { new (): MedicationRequestRequester };
}
export var MedicationRequestRequester: { new (): MedicationRequestRequester };

/** A coded concept specifying the state of the prescribing event. Describes the lifecycle of the prescriptionIf the element is present, it must have either a @value, an @id, or extensions */
interface _MedicationRequestStatus extends _Element {
  value?: MedicationRequestStatusList;
}
export interface MedicationRequestStatus extends _MedicationRequestStatus {
  constructor: { new (): MedicationRequestStatus };
}
export var MedicationRequestStatus: { new (): MedicationRequestStatus };

export type MedicationRequestStatusList =
  | 'active'
  | 'on-hold'
  | 'cancelled'
  | 'completed'
  | 'entered-in-error'
  | 'stopped'
  | 'draft'
  | 'unknown';
interface _MedicationRequestStatusList extends _codePrimitive {
  content: MedicationRequestStatusList;
}

/** An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns. */
interface _MedicationRequestSubstitution extends _BackboneElement {
  /** True if the prescriber allows a different drug to be dispensed from what was prescribed. */
  allowed: boolean;
  /** Indicates the reason for the substitution, or why substitution must or must not be performed. */
  reason?: CodeableConcept;
}
export interface MedicationRequestSubstitution extends _MedicationRequestSubstitution {
  constructor: { new (): MedicationRequestSubstitution };
}
export var MedicationRequestSubstitution: { new (): MedicationRequestSubstitution };

/** A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now, or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from sources such as the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains
 *
 * The primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.If the element is present, it must have either a @value, an @id, or extensions */
interface _MedicationStatement extends _DomainResource {
  /** A plan, proposal or order that is fulfilled in whole or in part by this event. */
  basedOn?: Reference[];
  /** Indicates where type of medication statement and where the medication is expected to be consumed or administered. */
  category?: CodeableConcept;
  /** The encounter or episode of care that establishes the context for this MedicationStatement. */
  context?: Reference;
  /** The date when the medication statement was asserted by the information source. */
  dateAsserted?: dateTime;
  /** Allows linking the MedicationStatement to the underlying MedicationRequest, or to other information that supports or is used to derive the MedicationStatement. */
  derivedFrom?: Reference[];
  /** Indicates how the medication is/was or should be taken by the patient. */
  dosage?: Dosage[];
  effectiveDateTime?: dateTime;
  effectivePeriod?: Period;
  /** External identifier - FHIR will generate its own internal identifiers (probably URLs) which do not need to be explicitly managed by the resource.  The identifier here is one that would be used by another non-FHIR system - for example an automated medication pump would provide a record each time it operated; an administration while the patient was off the ward might be made with a different system and entered after the event.  Particularly important if these records have to be updated. */
  identifier?: Identifier[];
  /** The person or organization that provided the information about the taking of this medication. Note: Use derivedFrom when a MedicationStatement is derived from other resources, e.g Claim or MedicationRequest. */
  informationSource?: Reference;
  medicationCodeableConcept: CodeableConcept;
  medicationReference: Reference;
  /** Provides extra information about the medication statement that is not conveyed by the other attributes. */
  note?: Annotation[];
  /** A larger event of which this particular event is a component or step. */
  partOf?: Reference[];
  /** A reason for why the medication is being/was taken. */
  reasonCode?: CodeableConcept[];
  /** A code indicating why the medication was not taken. */
  reasonNotTaken?: CodeableConcept[];
  /** Condition or observation that supports why the medication is being/was taken. */
  reasonReference?: Reference[];
  /** A code representing the patient or other source's judgment about the state of the medication used that this statement is about.  Generally this will be active or completed. */
  status: MedicationStatementStatus;
  /** The person, animal or group who is/was taking the medication. */
  subject: Reference;
  /** Indicator of the certainty of whether the medication was taken by the patient. */
  taken: MedicationStatementTaken;
}
export interface MedicationStatement extends _MedicationStatement {
  constructor: { new (): MedicationStatement };
}
export var MedicationStatement: { new (): MedicationStatement };

/** A coded concept indicating the current status of a MedicationStatement.If the element is present, it must have either a @value, an @id, or extensions */
interface _MedicationStatementStatus extends _Element {
  value?: MedicationStatementStatusList;
}
export interface MedicationStatementStatus extends _MedicationStatementStatus {
  constructor: { new (): MedicationStatementStatus };
}
export var MedicationStatementStatus: { new (): MedicationStatementStatus };

export type MedicationStatementStatusList = 'active' | 'completed' | 'entered-in-error' | 'intended' | 'stopped' | 'on-hold';
interface _MedicationStatementStatusList extends _codePrimitive {
  content: MedicationStatementStatusList;
}

/** A coded concept identifying level of certainty if patient has taken or has not taken the medicationIf the element is present, it must have either a @value, an @id, or extensions */
interface _MedicationStatementTaken extends _Element {
  value?: MedicationStatementTakenList;
}
export interface MedicationStatementTaken extends _MedicationStatementTaken {
  constructor: { new (): MedicationStatementTaken };
}
export var MedicationStatementTaken: { new (): MedicationStatementTaken };

export type MedicationStatementTakenList = 'y' | 'n' | 'unk' | 'na';
interface _MedicationStatementTakenList extends _codePrimitive {
  content: MedicationStatementTakenList;
}

/** A coded concept defining if the medication is in active useIf the element is present, it must have either a @value, an @id, or extensions */
interface _MedicationStatus extends _Element {
  value?: MedicationStatusList;
}
export interface MedicationStatus extends _MedicationStatus {
  constructor: { new (): MedicationStatus };
}
export var MedicationStatus: { new (): MedicationStatus };

export type MedicationStatusList = 'active' | 'inactive' | 'entered-in-error';
interface _MedicationStatusList extends _codePrimitive {
  content: MedicationStatusList;
}

/** Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted.If the element is present, it must have either a @value, an @id, or extensions */
interface _MessageDefinition extends _DomainResource {
  /** Indicates what types of messages may be sent as an application-level response to this message. */
  allowedResponse?: MessageDefinitionAllowedResponse[];
  /** The MessageDefinition that is the basis for the contents of this resource. */
  base?: Reference;
  /** The impact of the content of the message. */
  category?: MessageSignificanceCategory;
  /** Contact details to assist a user in finding and communicating with the publisher. */
  contact?: ContactDetail[];
  /** A copyright statement relating to the message definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the message definition. */
  copyright?: markdown;
  /** The date  (and optionally time) when the message definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the message definition changes. */
  date: dateTime;
  /** A free text natural language description of the message definition from a consumer's perspective. */
  description?: markdown;
  /** A coded identifier of a supported messaging event. */
  event: Coding;
  /** A boolean value to indicate that this message definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage. */
  experimental?: boolean;
  /** Identifies the resource (or resources) that are being addressed by the event.  For example, the Encounter for an admit message or two Account records for a merge. */
  focus?: MessageDefinitionFocus[];
  /** A formal identifier that is used to identify this message definition when it is represented in other formats, or referenced in a specification, model, design or an instance. */
  identifier?: Identifier;
  /** A legal or geographic region in which the message definition is intended to be used. */
  jurisdiction?: CodeableConcept[];
  /** A natural language name identifying the message definition. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
  name?: string;
  /** Identifies a protocol or workflow that this MessageDefinition represents a step in. */
  parent?: Reference[];
  /** The name of the individual or organization that published the message definition. */
  publisher?: string;
  /** Explaination of why this message definition is needed and why it has been designed as it has. */
  purpose?: markdown;
  /** A MessageDefinition that is superseded by this definition. */
  replaces?: Reference[];
  /** Indicates whether a response is required for this message. */
  responseRequired?: boolean;
  /** The status of this message definition. Enables tracking the life-cycle of the content. */
  status: PublicationStatus;
  /** A short, descriptive, user-friendly title for the message definition. */
  title?: string;
  /** An absolute URI that is used to identify this message definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this message definition is (or will be) published. The URL SHOULD include the major version of the message definition. For more information see [Technical and Business Versions](resource.html#versions). */
  url?: uri;
  /** The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate message definition instances. */
  useContext?: UsageContext[];
  /** The identifier that is used to identify this version of the message definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the message definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
  version?: string;
}
export interface MessageDefinition extends _MessageDefinition {
  constructor: { new (): MessageDefinition };
}
export var MessageDefinition: { new (): MessageDefinition };

/** Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted. */
interface _MessageDefinitionAllowedResponse extends _BackboneElement {
  /** A reference to the message definition that must be adhered to by this supported response. */
  message: Reference;
  /** Provides a description of the circumstances in which this response should be used (as opposed to one of the alternative responses). */
  situation?: markdown;
}
export interface MessageDefinitionAllowedResponse extends _MessageDefinitionAllowedResponse {
  constructor: { new (): MessageDefinitionAllowedResponse };
}
export var MessageDefinitionAllowedResponse: { new (): MessageDefinitionAllowedResponse };

/** Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted. */
interface _MessageDefinitionFocus extends _BackboneElement {
  /** The kind of resource that must be the focus for this message. */
  code: ResourceType;
  /** Identifies the maximum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition. */
  max?: string;
  /** Identifies the minimum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition. */
  min?: unsignedInt;
  /** A profile that reflects constraints for the focal resource (and potentially for related resources). */
  profile?: Reference;
}
export interface MessageDefinitionFocus extends _MessageDefinitionFocus {
  constructor: { new (): MessageDefinitionFocus };
}
export var MessageDefinitionFocus: { new (): MessageDefinitionFocus };

/** The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.If the element is present, it must have either a @value, an @id, or extensions */
interface _MessageHeader extends _DomainResource {
  /** The logical author of the message - the person or device that decided the described event should happen. When there is more than one candidate, pick the most proximal to the MessageHeader. Can provide other authors in extensions. */
  author?: Reference;
  /** The destination application which the message is intended for. */
  destination?: MessageHeaderDestination[];
  /** The person or device that performed the data entry leading to this message. When there is more than one candidate, pick the most proximal to the message. Can provide other enterers in extensions. */
  enterer?: Reference;
  /** Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification have the system value "http://hl7.org/fhir/message-events". */
  event: Coding;
  /** The actual data of the message - a reference to the root/focus class of the event. */
  focus?: Reference[];
  /** Coded indication of the cause for the event - indicates  a reason for the occurrence of the event that is a focus of this message. */
  reason?: CodeableConcept;
  /** Allows data conveyed by a message to be addressed to a particular person or department when routing to a specific application isn't sufficient. */
  receiver?: Reference;
  /** Information about the message that this message is a response to.  Only present if this message is a response. */
  response?: MessageHeaderResponse;
  /** The person or organization that accepts overall responsibility for the contents of the message. The implication is that the message event happened under the policies of the responsible party. */
  responsible?: Reference;
  /** Identifies the sending system to allow the use of a trust relationship. */
  sender?: Reference;
  /** The source application from which this message originated. */
  source: MessageHeaderSource;
  /** The time that the message was sent. */
  timestamp: instant;
}
export interface MessageHeader extends _MessageHeader {
  constructor: { new (): MessageHeader };
}
export var MessageHeader: { new (): MessageHeader };

/** The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle. */
interface _MessageHeaderDestination extends _BackboneElement {
  /** Indicates where the message should be routed to. */
  endpoint: uri;
  /** Human-readable name for the target system. */
  name?: string;
  /** Identifies the target end system in situations where the initial message transmission is to an intermediary system. */
  target?: Reference;
}
export interface MessageHeaderDestination extends _MessageHeaderDestination {
  constructor: { new (): MessageHeaderDestination };
}
export var MessageHeaderDestination: { new (): MessageHeaderDestination };

/** The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle. */
interface _MessageHeaderResponse extends _BackboneElement {
  /** Code that identifies the type of response to the message - whether it was successful or not, and whether it should be resent or not. */
  code: ResponseType;
  /** Full details of any issues found in the message. */
  details?: Reference;
  /** The MessageHeader.id of the message to which this message is a response. */
  identifier: id;
}
export interface MessageHeaderResponse extends _MessageHeaderResponse {
  constructor: { new (): MessageHeaderResponse };
}
export var MessageHeaderResponse: { new (): MessageHeaderResponse };

/** The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle. */
interface _MessageHeaderSource extends _BackboneElement {
  /** An e-mail, phone, website or other contact point to use to resolve issues with message communications. */
  contact?: ContactPoint;
  /** Identifies the routing target to send acknowledgements to. */
  endpoint: uri;
  /** Human-readable name for the source system. */
  name?: string;
  /** May include configuration or other information useful in debugging. */
  software?: string;
  /** Can convey versions of multiple systems in situations where a message passes through multiple hands. */
  version?: string;
}
export interface MessageHeaderSource extends _MessageHeaderSource {
  constructor: { new (): MessageHeaderSource };
}
export var MessageHeaderSource: { new (): MessageHeaderSource };

/** The impact of the content of a message.If the element is present, it must have either a @value, an @id, or extensions */
interface _MessageSignificanceCategory extends _Element {
  value?: MessageSignificanceCategoryList;
}
export interface MessageSignificanceCategory extends _MessageSignificanceCategory {
  constructor: { new (): MessageSignificanceCategory };
}
export var MessageSignificanceCategory: { new (): MessageSignificanceCategory };

export type MessageSignificanceCategoryList = 'Consequence' | 'Currency' | 'Notification';
interface _MessageSignificanceCategoryList extends _codePrimitive {
  content: MessageSignificanceCategoryList;
}

/** The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _Meta extends _Element {
  /** When the resource last changed - e.g. when the version changed. */
  lastUpdated?: instant;
  /** A list of profiles (references to [[[StructureDefinition]]] resources) that this resource claims to conform to. The URL is a reference to [[[StructureDefinition.url]]]. */
  profile?: uri[];
  /** Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure. */
  security?: Coding[];
  /** Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource. */
  tag?: Coding[];
  /** The version specific identifier, as it appears in the version portion of the URL. This values changes when the resource is created, updated, or deleted. */
  versionId?: id;
}
export interface Meta extends _Meta {
  constructor: { new (): Meta };
}
export var Meta: { new (): Meta };

/** An amount of economic utility in some recognized currency.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _Money extends _Quantity {}
export interface Money extends _Money {
  constructor: { new (): Money };
}
export var Money: { new (): Money };

/** The use of a human nameIf the element is present, it must have either a @value, an @id, or extensions */
interface _NameUse extends _Element {
  value?: NameUseList;
}
export interface NameUse extends _NameUse {
  constructor: { new (): NameUse };
}
export var NameUse: { new (): NameUse };

export type NameUseList = 'usual' | 'official' | 'temp' | 'nickname' | 'anonymous' | 'old' | 'maiden';
interface _NameUseList extends _codePrimitive {
  content: NameUseList;
}

/** A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types.If the element is present, it must have either a @value, an @id, or extensions */
interface _NamingSystem extends _DomainResource {
  /** Contact details to assist a user in finding and communicating with the publisher. */
  contact?: ContactDetail[];
  /** The date  (and optionally time) when the naming system was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the naming system changes. */
  date: dateTime;
  /** A free text natural language description of the naming system from a consumer's perspective. Details about what the namespace identifies including scope, granularity, version labeling, etc. */
  description?: markdown;
  /** A legal or geographic region in which the naming system is intended to be used. */
  jurisdiction?: CodeableConcept[];
  /** Indicates the purpose for the naming system - what kinds of things does it make unique? */
  kind: NamingSystemType;
  /** A natural language name identifying the naming system. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
  name: string;
  /** The name of the individual or organization that published the naming system. */
  publisher?: string;
  /** For naming systems that are retired, indicates the naming system that should be used in their place (if any). */
  replacedBy?: Reference;
  /** The name of the organization that is responsible for issuing identifiers or codes for this namespace and ensuring their non-collision. */
  responsible?: string;
  /** The status of this naming system. Enables tracking the life-cycle of the content. */
  status: PublicationStatus;
  /** Categorizes a naming system for easier search by grouping related naming systems. */
  type?: CodeableConcept;
  /** Indicates how the system may be identified when referenced in electronic exchange. */
  uniqueId: NamingSystemUniqueId[];
  /** Provides guidance on the use of the namespace, including the handling of formatting characters, use of upper vs. lower case, etc. */
  usage?: string;
  /** The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate naming system instances. */
  useContext?: UsageContext[];
}
export interface NamingSystem extends _NamingSystem {
  constructor: { new (): NamingSystem };
}
export var NamingSystem: { new (): NamingSystem };

/** Identifies the style of unique identifier used to identify a namespace.If the element is present, it must have either a @value, an @id, or extensions */
interface _NamingSystemIdentifierType extends _Element {
  value?: NamingSystemIdentifierTypeList;
}
export interface NamingSystemIdentifierType extends _NamingSystemIdentifierType {
  constructor: { new (): NamingSystemIdentifierType };
}
export var NamingSystemIdentifierType: { new (): NamingSystemIdentifierType };

export type NamingSystemIdentifierTypeList = 'oid' | 'uuid' | 'uri' | 'other';
interface _NamingSystemIdentifierTypeList extends _codePrimitive {
  content: NamingSystemIdentifierTypeList;
}

/** Identifies the purpose of the naming system.If the element is present, it must have either a @value, an @id, or extensions */
interface _NamingSystemType extends _Element {
  value?: NamingSystemTypeList;
}
export interface NamingSystemType extends _NamingSystemType {
  constructor: { new (): NamingSystemType };
}
export var NamingSystemType: { new (): NamingSystemType };

export type NamingSystemTypeList = 'codesystem' | 'identifier' | 'root';
interface _NamingSystemTypeList extends _codePrimitive {
  content: NamingSystemTypeList;
}

/** A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types. */
interface _NamingSystemUniqueId extends _BackboneElement {
  /** Notes about the past or intended usage of this identifier. */
  comment?: string;
  /** Identifies the period of time over which this identifier is considered appropriate to refer to the naming system.  Outside of this window, the identifier might be non-deterministic. */
  period?: Period;
  /** Indicates whether this identifier is the "preferred" identifier of this type. */
  preferred?: boolean;
  /** Identifies the unique identifier scheme used for this particular identifier. */
  type: NamingSystemIdentifierType;
  /** The string that should be sent over the wire to identify the code system or identifier system. */
  value: string;
}
export interface NamingSystemUniqueId extends _NamingSystemUniqueId {
  constructor: { new (): NamingSystemUniqueId };
}
export var NamingSystemUniqueId: { new (): NamingSystemUniqueId };

/** A human-readable formatted text, including images.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _Narrative extends _Element {
  /** generic language/style container */
  div: string;
  /** The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data. */
  status: NarrativeStatusList;
}
export interface Narrative extends _Narrative {
  constructor: { new (): Narrative };
}
export var Narrative: { new (): Narrative };

/** The status of a resource narrativeIf the element is present, it must have either a @value, an @id, or extensions */
interface _NarrativeStatus extends _Element {
  value?: NarrativeStatusList;
}
export interface NarrativeStatus extends _NarrativeStatus {
  constructor: { new (): NarrativeStatus };
}
export var NarrativeStatus: { new (): NarrativeStatus };

export type NarrativeStatusList = 'generated' | 'extensions' | 'additional' | 'empty';
interface _NarrativeStatusList extends _codePrimitive {
  content: NarrativeStatusList;
}

/** If the element is present, it must have either a @value, an @id, or extensions */
interface _NoteType extends _Element {
  value?: NoteTypeList;
}
export interface NoteType extends _NoteType {
  constructor: { new (): NoteType };
}
export var NoteType: { new (): NoteType };

export type NoteTypeList = 'display' | 'print' | 'printoper';
interface _NoteTypeList extends _codePrimitive {
  content: NoteTypeList;
}

/** A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.If the element is present, it must have either a @value, an @id, or extensions */
interface _NutritionOrder extends _DomainResource {
  /** A link to a record of allergies or intolerances  which should be included in the nutrition order. */
  allergyIntolerance?: Reference[];
  /** The date and time that this nutrition order was requested. */
  dateTime: dateTime;
  /** An encounter that provides additional information about the healthcare context in which this request is made. */
  encounter?: Reference;
  /** Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity. */
  enteralFormula?: NutritionOrderEnteralFormula;
  /** This modifier is used to convey order-specific modifiers about the type of food that should NOT be given. These can be derived from patient allergies, intolerances, or preferences such as No Red Meat, No Soy or No Wheat or  Gluten-Free.  While it should not be necessary to repeat allergy or intolerance information captured in the referenced AllergyIntolerance resource in the excludeFoodModifier, this element may be used to convey additional specificity related to foods that should be eliminated from the patient’s diet for any reason.  This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings. */
  excludeFoodModifier?: CodeableConcept[];
  /** This modifier is used to convey order-specific modifiers about the type of food that should be given. These can be derived from patient allergies, intolerances, or preferences such as Halal, Vegan or Kosher. This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings. */
  foodPreferenceModifier?: CodeableConcept[];
  /** Identifiers assigned to this order by the order sender or by the order receiver. */
  identifier?: Identifier[];
  /** Diet given orally in contrast to enteral (tube) feeding. */
  oralDiet?: NutritionOrderOralDiet;
  /** The practitioner that holds legal responsibility for ordering the diet, nutritional supplement, or formula feedings. */
  orderer?: Reference;
  /** The person (patient) who needs the nutrition order for an oral diet, nutritional supplement and/or enteral or formula feeding. */
  patient: Reference;
  /** The workflow status of the nutrition order/request. */
  status?: NutritionOrderStatus;
  /** Oral nutritional products given in order to add further nutritional value to the patient's diet. */
  supplement?: NutritionOrderSupplement[];
}
export interface NutritionOrder extends _NutritionOrder {
  constructor: { new (): NutritionOrder };
}
export var NutritionOrder: { new (): NutritionOrder };

/** A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident. */
interface _NutritionOrderAdministration extends _BackboneElement {
  /** The volume of formula to provide to the patient per the specified administration schedule. */
  quantity?: Quantity;
  rateQuantity?: Quantity;
  rateRatio?: Ratio;
  /** The time period and frequency at which the enteral formula should be delivered to the patient. */
  schedule?: Timing;
}
export interface NutritionOrderAdministration extends _NutritionOrderAdministration {
  constructor: { new (): NutritionOrderAdministration };
}
export var NutritionOrderAdministration: { new (): NutritionOrderAdministration };

/** A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident. */
interface _NutritionOrderEnteralFormula extends _BackboneElement {
  /** The product or brand name of the type of modular component to be added to the formula. */
  additiveProductName?: string;
  /** Indicates the type of modular component such as protein, carbohydrate, fat or fiber to be provided in addition to or mixed with the base formula. */
  additiveType?: CodeableConcept;
  /** Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours. */
  administration?: NutritionOrderAdministration[];
  /** Free text formula administration, feeding instructions or additional instructions or information. */
  administrationInstruction?: string;
  /** The product or brand name of the enteral or infant formula product such as "ACME Adult Standard Formula". */
  baseFormulaProductName?: string;
  /** The type of enteral or infant formula such as an adult standard formula with fiber or a soy-based infant formula. */
  baseFormulaType?: CodeableConcept;
  /** The amount of energy (calories) that the formula should provide per specified volume, typically per mL or fluid oz.  For example, an infant may require a formula that provides 24 calories per fluid ounce or an adult may require an enteral formula that provides 1.5 calorie/mL. */
  caloricDensity?: Quantity;
  /** The maximum total quantity of formula that may be administered to a subject over the period of time, e.g. 1440 mL over 24 hours. */
  maxVolumeToDeliver?: Quantity;
  /** The route or physiological path of administration into the patient's gastrointestinal  tract for purposes of providing the formula feeding, e.g. nasogastric tube. */
  routeofAdministration?: CodeableConcept;
}
export interface NutritionOrderEnteralFormula extends _NutritionOrderEnteralFormula {
  constructor: { new (): NutritionOrderEnteralFormula };
}
export var NutritionOrderEnteralFormula: { new (): NutritionOrderEnteralFormula };

/** A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident. */
interface _NutritionOrderNutrient extends _BackboneElement {
  /** The quantity of the specified nutrient to include in diet. */
  amount?: Quantity;
  /** The nutrient that is being modified such as carbohydrate or sodium. */
  modifier?: CodeableConcept;
}
export interface NutritionOrderNutrient extends _NutritionOrderNutrient {
  constructor: { new (): NutritionOrderNutrient };
}
export var NutritionOrderNutrient: { new (): NutritionOrderNutrient };

/** A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident. */
interface _NutritionOrderOralDiet extends _BackboneElement {
  /** The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.) of liquids or fluids served to the patient. */
  fluidConsistencyType?: CodeableConcept[];
  /** Free text or additional instructions or information pertaining to the oral diet. */
  instruction?: string;
  /** Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet. */
  nutrient?: NutritionOrderNutrient[];
  /** The time period and frequency at which the diet should be given.  The diet should be given for the combination of all schedules if more than one schedule is present. */
  schedule?: Timing[];
  /** Class that describes any texture modifications required for the patient to safely consume various types of solid foods. */
  texture?: NutritionOrderTexture[];
  /** The kind of diet or dietary restriction such as fiber restricted diet or diabetic diet. */
  type?: CodeableConcept[];
}
export interface NutritionOrderOralDiet extends _NutritionOrderOralDiet {
  constructor: { new (): NutritionOrderOralDiet };
}
export var NutritionOrderOralDiet: { new (): NutritionOrderOralDiet };

/** Codes specifying the state of the request. Describes the lifecycle of the nutrition order.If the element is present, it must have either a @value, an @id, or extensions */
interface _NutritionOrderStatus extends _Element {
  value?: NutritionOrderStatusList;
}
export interface NutritionOrderStatus extends _NutritionOrderStatus {
  constructor: { new (): NutritionOrderStatus };
}
export var NutritionOrderStatus: { new (): NutritionOrderStatus };

export type NutritionOrderStatusList =
  | 'proposed'
  | 'draft'
  | 'planned'
  | 'requested'
  | 'active'
  | 'on-hold'
  | 'completed'
  | 'cancelled'
  | 'entered-in-error';
interface _NutritionOrderStatusList extends _codePrimitive {
  content: NutritionOrderStatusList;
}

/** A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident. */
interface _NutritionOrderSupplement extends _BackboneElement {
  /** Free text or additional instructions or information pertaining to the oral supplement. */
  instruction?: string;
  /** The product or brand name of the nutritional supplement such as "Acme Protein Shake". */
  productName?: string;
  /** The amount of the nutritional supplement to be given. */
  quantity?: Quantity;
  /** The time period and frequency at which the supplement(s) should be given.  The supplement should be given for the combination of all schedules if more than one schedule is present. */
  schedule?: Timing[];
  /** The kind of nutritional supplement product required such as a high protein or pediatric clear liquid supplement. */
  type?: CodeableConcept;
}
export interface NutritionOrderSupplement extends _NutritionOrderSupplement {
  constructor: { new (): NutritionOrderSupplement };
}
export var NutritionOrderSupplement: { new (): NutritionOrderSupplement };

/** A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident. */
interface _NutritionOrderTexture extends _BackboneElement {
  /** The food type(s) (e.g. meats, all foods)  that the texture modification applies to.  This could be all foods types. */
  foodType?: CodeableConcept;
  /** Any texture modifications (for solid foods) that should be made, e.g. easy to chew, chopped, ground, and pureed. */
  modifier?: CodeableConcept;
}
export interface NutritionOrderTexture extends _NutritionOrderTexture {
  constructor: { new (): NutritionOrderTexture };
}
export var NutritionOrderTexture: { new (): NutritionOrderTexture };

/** Measurements and simple assertions made about a patient, device or other subject.If the element is present, it must have either a @value, an @id, or extensions */
interface _Observation extends _DomainResource {
  /** A plan, proposal or order that is fulfilled in whole or in part by this event. */
  basedOn?: Reference[];
  /** Indicates the site on the subject's body where the observation was made (i.e. the target site). */
  bodySite?: CodeableConcept;
  /** A code that classifies the general type of observation being made. */
  category?: CodeableConcept[];
  /** Describes what was observed. Sometimes this is called the observation "name". */
  code: CodeableConcept;
  /** May include statements about significant, unexpected or unreliable values, or information about the source of the value where this may be relevant to the interpretation of the result. */
  comment?: string;
  /** Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations. */
  component?: ObservationComponent[];
  /** The healthcare event  (e.g. a patient and healthcare provider interaction) during which this observation is made. */
  context?: Reference;
  /** Provides a reason why the expected value in the element Observation.value[x] is missing. */
  dataAbsentReason?: CodeableConcept;
  /** The device used to generate the observation data. */
  device?: Reference;
  effectiveDateTime?: dateTime;
  effectivePeriod?: Period;
  /** A unique identifier assigned to this observation. */
  identifier?: Identifier[];
  /** The assessment made based on the result of the observation.  Intended as a simple compact code often placed adjacent to the result value in reports and flow sheets to signal the meaning/normalcy status of the result. Otherwise known as abnormal flag. */
  interpretation?: CodeableConcept;
  /** The date and time this observation was made available to providers, typically after the results have been reviewed and verified. */
  issued?: instant;
  /** Indicates the mechanism used to perform the observation. */
  method?: CodeableConcept;
  /** Who was responsible for asserting the observed value as "true". */
  performer?: Reference[];
  /** Guidance on how to interpret the value by comparison to a normal or recommended range. */
  referenceRange?: ObservationReferenceRange[];
  /** A  reference to another resource (usually another Observation) whose relationship is defined by the relationship type code. */
  related?: ObservationRelated[];
  /** The specimen that was used when this observation was made. */
  specimen?: Reference;
  /** The status of the result value. */
  status: ObservationStatus;
  /** The patient, or group of patients, location, or device whose characteristics (direct or indirect) are described by the observation and into whose record the observation is placed.  Comments: Indirect characteristics may be those of a specimen, fetus, donor,  other observer (for example a relative or EMT), or any observation made about the subject. */
  subject?: Reference;
  valueAttachment?: Attachment;
  valueBoolean?: boolean;
  valueCodeableConcept?: CodeableConcept;
  valueDateTime?: dateTime;
  valuePeriod?: Period;
  valueQuantity?: Quantity;
  valueRange?: Range;
  valueRatio?: Ratio;
  valueSampledData?: SampledData;
  valueString?: string;
  valueTime?: time;
}
export interface Observation extends _Observation {
  constructor: { new (): Observation };
}
export var Observation: { new (): Observation };

/** Measurements and simple assertions made about a patient, device or other subject. */
interface _ObservationComponent extends _BackboneElement {
  /** Describes what was observed. Sometimes this is called the observation "code". */
  code: CodeableConcept;
  /** Provides a reason why the expected value in the element Observation.value[x] is missing. */
  dataAbsentReason?: CodeableConcept;
  /** The assessment made based on the result of the observation.  Intended as a simple compact code often placed adjacent to the result value in reports and flow sheets to signal the meaning/normalcy status of the result. Otherwise known as abnormal flag. */
  interpretation?: CodeableConcept;
  /** Guidance on how to interpret the value by comparison to a normal or recommended range. */
  referenceRange?: ObservationReferenceRange[];
  valueAttachment?: Attachment;
  valueCodeableConcept?: CodeableConcept;
  valueDateTime?: dateTime;
  valuePeriod?: Period;
  valueQuantity?: Quantity;
  valueRange?: Range;
  valueRatio?: Ratio;
  valueSampledData?: SampledData;
  valueString?: string;
  valueTime?: time;
}
export interface ObservationComponent extends _ObservationComponent {
  constructor: { new (): ObservationComponent };
}
export var ObservationComponent: { new (): ObservationComponent };

/** Measurements and simple assertions made about a patient, device or other subject. */
interface _ObservationReferenceRange extends _BackboneElement {
  /** The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so. */
  age?: Range;
  /** Codes to indicate the target population this reference range applies to.  For example, a reference range may be based on the normal population or a particular sex or race. */
  appliesTo?: CodeableConcept[];
  /** The value of the high bound of the reference range.  The high bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9).   If the high bound is omitted,  it is assumed to be meaningless (e.g. reference range is >= 2.3). */
  high?: Quantity;
  /** The value of the low bound of the reference range.  The low bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9).   If the low bound is omitted,  it is assumed to be meaningless (e.g. reference range is <=2.3). */
  low?: Quantity;
  /** Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation.  An example would be a reference value of "Negative" or a list or table of 'normals'. */
  text?: string;
  /** Codes to indicate the what part of the targeted reference population it applies to. For example, the normal or therapeutic range. */
  type?: CodeableConcept;
}
export interface ObservationReferenceRange extends _ObservationReferenceRange {
  constructor: { new (): ObservationReferenceRange };
}
export var ObservationReferenceRange: { new (): ObservationReferenceRange };

/** Measurements and simple assertions made about a patient, device or other subject. */
interface _ObservationRelated extends _BackboneElement {
  /** A reference to the observation or [[[QuestionnaireResponse]]] resource that is related to this observation. */
  target: Reference;
  /** A code specifying the kind of relationship that exists with the target resource. */
  type?: ObservationRelationshipType;
}
export interface ObservationRelated extends _ObservationRelated {
  constructor: { new (): ObservationRelated };
}
export var ObservationRelated: { new (): ObservationRelated };

/** Codes specifying how two observations are related.If the element is present, it must have either a @value, an @id, or extensions */
interface _ObservationRelationshipType extends _Element {
  value?: ObservationRelationshipTypeList;
}
export interface ObservationRelationshipType extends _ObservationRelationshipType {
  constructor: { new (): ObservationRelationshipType };
}
export var ObservationRelationshipType: { new (): ObservationRelationshipType };

export type ObservationRelationshipTypeList = 'has-member' | 'derived-from' | 'sequel-to' | 'replaces' | 'qualified-by' | 'interfered-by';
interface _ObservationRelationshipTypeList extends _codePrimitive {
  content: ObservationRelationshipTypeList;
}

/** Indicates the status of the identified issueIf the element is present, it must have either a @value, an @id, or extensions */
interface _ObservationStatus extends _Element {
  value?: ObservationStatusList;
}
export interface ObservationStatus extends _ObservationStatus {
  constructor: { new (): ObservationStatus };
}
export var ObservationStatus: { new (): ObservationStatus };

export type ObservationStatusList =
  | 'registered'
  | 'preliminary'
  | 'final'
  | 'amended'
  | 'corrected'
  | 'cancelled'
  | 'entered-in-error'
  | 'unknown';
interface _ObservationStatusList extends _codePrimitive {
  content: ObservationStatusList;
}

/** An OID represented as a URIRFC 3001. See also ISO/IEC 8824:1990 €If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions */
interface _oid extends _Element {
  value: string;
}
export interface oid extends _oid {
  constructor: { new (): oid };
}
export var oid: { new (): oid };

export type oidPrimitive = string;
type _oidPrimitive = Primitive._string;

/** A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).If the element is present, it must have either a @value, an @id, or extensions */
interface _OperationDefinition extends _DomainResource {
  /** Indicates that this operation definition is a constraining profile on the base. */
  base?: Reference;
  /** The name used to invoke the operation. */
  code: code;
  /** Additional information about how to use this operation or named query. */
  comment?: string;
  /** Contact details to assist a user in finding and communicating with the publisher. */
  contact?: ContactDetail[];
  /** The date  (and optionally time) when the operation definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the operation definition changes. */
  date?: dateTime;
  /** A free text natural language description of the operation definition from a consumer's perspective. */
  description?: markdown;
  /** A boolean value to indicate that this operation definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage. */
  experimental?: boolean;
  /** Operations that are idempotent (see [HTTP specification definition of idempotent](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html)) may be invoked by performing an HTTP GET operation instead of a POST. */
  idempotent?: boolean;
  /** Indicates whether this operation can be invoked on a particular instance of one of the given types. */
  instance: boolean;
  /** A legal or geographic region in which the operation definition is intended to be used. */
  jurisdiction?: CodeableConcept[];
  /** Whether this is an operation or a named query. */
  kind: OperationKind;
  /** A natural language name identifying the operation definition. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
  name: string;
  /** Defines an appropriate combination of parameters to use when invoking this operation, to help code generators when generating overloaded parameter sets for this operation. */
  overload?: OperationDefinitionOverload[];
  /** The parameters for the operation/query. */
  parameter?: OperationDefinitionParameter[];
  /** The name of the individual or organization that published the operation definition. */
  publisher?: string;
  /** Explaination of why this operation definition is needed and why it has been designed as it has. */
  purpose?: markdown;
  /** The types on which this operation can be executed. */
  resource?: ResourceType[];
  /** The status of this operation definition. Enables tracking the life-cycle of the content. */
  status: PublicationStatus;
  /** Indicates whether this operation or named query can be invoked at the system level (e.g. without needing to choose a resource type for the context). */
  system: boolean;
  /** Indicates whether this operation or named query can be invoked at the resource type level for any given resource type level (e.g. without needing to choose a specific resource id for the context). */
  type: boolean;
  /** An absolute URI that is used to identify this operation definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this operation definition is (or will be) published. The URL SHOULD include the major version of the operation definition. For more information see [Technical and Business Versions](resource.html#versions). */
  url?: uri;
  /** The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate operation definition instances. */
  useContext?: UsageContext[];
  /** The identifier that is used to identify this version of the operation definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the operation definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
  version?: string;
}
export interface OperationDefinition extends _OperationDefinition {
  constructor: { new (): OperationDefinition };
}
export var OperationDefinition: { new (): OperationDefinition };

/** A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction). */
interface _OperationDefinitionBinding extends _BackboneElement {
  /** Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances. */
  strength: BindingStrength;
  valueSetReference: Reference;
  valueSetUri: uri;
}
export interface OperationDefinitionBinding extends _OperationDefinitionBinding {
  constructor: { new (): OperationDefinitionBinding };
}
export var OperationDefinitionBinding: { new (): OperationDefinitionBinding };

/** A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction). */
interface _OperationDefinitionOverload extends _BackboneElement {
  /** Comments to go on overload. */
  comment?: string;
  /** Name of parameter to include in overload. */
  parameterName?: string[];
}
export interface OperationDefinitionOverload extends _OperationDefinitionOverload {
  constructor: { new (): OperationDefinitionOverload };
}
export var OperationDefinitionOverload: { new (): OperationDefinitionOverload };

/** A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction). */
interface _OperationDefinitionParameter extends _BackboneElement {
  /** Binds to a value set if this parameter is coded (code, Coding, CodeableConcept). */
  binding?: OperationDefinitionBinding;
  /** Describes the meaning or use of this parameter. */
  documentation?: string;
  /** The maximum number of times this element is permitted to appear in the request or response. */
  max: string;
  /** The minimum number of times this parameter SHALL appear in the request or response. */
  min: integer;
  /** The name of used to identify the parameter. */
  name: code;
  /** The parts of a nested Parameter. */
  part?: OperationDefinitionParameter[];
  /** A profile the specifies the rules that this parameter must conform to. */
  profile?: Reference;
  /** How the parameter is understood as a search parameter. This is only used if the parameter type is 'string'. */
  searchType?: SearchParamType;
  /** The type for this parameter. */
  type?: FHIRAllTypes;
  /** Whether this is an input or an output parameter. */
  use: OperationParameterUse;
}
export interface OperationDefinitionParameter extends _OperationDefinitionParameter {
  constructor: { new (): OperationDefinitionParameter };
}
export var OperationDefinitionParameter: { new (): OperationDefinitionParameter };

/** Whether an operation is a normal operation or a query.If the element is present, it must have either a @value, an @id, or extensions */
interface _OperationKind extends _Element {
  value?: OperationKindList;
}
export interface OperationKind extends _OperationKind {
  constructor: { new (): OperationKind };
}
export var OperationKind: { new (): OperationKind };

export type OperationKindList = 'operation' | 'query';
interface _OperationKindList extends _codePrimitive {
  content: OperationKindList;
}

/** A collection of error, warning or information messages that result from a system action.If the element is present, it must have either a @value, an @id, or extensions */
interface _OperationOutcome extends _DomainResource {
  /** An error, warning or information message that results from a system action. */
  issue: OperationOutcomeIssue[];
}
export interface OperationOutcome extends _OperationOutcome {
  constructor: { new (): OperationOutcome };
}
export var OperationOutcome: { new (): OperationOutcome };

/** A collection of error, warning or information messages that result from a system action. */
interface _OperationOutcomeIssue extends _BackboneElement {
  /** Describes the type of the issue. The system that creates an OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may additional provide its own code for the error in the details element. */
  code: IssueType;
  /** Additional details about the error. This may be a text description of the error, or a system code that identifies the error. */
  details?: CodeableConcept;
  /** Additional diagnostic information about the issue.  Typically, this may be a description of how a value is erroneous, or a stack dump to help trace the issue. */
  diagnostics?: string;
  /** A simple FHIRPath limited to element names, repetition indicators and the default child access that identifies one of the elements in the resource that caused this issue to be raised. */
  expression?: string[];
  /** For resource issues, this will be a simple XPath limited to element names, repetition indicators and the default child access that identifies one of the elements in the resource that caused this issue to be raised.  For HTTP errors, will be "http." + the parameter name. */
  location?: string[];
  /** Indicates whether the issue indicates a variation from successful processing. */
  severity: IssueSeverity;
}
export interface OperationOutcomeIssue extends _OperationOutcomeIssue {
  constructor: { new (): OperationOutcomeIssue };
}
export var OperationOutcomeIssue: { new (): OperationOutcomeIssue };

/** Whether an operation parameter is an input or an output parameter.If the element is present, it must have either a @value, an @id, or extensions */
interface _OperationParameterUse extends _Element {
  value?: OperationParameterUseList;
}
export interface OperationParameterUse extends _OperationParameterUse {
  constructor: { new (): OperationParameterUse };
}
export var OperationParameterUse: { new (): OperationParameterUse };

export type OperationParameterUseList = 'in' | 'out';
interface _OperationParameterUseList extends _codePrimitive {
  content: OperationParameterUseList;
}

/** A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, etc.If the element is present, it must have either a @value, an @id, or extensions */
interface _Organization extends _DomainResource {
  /** Whether the organization's record is still in active use. */
  active?: boolean;
  /** An address for the organization. */
  address?: Address[];
  /** A list of alternate names that the organization is known as, or was known as in the past. */
  alias?: string[];
  /** Contact for the organization for a certain purpose. */
  contact?: OrganizationContact[];
  /** Technical endpoints providing access to services operated for the organization. */
  endpoint?: Reference[];
  /** Identifier for the organization that is used to identify the organization across multiple disparate systems. */
  identifier?: Identifier[];
  /** A name associated with the organization. */
  name?: string;
  /** The organization of which this organization forms a part. */
  partOf?: Reference;
  /** A contact detail for the organization. */
  telecom?: ContactPoint[];
  /** The kind(s) of organization that this is. */
  type?: CodeableConcept[];
}
export interface Organization extends _Organization {
  constructor: { new (): Organization };
}
export var Organization: { new (): Organization };

/** A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, etc. */
interface _OrganizationContact extends _BackboneElement {
  /** Visiting or postal addresses for the contact. */
  address?: Address;
  /** A name associated with the contact. */
  name?: HumanName;
  /** Indicates a purpose for which the contact can be reached. */
  purpose?: CodeableConcept;
  /** A contact detail (e.g. a telephone number or an email address) by which the party may be contacted. */
  telecom?: ContactPoint[];
}
export interface OrganizationContact extends _OrganizationContact {
  constructor: { new (): OrganizationContact };
}
export var OrganizationContact: { new (): OrganizationContact };

/** The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _ParameterDefinition extends _Element {
  /** A brief discussion of what the parameter is for and how it is used by the module. */
  documentation?: string;
  /** The maximum number of times this element is permitted to appear in the request or response. */
  max?: string;
  /** The minimum number of times this parameter SHALL appear in the request or response. */
  min?: integer;
  /** The name of the parameter used to allow access to the value of the parameter in evaluation contexts. */
  name?: code;
  /** If specified, this indicates a profile that the input data must conform to, or that the output data will conform to. */
  profile?: Reference;
  /** The type of the parameter. */
  type: code;
  /** Whether the parameter is input or output for the module. */
  use: code;
}
export interface ParameterDefinition extends _ParameterDefinition {
  constructor: { new (): ParameterDefinition };
}
export var ParameterDefinition: { new (): ParameterDefinition };

/** This special resource type is used to represent an operation request and response (operations.html). It has no other use, and there is no RESTful endpoint associated with it.If the element is present, it must have either a @value, an @id, or extensions */
interface _Parameters extends _Resource {
  /** A parameter passed to or received from the operation. */
  parameter?: ParametersParameter[];
}
export interface Parameters extends _Parameters {
  constructor: { new (): Parameters };
}
export var Parameters: { new (): Parameters };

/** This special resource type is used to represent an operation request and response (operations.html). It has no other use, and there is no RESTful endpoint associated with it. */
interface _ParametersParameter extends _BackboneElement {
  /** The name of the parameter (reference to the operation definition). */
  name: string;
  /** A named part of a multi-part parameter. */
  part?: ParametersParameter[];
  /** If the parameter is a whole resource. */
  resource?: ResourceContainer;
  valueAddress?: Address;
  valueAge?: Age;
  valueAnnotation?: Annotation;
  valueAttachment?: Attachment;
  valueBase64Binary?: base64Binary;
  valueBoolean?: boolean;
  valueCode?: code;
  valueCodeableConcept?: CodeableConcept;
  valueCoding?: Coding;
  valueContactPoint?: ContactPoint;
  valueCount?: Count;
  valueDate?: date;
  valueDateTime?: dateTime;
  valueDecimal?: decimal;
  valueDistance?: Distance;
  valueDuration?: Duration;
  valueHumanName?: HumanName;
  valueId?: id;
  valueIdentifier?: Identifier;
  valueInstant?: instant;
  valueInteger?: integer;
  valueMarkdown?: markdown;
  valueMeta?: Meta;
  valueMoney?: Money;
  valueOid?: oid;
  valuePeriod?: Period;
  valuePositiveInt?: positiveInt;
  valueQuantity?: Quantity;
  valueRange?: Range;
  valueRatio?: Ratio;
  valueReference?: Reference;
  valueSampledData?: SampledData;
  valueSignature?: Signature;
  valueString?: string;
  valueTime?: time;
  valueTiming?: Timing;
  valueUnsignedInt?: unsignedInt;
  valueUri?: uri;
}
export interface ParametersParameter extends _ParametersParameter {
  constructor: { new (): ParametersParameter };
}
export var ParametersParameter: { new (): ParametersParameter };

/** Is the Participant required to attend the appointment.If the element is present, it must have either a @value, an @id, or extensions */
interface _ParticipantRequired extends _Element {
  value?: ParticipantRequiredList;
}
export interface ParticipantRequired extends _ParticipantRequired {
  constructor: { new (): ParticipantRequired };
}
export var ParticipantRequired: { new (): ParticipantRequired };

export type ParticipantRequiredList = 'required' | 'optional' | 'information-only';
interface _ParticipantRequiredList extends _codePrimitive {
  content: ParticipantRequiredList;
}

/** The Participation status of an appointment.If the element is present, it must have either a @value, an @id, or extensions */
interface _ParticipationStatus extends _Element {
  value?: ParticipationStatusList;
}
export interface ParticipationStatus extends _ParticipationStatus {
  constructor: { new (): ParticipationStatus };
}
export var ParticipationStatus: { new (): ParticipationStatus };

export type ParticipationStatusList = 'accepted' | 'declined' | 'tentative' | 'needs-action';
interface _ParticipationStatusList extends _codePrimitive {
  content: ParticipationStatusList;
}

/** Demographics and other administrative information about an individual or animal receiving care or other health-related services.If the element is present, it must have either a @value, an @id, or extensions */
interface _Patient extends _DomainResource {
  /** Whether this patient record is in active use. */
  active?: boolean;
  /** Addresses for the individual. */
  address?: Address[];
  /** This patient is known to be an animal. */
  animal?: PatientAnimal;
  /** The date of birth for the individual. */
  birthDate?: date;
  /** Languages which may be used to communicate with the patient about his or her health. */
  communication?: PatientCommunication[];
  /** A contact party (e.g. guardian, partner, friend) for the patient. */
  contact?: PatientContact[];
  deceasedBoolean?: boolean;
  deceasedDateTime?: dateTime;
  /** Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes. */
  gender?: AdministrativeGender;
  /** Patient's nominated care provider. */
  generalPractitioner?: Reference[];
  /** An identifier for this patient. */
  identifier?: Identifier[];
  /** Link to another patient resource that concerns the same actual patient. */
  link?: PatientLink[];
  /** Organization that is the custodian of the patient record. */
  managingOrganization?: Reference;
  /** This field contains a patient's most recent marital (civil) status. */
  maritalStatus?: CodeableConcept;
  multipleBirthBoolean?: boolean;
  multipleBirthInteger?: integer;
  /** A name associated with the individual. */
  name?: HumanName[];
  /** Image of the patient. */
  photo?: Attachment[];
  /** A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted. */
  telecom?: ContactPoint[];
}
export interface Patient extends _Patient {
  constructor: { new (): Patient };
}
export var Patient: { new (): Patient };

/** Demographics and other administrative information about an individual or animal receiving care or other health-related services. */
interface _PatientAnimal extends _BackboneElement {
  /** Identifies the detailed categorization of the kind of animal. */
  breed?: CodeableConcept;
  /** Indicates the current state of the animal's reproductive organs. */
  genderStatus?: CodeableConcept;
  /** Identifies the high level taxonomic categorization of the kind of animal. */
  species: CodeableConcept;
}
export interface PatientAnimal extends _PatientAnimal {
  constructor: { new (): PatientAnimal };
}
export var PatientAnimal: { new (): PatientAnimal };

/** Demographics and other administrative information about an individual or animal receiving care or other health-related services. */
interface _PatientCommunication extends _BackboneElement {
  /** The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-EN" for England English. */
  language: CodeableConcept;
  /** Indicates whether or not the patient prefers this language (over other languages he masters up a certain level). */
  preferred?: boolean;
}
export interface PatientCommunication extends _PatientCommunication {
  constructor: { new (): PatientCommunication };
}
export var PatientCommunication: { new (): PatientCommunication };

/** Demographics and other administrative information about an individual or animal receiving care or other health-related services. */
interface _PatientContact extends _BackboneElement {
  /** Address for the contact person. */
  address?: Address;
  /** Administrative Gender - the gender that the contact person is considered to have for administration and record keeping purposes. */
  gender?: AdministrativeGender;
  /** A name associated with the contact person. */
  name?: HumanName;
  /** Organization on behalf of which the contact is acting or for which the contact is working. */
  organization?: Reference;
  /** The period during which this contact person or organization is valid to be contacted relating to this patient. */
  period?: Period;
  /** The nature of the relationship between the patient and the contact person. */
  relationship?: CodeableConcept[];
  /** A contact detail for the person, e.g. a telephone number or an email address. */
  telecom?: ContactPoint[];
}
export interface PatientContact extends _PatientContact {
  constructor: { new (): PatientContact };
}
export var PatientContact: { new (): PatientContact };

/** Demographics and other administrative information about an individual or animal receiving care or other health-related services. */
interface _PatientLink extends _BackboneElement {
  /** The other patient resource that the link refers to. */
  other: Reference;
  /** The type of link between this patient resource and another patient resource. */
  type: LinkType;
}
export interface PatientLink extends _PatientLink {
  constructor: { new (): PatientLink };
}
export var PatientLink: { new (): PatientLink };

/** This resource provides the status of the payment for goods and services rendered, and the request and response resource references.If the element is present, it must have either a @value, an @id, or extensions */
interface _PaymentNotice extends _DomainResource {
  /** The date when this resource was created. */
  created?: dateTime;
  /** The notice business identifier. */
  identifier?: Identifier[];
  /** The organization which is responsible for the services rendered to the patient. */
  organization?: Reference;
  /** The payment status, typically paid: payment sent, cleared: payment received. */
  paymentStatus?: CodeableConcept;
  /** The practitioner who is responsible for the services rendered to the patient. */
  provider?: Reference;
  /** Reference of resource for which payment is being made. */
  request?: Reference;
  /** Reference of response to resource for which payment is being made. */
  response?: Reference;
  /** The status of the resource instance. */
  status?: FinancialResourceStatusCodes;
  /** The date when the above payment action occurrred. */
  statusDate?: date;
  /** The Insurer who is target  of the request. */
  target?: Reference;
}
export interface PaymentNotice extends _PaymentNotice {
  constructor: { new (): PaymentNotice };
}
export var PaymentNotice: { new (): PaymentNotice };

/** This resource provides payment details and claim references supporting a bulk payment.If the element is present, it must have either a @value, an @id, or extensions */
interface _PaymentReconciliation extends _DomainResource {
  /** The date when the enclosed suite of services were performed or completed. */
  created?: dateTime;
  /** List of individual settlement amounts and the corresponding transaction. */
  detail?: PaymentReconciliationDetail[];
  /** A description of the status of the adjudication. */
  disposition?: string;
  /** The form to be used for printing the content. */
  form?: CodeableConcept;
  /** The Response business identifier. */
  identifier?: Identifier[];
  /** The Insurer who produced this adjudicated response. */
  organization?: Reference;
  /** Transaction status: error, complete. */
  outcome?: CodeableConcept;
  /** The period of time for which payments have been gathered into this bulk payment for settlement. */
  period?: Period;
  /** Suite of notes. */
  processNote?: PaymentReconciliationProcessNote[];
  /** Original request resource reference. */
  request?: Reference;
  /** The organization which is responsible for the services rendered to the patient. */
  requestOrganization?: Reference;
  /** The practitioner who is responsible for the services rendered to the patient. */
  requestProvider?: Reference;
  /** The status of the resource instance. */
  status?: FinancialResourceStatusCodes;
  /** Total payment amount. */
  total?: Money;
}
export interface PaymentReconciliation extends _PaymentReconciliation {
  constructor: { new (): PaymentReconciliation };
}
export var PaymentReconciliation: { new (): PaymentReconciliation };

/** This resource provides payment details and claim references supporting a bulk payment. */
interface _PaymentReconciliationDetail extends _BackboneElement {
  /** Amount paid for this detail. */
  amount?: Money;
  /** The date of the invoice or financial resource. */
  date?: date;
  /** The organization which is receiving the payment. */
  payee?: Reference;
  /** The claim or financial resource. */
  request?: Reference;
  /** The claim response resource. */
  response?: Reference;
  /** The Organization which submitted the claim or financial transaction. */
  submitter?: Reference;
  /** Code to indicate the nature of the payment, adjustment, funds advance, etc. */
  type: CodeableConcept;
}
export interface PaymentReconciliationDetail extends _PaymentReconciliationDetail {
  constructor: { new (): PaymentReconciliationDetail };
}
export var PaymentReconciliationDetail: { new (): PaymentReconciliationDetail };

/** This resource provides payment details and claim references supporting a bulk payment. */
interface _PaymentReconciliationProcessNote extends _BackboneElement {
  /** The note text. */
  text?: string;
  /** The note purpose: Print/Display. */
  type?: CodeableConcept;
}
export interface PaymentReconciliationProcessNote extends _PaymentReconciliationProcessNote {
  constructor: { new (): PaymentReconciliationProcessNote };
}
export var PaymentReconciliationProcessNote: { new (): PaymentReconciliationProcessNote };

/** A time period defined by a start and end date and optionally time.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _Period extends _Element {
  /** The end of the period. If the end of the period is missing, it means that the period is ongoing. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time. */
  end?: dateTime;
  /** The start of the period. The boundary is inclusive. */
  start?: dateTime;
}
export interface Period extends _Period {
  constructor: { new (): Period };
}
export var Period: { new (): Period };

/** Demographics and administrative information about a person independent of a specific health-related context.If the element is present, it must have either a @value, an @id, or extensions */
interface _Person extends _DomainResource {
  /** Whether this person's record is in active use. */
  active?: boolean;
  /** One or more addresses for the person. */
  address?: Address[];
  /** The birth date for the person. */
  birthDate?: date;
  /** Administrative Gender. */
  gender?: AdministrativeGender;
  /** Identifier for a person within a particular scope. */
  identifier?: Identifier[];
  /** Link to a resource that concerns the same actual person. */
  link?: PersonLink[];
  /** The organization that is the custodian of the person record. */
  managingOrganization?: Reference;
  /** A name associated with the person. */
  name?: HumanName[];
  /** An image that can be displayed as a thumbnail of the person to enhance the identification of the individual. */
  photo?: Attachment;
  /** A contact detail for the person, e.g. a telephone number or an email address. */
  telecom?: ContactPoint[];
}
export interface Person extends _Person {
  constructor: { new (): Person };
}
export var Person: { new (): Person };

/** Demographics and administrative information about a person independent of a specific health-related context. */
interface _PersonLink extends _BackboneElement {
  /** Level of assurance that this link is actually associated with the target resource. */
  assurance?: IdentityAssuranceLevel;
  /** The resource to which this actual person is associated. */
  target: Reference;
}
export interface PersonLink extends _PersonLink {
  constructor: { new (): PersonLink };
}
export var PersonLink: { new (): PersonLink };

/** This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.If the element is present, it must have either a @value, an @id, or extensions */
interface _PlanDefinition extends _DomainResource {
  /** An action to be taken as part of the plan. */
  action?: PlanDefinitionAction[];
  /** The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
  approvalDate?: date;
  /** Contact details to assist a user in finding and communicating with the publisher. */
  contact?: ContactDetail[];
  /** A contributor to the content of the asset, including authors, editors, reviewers, and endorsers. */
  contributor?: Contributor[];
  /** A copyright statement relating to the plan definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the plan definition. */
  copyright?: markdown;
  /** The date  (and optionally time) when the plan definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the plan definition changes. */
  date?: dateTime;
  /** A free text natural language description of the plan definition from a consumer's perspective. */
  description?: markdown;
  /** The period during which the plan definition content was or is planned to be in active use. */
  effectivePeriod?: Period;
  /** A boolean value to indicate that this plan definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage. */
  experimental?: boolean;
  /** Goals that describe what the activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc. */
  goal?: PlanDefinitionGoal[];
  /** A formal identifier that is used to identify this plan definition when it is represented in other formats, or referenced in a specification, model, design or an instance. */
  identifier?: Identifier[];
  /** A legal or geographic region in which the plan definition is intended to be used. */
  jurisdiction?: CodeableConcept[];
  /** The date on which the resource content was last reviewed. Review happens periodically after approval, but doesn't change the original approval date. */
  lastReviewDate?: date;
  /** A reference to a Library resource containing any formal logic used by the plan definition. */
  library?: Reference[];
  /** A natural language name identifying the plan definition. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
  name?: string;
  /** The name of the individual or organization that published the plan definition. */
  publisher?: string;
  /** Explaination of why this plan definition is needed and why it has been designed as it has. */
  purpose?: markdown;
  /** Related artifacts such as additional documentation, justification, or bibliographic references. */
  relatedArtifact?: RelatedArtifact[];
  /** The status of this plan definition. Enables tracking the life-cycle of the content. */
  status: PublicationStatus;
  /** A short, descriptive, user-friendly title for the plan definition. */
  title?: string;
  /** Descriptive topics related to the content of the plan definition. Topics provide a high-level categorization of the definition that can be useful for filtering and searching. */
  topic?: CodeableConcept[];
  /** The type of asset the plan definition represents, e.g. an order set, protocol, or event-condition-action rule. */
  type?: CodeableConcept;
  /** An absolute URI that is used to identify this plan definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this plan definition is (or will be) published. The URL SHOULD include the major version of the plan definition. For more information see [Technical and Business Versions](resource.html#versions). */
  url?: uri;
  /** A detailed description of how the asset is used from a clinical perspective. */
  usage?: string;
  /** The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate plan definition instances. */
  useContext?: UsageContext[];
  /** The identifier that is used to identify this version of the plan definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the plan definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts. */
  version?: string;
}
export interface PlanDefinition extends _PlanDefinition {
  constructor: { new (): PlanDefinition };
}
export var PlanDefinition: { new (): PlanDefinition };

/** This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols. */
interface _PlanDefinitionAction extends _BackboneElement {
  /** Sub actions that are contained within the action. The behavior of this action determines the functionality of the sub-actions. For example, a selection behavior of at-most-one indicates that of the sub-actions, at most one may be chosen as part of realizing the action definition. */
  action?: PlanDefinitionAction[];
  /** Defines whether the action can be selected multiple times. */
  cardinalityBehavior?: ActionCardinalityBehavior;
  /** A code that provides meaning for the action or action group. For example, a section may have a LOINC code for a the section of a documentation template. */
  code?: CodeableConcept[];
  /** An expression that describes applicability criteria, or start/stop conditions for the action. */
  condition?: PlanDefinitionCondition[];
  /** A reference to an ActivityDefinition that describes the action to be taken in detail, or a PlanDefinition that describes a series of actions to be taken. */
  definition?: Reference;
  /** A short description of the action used to provide a summary to display to the user. */
  description?: string;
  /** Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources. */
  documentation?: RelatedArtifact[];
  /** Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result. */
  dynamicValue?: PlanDefinitionDynamicValue[];
  /** Identifies goals that this action supports. The reference must be to a goal element defined within this plan definition. */
  goalId?: id[];
  /** Defines the grouping behavior for the action and its children. */
  groupingBehavior?: ActionGroupingBehavior;
  /** Defines input data requirements for the action. */
  input?: DataRequirement[];
  /** A user-visible label for the action. */
  label?: string;
  /** Defines the outputs of the action, if any. */
  output?: DataRequirement[];
  /** Indicates who should participate in performing the action described. */
  participant?: PlanDefinitionParticipant[];
  /** Defines whether the action should usually be preselected. */
  precheckBehavior?: ActionPrecheckBehavior;
  /** A description of why this action is necessary or appropriate. */
  reason?: CodeableConcept[];
  /** A relationship to another action such as "before" or "30-60 minutes after start of". */
  relatedAction?: PlanDefinitionRelatedAction[];
  /** Defines the requiredness behavior for the action. */
  requiredBehavior?: ActionRequiredBehavior;
  /** Defines the selection behavior for the action and its children. */
  selectionBehavior?: ActionSelectionBehavior;
  /** A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that may not be capable of interpreting it dynamically. */
  textEquivalent?: string;
  timingDateTime?: dateTime;
  timingDuration?: Duration;
  timingPeriod?: Period;
  timingRange?: Range;
  timingTiming?: Timing;
  /** The title of the action displayed to a user. */
  title?: string;
  /** A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input. */
  transform?: Reference;
  /** A description of when the action should be triggered. */
  triggerDefinition?: TriggerDefinition[];
  /** The type of action to perform (create, update, remove). */
  type?: Coding;
}
export interface PlanDefinitionAction extends _PlanDefinitionAction {
  constructor: { new (): PlanDefinitionAction };
}
export var PlanDefinitionAction: { new (): PlanDefinitionAction };

/** This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols. */
interface _PlanDefinitionCondition extends _BackboneElement {
  /** A brief, natural language description of the condition that effectively communicates the intended semantics. */
  description?: string;
  /** An expression that returns true or false, indicating whether or not the condition is satisfied. */
  expression?: string;
  /** The kind of condition. */
  kind: ActionConditionKind;
  /** The media type of the language for the expression. */
  language?: string;
}
export interface PlanDefinitionCondition extends _PlanDefinitionCondition {
  constructor: { new (): PlanDefinitionCondition };
}
export var PlanDefinitionCondition: { new (): PlanDefinitionCondition };

/** This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols. */
interface _PlanDefinitionDynamicValue extends _BackboneElement {
  /** A brief, natural language description of the intended semantics of the dynamic value. */
  description?: string;
  /** An expression specifying the value of the customized element. */
  expression?: string;
  /** The media type of the language for the expression. */
  language?: string;
  /** The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression. */
  path?: string;
}
export interface PlanDefinitionDynamicValue extends _PlanDefinitionDynamicValue {
  constructor: { new (): PlanDefinitionDynamicValue };
}
export var PlanDefinitionDynamicValue: { new (): PlanDefinitionDynamicValue };

/** This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols. */
interface _PlanDefinitionGoal extends _BackboneElement {
  /** Identifies problems, conditions, issues, or concerns the goal is intended to address. */
  addresses?: CodeableConcept[];
  /** Indicates a category the goal falls within. */
  category?: CodeableConcept;
  /** Human-readable and/or coded description of a specific desired objective of care, such as "control blood pressure" or "negotiate an obstacle course" or "dance with child at wedding". */
  description: CodeableConcept;
  /** Didactic or other informational resources associated with the goal that provide further supporting information about the goal. Information resources can include inline text commentary and links to web resources. */
  documentation?: RelatedArtifact[];
  /** Identifies the expected level of importance associated with reaching/sustaining the defined goal. */
  priority?: CodeableConcept;
  /** The event after which the goal should begin being pursued. */
  start?: CodeableConcept;
  /** Indicates what should be done and within what timeframe. */
  target?: PlanDefinitionTarget[];
}
export interface PlanDefinitionGoal extends _PlanDefinitionGoal {
  constructor: { new (): PlanDefinitionGoal };
}
export var PlanDefinitionGoal: { new (): PlanDefinitionGoal };

/** This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols. */
interface _PlanDefinitionParticipant extends _BackboneElement {
  /** The role the participant should play in performing the described action. */
  role?: CodeableConcept;
  /** The type of participant in the action. */
  type: ActionParticipantType;
}
export interface PlanDefinitionParticipant extends _PlanDefinitionParticipant {
  constructor: { new (): PlanDefinitionParticipant };
}
export var PlanDefinitionParticipant: { new (): PlanDefinitionParticipant };

/** This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols. */
interface _PlanDefinitionRelatedAction extends _BackboneElement {
  /** The element id of the related action. */
  actionId: id;
  offsetDuration?: Duration;
  offsetRange?: Range;
  /** The relationship of this action to the related action. */
  relationship: ActionRelationshipType;
}
export interface PlanDefinitionRelatedAction extends _PlanDefinitionRelatedAction {
  constructor: { new (): PlanDefinitionRelatedAction };
}
export var PlanDefinitionRelatedAction: { new (): PlanDefinitionRelatedAction };

/** This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols. */
interface _PlanDefinitionTarget extends _BackboneElement {
  detailCodeableConcept?: CodeableConcept;
  detailQuantity?: Quantity;
  detailRange?: Range;
  /** Indicates the timeframe after the start of the goal in which the goal should be met. */
  due?: Duration;
  /** The parameter whose value is to be tracked, e.g. body weigth, blood pressure, or hemoglobin A1c level. */
  measure?: CodeableConcept;
}
export interface PlanDefinitionTarget extends _PlanDefinitionTarget {
  constructor: { new (): PlanDefinitionTarget };
}
export var PlanDefinitionTarget: { new (): PlanDefinitionTarget };

/** An integer with a value that is positive (e.g. >0)If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions */
interface _positiveInt extends _Element {
  value: number;
}
export interface positiveInt extends _positiveInt {
  constructor: { new (): positiveInt };
}
export var positiveInt: { new (): positiveInt };

export type positiveIntPrimitive = number;
type _positiveIntPrimitive = Primitive._number;

/** A person who is directly or indirectly involved in the provisioning of healthcare.If the element is present, it must have either a @value, an @id, or extensions */
interface _Practitioner extends _DomainResource {
  /** Whether this practitioner's record is in active use. */
  active?: boolean;
  /** Address(es) of the practitioner that are not role specific (typically home address).
   * Work addresses are not typically entered in this property as they are usually role dependent. */
  address?: Address[];
  /** The date of birth for the practitioner. */
  birthDate?: date;
  /** A language the practitioner is able to use in patient communication. */
  communication?: CodeableConcept[];
  /** Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes. */
  gender?: AdministrativeGender;
  /** An identifier that applies to this person in this role. */
  identifier?: Identifier[];
  /** The name(s) associated with the practitioner. */
  name?: HumanName[];
  /** Image of the person. */
  photo?: Attachment[];
  /** Qualifications obtained by training and certification. */
  qualification?: PractitionerQualification[];
  /** A contact detail for the practitioner, e.g. a telephone number or an email address. */
  telecom?: ContactPoint[];
}
export interface Practitioner extends _Practitioner {
  constructor: { new (): Practitioner };
}
export var Practitioner: { new (): Practitioner };

/** A person who is directly or indirectly involved in the provisioning of healthcare. */
interface _PractitionerQualification extends _BackboneElement {
  /** Coded representation of the qualification. */
  code: CodeableConcept;
  /** An identifier that applies to this person's qualification in this role. */
  identifier?: Identifier[];
  /** Organization that regulates and issues the qualification. */
  issuer?: Reference;
  /** Period during which the qualification is valid. */
  period?: Period;
}
export interface PractitionerQualification extends _PractitionerQualification {
  constructor: { new (): PractitionerQualification };
}
export var PractitionerQualification: { new (): PractitionerQualification };

/** A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time.If the element is present, it must have either a @value, an @id, or extensions */
interface _PractitionerRole extends _DomainResource {
  /** Whether this practitioner's record is in active use. */
  active?: boolean;
  /** A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times. */
  availabilityExceptions?: string;
  /** A collection of times that the Service Site is available. */
  availableTime?: PractitionerRoleAvailableTime[];
  /** Roles which this practitioner is authorized to perform for the organization. */
  code?: CodeableConcept[];
  /** Technical endpoints providing access to services operated for the practitioner with this role. */
  endpoint?: Reference[];
  /** The list of healthcare services that this worker provides for this role's Organization/Location(s). */
  healthcareService?: Reference[];
  /** Business Identifiers that are specific to a role/location. */
  identifier?: Identifier[];
  /** The location(s) at which this practitioner provides care. */
  location?: Reference[];
  /** The HealthcareService is not available during this period of time due to the provided reason. */
  notAvailable?: PractitionerRoleNotAvailable[];
  /** The organization where the Practitioner performs the roles associated. */
  organization?: Reference;
  /** The period during which the person is authorized to act as a practitioner in these role(s) for the organization. */
  period?: Period;
  /** Practitioner that is able to provide the defined services for the organation. */
  practitioner?: Reference;
  /** Specific specialty of the practitioner. */
  specialty?: CodeableConcept[];
  /** Contact details that are specific to the role/location/service. */
  telecom?: ContactPoint[];
}
export interface PractitionerRole extends _PractitionerRole {
  constructor: { new (): PractitionerRole };
}
export var PractitionerRole: { new (): PractitionerRole };

/** A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time. */
interface _PractitionerRoleAvailableTime extends _BackboneElement {
  /** Is this always available? (hence times are irrelevant) e.g. 24 hour service. */
  allDay?: boolean;
  /** The closing time of day. Note: If the AllDay flag is set, then this time is ignored. */
  availableEndTime?: time;
  /** The opening time of day. Note: If the AllDay flag is set, then this time is ignored. */
  availableStartTime?: time;
  /** Indicates which days of the week are available between the start and end Times. */
  daysOfWeek?: DaysOfWeek[];
}
export interface PractitionerRoleAvailableTime extends _PractitionerRoleAvailableTime {
  constructor: { new (): PractitionerRoleAvailableTime };
}
export var PractitionerRoleAvailableTime: { new (): PractitionerRoleAvailableTime };

/** A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time. */
interface _PractitionerRoleNotAvailable extends _BackboneElement {
  /** The reason that can be presented to the user as to why this time is not available. */
  description: string;
  /** Service is not available (seasonally or for a public holiday) from this date. */
  during?: Period;
}
export interface PractitionerRoleNotAvailable extends _PractitionerRoleNotAvailable {
  constructor: { new (): PractitionerRoleNotAvailable };
}
export var PractitionerRoleNotAvailable: { new (): PractitionerRoleNotAvailable };

/** An action that is or was performed on a patient. This can be a physical intervention like an operation, or less invasive like counseling or hypnotherapy.If the element is present, it must have either a @value, an @id, or extensions */
interface _Procedure extends _DomainResource {
  /** A reference to a resource that contains details of the request for this procedure. */
  basedOn?: Reference[];
  /** Detailed and structured anatomical location information. Multiple locations are allowed - e.g. multiple punch biopsies of a lesion. */
  bodySite?: CodeableConcept[];
  /** A code that classifies the procedure for searching, sorting and display purposes (e.g. "Surgical Procedure"). */
  category?: CodeableConcept;
  /** The specific procedure that is performed. Use text if the exact nature of the procedure cannot be coded (e.g. "Laparoscopic Appendectomy"). */
  code?: CodeableConcept;
  /** Any complications that occurred during the procedure, or in the immediate post-performance period. These are generally tracked separately from the notes, which will typically describe the procedure itself rather than any 'post procedure' issues. */
  complication?: CodeableConcept[];
  /** Any complications that occurred during the procedure, or in the immediate post-performance period. */
  complicationDetail?: Reference[];
  /** The encounter during which the procedure was performed. */
  context?: Reference;
  /** A protocol, guideline, orderset or other definition that was adhered to in whole or in part by this procedure. */
  definition?: Reference[];
  /** A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure. */
  focalDevice?: ProcedureFocalDevice[];
  /** If the procedure required specific follow up - e.g. removal of sutures. The followup may be represented as a simple note, or could potentially be more complex in which case the CarePlan resource can be used. */
  followUp?: CodeableConcept[];
  /** This records identifiers associated with this procedure that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation). */
  identifier?: Identifier[];
  /** The location where the procedure actually happened.  E.g. a newborn at home, a tracheostomy at a restaurant. */
  location?: Reference;
  /** Set this to true if the record is saying that the procedure was NOT performed. */
  notDone?: boolean;
  /** A code indicating why the procedure was not performed. */
  notDoneReason?: CodeableConcept;
  /** Any other notes about the procedure.  E.g. the operative notes. */
  note?: Annotation[];
  /** The outcome of the procedure - did it resolve reasons for the procedure being performed? */
  outcome?: CodeableConcept;
  /** A larger event of which this particular procedure is a component or step. */
  partOf?: Reference[];
  performedDateTime?: dateTime;
  performedPeriod?: Period;
  /** Limited to 'real' people rather than equipment. */
  performer?: ProcedurePerformer[];
  /** The coded reason why the procedure was performed. This may be coded entity of some type, or may simply be present as text. */
  reasonCode?: CodeableConcept[];
  /** The condition that is the reason why the procedure was performed. */
  reasonReference?: Reference[];
  /** This could be a histology result, pathology report, surgical report, etc.. */
  report?: Reference[];
  /** A code specifying the state of the procedure. Generally this will be in-progress or completed state. */
  status: EventStatus;
  /** The person, animal or group on which the procedure was performed. */
  subject: Reference;
  /** Identifies coded items that were used as part of the procedure. */
  usedCode?: CodeableConcept[];
  /** Identifies medications, devices and any other substance used as part of the procedure. */
  usedReference?: Reference[];
}
export interface Procedure extends _Procedure {
  constructor: { new (): Procedure };
}
export var Procedure: { new (): Procedure };

/** An action that is or was performed on a patient. This can be a physical intervention like an operation, or less invasive like counseling or hypnotherapy. */
interface _ProcedureFocalDevice extends _BackboneElement {
  /** The kind of change that happened to the device during the procedure. */
  action?: CodeableConcept;
  /** The device that was manipulated (changed) during the procedure. */
  manipulated: Reference;
}
export interface ProcedureFocalDevice extends _ProcedureFocalDevice {
  constructor: { new (): ProcedureFocalDevice };
}
export var ProcedureFocalDevice: { new (): ProcedureFocalDevice };

/** An action that is or was performed on a patient. This can be a physical intervention like an operation, or less invasive like counseling or hypnotherapy. */
interface _ProcedurePerformer extends _BackboneElement {
  /** The practitioner who was involved in the procedure. */
  actor: Reference;
  /** The organization the device or practitioner was acting on behalf of. */
  onBehalfOf?: Reference;
  /** For example: surgeon, anaethetist, endoscopist. */
  role?: CodeableConcept;
}
export interface ProcedurePerformer extends _ProcedurePerformer {
  constructor: { new (): ProcedurePerformer };
}
export var ProcedurePerformer: { new (): ProcedurePerformer };

/** A record of a request for diagnostic investigations, treatments, or operations to be performed.If the element is present, it must have either a @value, an @id, or extensions */
interface _ProcedureRequest extends _DomainResource {
  asNeededBoolean?: boolean;
  asNeededCodeableConcept?: CodeableConcept;
  /** When the request transitioned to being actionable. */
  authoredOn?: dateTime;
  /** Plan/proposal/order fulfilled by this request. */
  basedOn?: Reference[];
  /** Anatomic location where the procedure should be performed. This is the target site. */
  bodySite?: CodeableConcept[];
  /** A code that classifies the procedure for searching, sorting and display purposes (e.g. "Surgical Procedure"). */
  category?: CodeableConcept[];
  /** A code that identifies a particular procedure, diagnostic investigation, or panel of investigations, that have been requested. */
  code: CodeableConcept;
  /** An encounter or episode of care that provides additional information about the healthcare context in which this request is made. */
  context?: Reference;
  /** Protocol or definition followed by this request. */
  definition?: Reference[];
  /** Set this to true if the record is saying that the procedure should NOT be performed. */
  doNotPerform?: boolean;
  /** Identifiers assigned to this order instance by the orderer and/or the receiver and/or order fulfiller. */
  identifier?: Identifier[];
  /** Whether the request is a proposal, plan, an original order or a reflex order. */
  intent: RequestIntent;
  /** Any other notes and comments made about the service request. For example, letting provider know that "patient hates needles" or other provider instructions. */
  note?: Annotation[];
  occurrenceDateTime?: dateTime;
  occurrencePeriod?: Period;
  occurrenceTiming?: Timing;
  /** The desired perfomer for doing the diagnostic testing.  For example, the surgeon, dermatopathologist, endoscopist, etc. */
  performer?: Reference;
  /** Desired type of performer for doing the diagnostic testing. */
  performerType?: CodeableConcept;
  /** Indicates how quickly the ProcedureRequest should be addressed with respect to other requests. */
  priority?: RequestPriority;
  /** An explanation or justification for why this diagnostic investigation is being requested in coded or textual form.   This is often for billing purposes.  May relate to the resources referred to in supportingInformation. */
  reasonCode?: CodeableConcept[];
  /** Indicates another resource that provides a justification for why this diagnostic investigation is being requested.   May relate to the resources referred to in supportingInformation. */
  reasonReference?: Reference[];
  /** Key events in the history of the request. */
  relevantHistory?: Reference[];
  /** The request takes the place of the referenced completed or terminated request(s). */
  replaces?: Reference[];
  /** The individual who initiated the request and has responsibility for its activation. */
  requester?: ProcedureRequestRequester;
  /** A shared identifier common to all procedure or diagnostic requests that were authorized more or less simultaneously by a single author, representing the composite or group identifier. */
  requisition?: Identifier;
  /** One or more specimens that the laboratory procedure will use. */
  specimen?: Reference[];
  /** The status of the order. */
  status: RequestStatus;
  /** On whom or what the procedure or diagnostic is to be performed. This is usually a human patient, but can also be requested on animals, groups of humans or animals, devices such as dialysis machines, or even locations (typically for environmental scans). */
  subject: Reference;
  /** Additional clinical information about the patient or specimen that may influence the procedure or diagnostics or their interpretations.     This information includes diagnosis, clinical findings and other observations.  In laboratory ordering these are typically referred to as "ask at order entry questions (AOEs)".  This includes observations explicitly requested by the producer (filler) to provide context or supporting information needed to complete the order. For example,  reporting the amount of inspired oxygen for blood gas measurements. */
  supportingInfo?: Reference[];
}
export interface ProcedureRequest extends _ProcedureRequest {
  constructor: { new (): ProcedureRequest };
}
export var ProcedureRequest: { new (): ProcedureRequest };

/** A record of a request for diagnostic investigations, treatments, or operations to be performed. */
interface _ProcedureRequestRequester extends _BackboneElement {
  /** The device, practitioner or organization who initiated the request. */
  agent: Reference;
  /** The organization the device or practitioner was acting on behalf of. */
  onBehalfOf?: Reference;
}
export interface ProcedureRequestRequester extends _ProcedureRequestRequester {
  constructor: { new (): ProcedureRequestRequester };
}
export var ProcedureRequestRequester: { new (): ProcedureRequestRequester };

/** This resource provides the target, request and response, and action details for an action to be performed by the target on or about existing resources.If the element is present, it must have either a @value, an @id, or extensions */
interface _ProcessRequest extends _DomainResource {
  /** The type of processing action being requested, for example Reversal, Readjudication, StatusRequest,PendedRequest. */
  action?: ActionList;
  /** The date when this resource was created. */
  created?: dateTime;
  /** Names of resource types to exclude. */
  exclude?: string[];
  /** The ProcessRequest business identifier. */
  identifier?: Identifier[];
  /** Names of resource types to include. */
  include?: string[];
  /** List of top level items to be re-adjudicated, if none specified then the entire submission is re-adjudicated. */
  item?: ProcessRequestItem[];
  /** If true remove all history excluding audit. */
  nullify?: boolean;
  /** The organization which is responsible for the action speccified in this request. */
  organization?: Reference;
  /** A period of time during which the fulfilling resources would have been created. */
  period?: Period;
  /** The practitioner who is responsible for the action specified in this request. */
  provider?: Reference;
  /** A reference to supply which authenticates the process. */
  reference?: string;
  /** Reference of resource which is the target or subject of this action. */
  request?: Reference;
  /** Reference of a prior response to resource which is the target or subject of this action. */
  response?: Reference;
  /** The status of the resource instance. */
  status?: FinancialResourceStatusCodes;
  /** The organization which is the target of the request. */
  target?: Reference;
}
export interface ProcessRequest extends _ProcessRequest {
  constructor: { new (): ProcessRequest };
}
export var ProcessRequest: { new (): ProcessRequest };

/** This resource provides the target, request and response, and action details for an action to be performed by the target on or about existing resources. */
interface _ProcessRequestItem extends _BackboneElement {
  /** A service line number. */
  sequenceLinkId: integer;
}
export interface ProcessRequestItem extends _ProcessRequestItem {
  constructor: { new (): ProcessRequestItem };
}
export var ProcessRequestItem: { new (): ProcessRequestItem };

/** This resource provides processing status, errors and notes from the processing of a resource.If the element is present, it must have either a @value, an @id, or extensions */
interface _ProcessResponse extends _DomainResource {
  /** Request for additional supporting or authorizing information, such as: documents, images or resources. */
  communicationRequest?: Reference[];
  /** The date when the enclosed suite of services were performed or completed. */
  created?: dateTime;
  /** A description of the status of the adjudication or processing. */
  disposition?: string;
  /** Processing errors. */
  error?: CodeableConcept[];
  /** The form to be used for printing the content. */
  form?: CodeableConcept;
  /** The Response business identifier. */
  identifier?: Identifier[];
  /** The organization who produced this adjudicated response. */
  organization?: Reference;
  /** Transaction status: error, complete, held. */
  outcome?: CodeableConcept;
  /** Suite of processing notes or additional requirements if the processing has been held. */
  processNote?: ProcessResponseProcessNote[];
  /** Original request resource reference. */
  request?: Reference;
  /** The organization which is responsible for the services rendered to the patient. */
  requestOrganization?: Reference;
  /** The practitioner who is responsible for the services rendered to the patient. */
  requestProvider?: Reference;
  /** The status of the resource instance. */
  status?: FinancialResourceStatusCodes;
}
export interface ProcessResponse extends _ProcessResponse {
  constructor: { new (): ProcessResponse };
}
export var ProcessResponse: { new (): ProcessResponse };

/** This resource provides processing status, errors and notes from the processing of a resource. */
interface _ProcessResponseProcessNote extends _BackboneElement {
  /** The note text. */
  text?: string;
  /** The note purpose: Print/Display. */
  type?: CodeableConcept;
}
export interface ProcessResponseProcessNote extends _ProcessResponseProcessNote {
  constructor: { new (): ProcessResponseProcessNote };
}
export var ProcessResponseProcessNote: { new (): ProcessResponseProcessNote };

/** How a property is represented when serialized.If the element is present, it must have either a @value, an @id, or extensions */
interface _PropertyRepresentation extends _Element {
  value?: PropertyRepresentationList;
}
export interface PropertyRepresentation extends _PropertyRepresentation {
  constructor: { new (): PropertyRepresentation };
}
export var PropertyRepresentation: { new (): PropertyRepresentation };

export type PropertyRepresentationList = 'xmlAttr' | 'xmlText' | 'typeAttr' | 'cdaText' | 'xhtml';
interface _PropertyRepresentationList extends _codePrimitive {
  content: PropertyRepresentationList;
}

/** The type of a property valueIf the element is present, it must have either a @value, an @id, or extensions */
interface _PropertyType extends _Element {
  value?: PropertyTypeList;
}
export interface PropertyType extends _PropertyType {
  constructor: { new (): PropertyType };
}
export var PropertyType: { new (): PropertyType };

export type PropertyTypeList = 'code' | 'Coding' | 'string' | 'integer' | 'boolean' | 'dateTime';
interface _PropertyTypeList extends _codePrimitive {
  content: PropertyTypeList;
}

/** Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.If the element is present, it must have either a @value, an @id, or extensions */
interface _Provenance extends _DomainResource {
  /** An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities. */
  activity?: Coding;
  /** An actor taking a role in an activity  for which it can be assigned some degree of responsibility for the activity taking place. */
  agent: ProvenanceAgent[];
  /** An entity used in this activity. */
  entity?: ProvenanceEntity[];
  /** Where the activity occurred, if relevant. */
  location?: Reference;
  /** The period during which the activity occurred. */
  period?: Period;
  /** Policy or plan the activity was defined by. Typically, a single activity may have multiple applicable policy documents, such as patient consent, guarantor funding, etc. */
  policy?: uri[];
  /** The reason that the activity was taking place. */
  reason?: Coding[];
  /** The instant of time at which the activity was recorded. */
  recorded: instant;
  /** A digital signature on the target Reference(s). The signer should match a Provenance.agent. The purpose of the signature is indicated. */
  signature?: Signature[];
  /** The Reference(s) that were generated or updated by  the activity described in this resource. A provenance can point to more than one target if multiple resources were created/updated by the same activity. */
  target: Reference[];
}
export interface Provenance extends _Provenance {
  constructor: { new (): Provenance };
}
export var Provenance: { new (): Provenance };

/** Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies. */
interface _ProvenanceAgent extends _BackboneElement {
  onBehalfOfReference?: Reference;
  onBehalfOfUri?: uri;
  /** The type of relationship between agents. */
  relatedAgentType?: CodeableConcept;
  /** The function of the agent with respect to the activity. The security role enabling the agent with respect to the activity. */
  role?: CodeableConcept[];
  whoReference: Reference;
  whoUri: uri;
}
export interface ProvenanceAgent extends _ProvenanceAgent {
  constructor: { new (): ProvenanceAgent };
}
export var ProvenanceAgent: { new (): ProvenanceAgent };

/** Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies. */
interface _ProvenanceEntity extends _BackboneElement {
  /** The entity is attributed to an agent to express the agent's responsibility for that entity, possibly along with other agents. This description can be understood as shorthand for saying that the agent was responsible for the activity which generated the entity. */
  agent?: ProvenanceAgent[];
  /** How the entity was used during the activity. */
  role: ProvenanceEntityRole;
  whatIdentifier: Identifier;
  whatReference: Reference;
  whatUri: uri;
}
export interface ProvenanceEntity extends _ProvenanceEntity {
  constructor: { new (): ProvenanceEntity };
}
export var ProvenanceEntity: { new (): ProvenanceEntity };

/** How an entity was used in an activity.If the element is present, it must have either a @value, an @id, or extensions */
interface _ProvenanceEntityRole extends _Element {
  value?: ProvenanceEntityRoleList;
}
export interface ProvenanceEntityRole extends _ProvenanceEntityRole {
  constructor: { new (): ProvenanceEntityRole };
}
export var ProvenanceEntityRole: { new (): ProvenanceEntityRole };

export type ProvenanceEntityRoleList = 'derivation' | 'revision' | 'quotation' | 'source' | 'removal';
interface _ProvenanceEntityRoleList extends _codePrimitive {
  content: ProvenanceEntityRoleList;
}

/** If the element is present, it must have either a @value, an @id, or extensions */
interface _PublicationStatus extends _Element {
  value?: PublicationStatusList;
}
export interface PublicationStatus extends _PublicationStatus {}
export var PublicationStatus: { new (): PublicationStatus };

export type PublicationStatusList = 'draft' | 'active' | 'retired' | 'unknown';
interface _PublicationStatusList extends _codePrimitive {
  content: PublicationStatusList;
}

/** Type for quality reportIf the element is present, it must have either a @value, an @id, or extensions */
interface _qualityType extends _Element {
  value?: qualityTypeList;
}
export interface qualityType extends _qualityType {
  constructor: { new (): qualityType };
}
export var qualityType: { new (): qualityType };

export type qualityTypeList = 'indel' | 'snp' | 'unknown';
interface _qualityTypeList extends _codePrimitive {
  content: qualityTypeList;
}

/** A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _Quantity extends _Element {
  /** A computer processable form of the unit in some unit representation system. */
  code?: code;
  /** How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value. */
  comparator?: QuantityComparator;
  /** The identification of the system that provides the coded form of the unit. */
  system?: uri;
  /** A human-readable form of the unit. */
  unit?: string;
  /** The value of the measured amount. The value includes an implicit precision in the presentation of the value. */
  value?: decimal;
}
export interface Quantity extends _Quantity {
  constructor: { new (): Quantity };
}
export var Quantity: { new (): Quantity };

/** How the Quantity should be understood and represented.If the element is present, it must have either a @value, an @id, or extensions */
interface _QuantityComparator extends _Element {
  value?: QuantityComparatorList;
}
export interface QuantityComparator extends _QuantityComparator {
  constructor: { new (): QuantityComparator };
}
export var QuantityComparator: { new (): QuantityComparator };

export type QuantityComparatorList = '<' | '<=' | '>=' | '>';
interface _QuantityComparatorList extends _codePrimitive {
  content: QuantityComparatorList;
}

/** A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.If the element is present, it must have either a @value, an @id, or extensions */
interface _Questionnaire extends _DomainResource {
  /** The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
  approvalDate?: date;
  /** An identifier for this question or group of questions in a particular terminology such as LOINC. */
  code?: Coding[];
  /** Contact details to assist a user in finding and communicating with the publisher. */
  contact?: ContactDetail[];
  /** A copyright statement relating to the questionnaire and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the questionnaire. */
  copyright?: markdown;
  /** The date  (and optionally time) when the questionnaire was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the questionnaire changes. */
  date?: dateTime;
  /** A free text natural language description of the questionnaire from a consumer's perspective. */
  description?: markdown;
  /** The period during which the questionnaire content was or is planned to be in active use. */
  effectivePeriod?: Period;
  /** A boolean value to indicate that this questionnaire is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage. */
  experimental?: boolean;
  /** A formal identifier that is used to identify this questionnaire when it is represented in other formats, or referenced in a specification, model, design or an instance. */
  identifier?: Identifier[];
  /** A particular question, question grouping or display text that is part of the questionnaire. */
  item?: QuestionnaireItem[];
  /** A legal or geographic region in which the questionnaire is intended to be used. */
  jurisdiction?: CodeableConcept[];
  /** The date on which the resource content was last reviewed. Review happens periodically after approval, but doesn't change the original approval date. */
  lastReviewDate?: date;
  /** A natural language name identifying the questionnaire. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
  name?: string;
  /** The name of the individual or organization that published the questionnaire. */
  publisher?: string;
  /** Explaination of why this questionnaire is needed and why it has been designed as it has. */
  purpose?: markdown;
  /** The status of this questionnaire. Enables tracking the life-cycle of the content. */
  status: PublicationStatus;
  /** The types of subjects that can be the subject of responses created for the questionnaire. */
  subjectType?: ResourceType[];
  /** A short, descriptive, user-friendly title for the questionnaire. */
  title?: string;
  /** An absolute URI that is used to identify this questionnaire when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this questionnaire is (or will be) published. The URL SHOULD include the major version of the questionnaire. For more information see [Technical and Business Versions](resource.html#versions). */
  url?: string;
  /** The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate questionnaire instances. */
  useContext?: UsageContext[];
  /** The identifier that is used to identify this version of the questionnaire when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the questionnaire author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
  version?: string;
  resourceType?: string;
}
export interface Questionnaire extends _Questionnaire {}
export var Questionnaire: { new (): Questionnaire };

/** A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection. */
interface _QuestionnaireEnableWhen extends _BackboneElement {
  answerAttachment?: Attachment;
  answerBoolean?: boolean;
  answerCoding?: Coding;
  answerDate?: string;
  answerDateTime?: string;
  answerDecimal?: number;
  answerInteger?: number;
  answerQuantity?: Quantity;
  answerReference?: Reference;
  answerString?: string;
  answerTime?: string;
  answerUri?: uri;
  /** An indication that this item should be enabled only if the specified question is answered (hasAnswer=true) or not answered (hasAnswer=false). */
  hasAnswer?: boolean;
  /** The linkId for the question whose answer (or lack of answer) governs whether this item is enabled. */
  question: string;
}
export interface QuestionnaireEnableWhen extends _QuestionnaireEnableWhen {
  constructor: { new (): QuestionnaireEnableWhen };
}
export var QuestionnaireEnableWhen: { new (): QuestionnaireEnableWhen };

/** A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection. */
interface _QuestionnaireItem extends _BackboneElement {
  /** A terminology code that corresponds to this group or question (e.g. a code from LOINC, which defines many questions and answers). */
  code?: Coding[];
  /** A reference to an [[[ElementDefinition]]] that provides the details for the item. If a definition is provided, then the following element values can be inferred from the definition:
   *
   * * code (ElementDefinition.code)
   * * type (ElementDefinition.type)
   * * required (ElementDefinition.min)
   * * repeats (ElementDefinition.max)
   * * maxLength (ElementDefinition.maxLength)
   * * options (ElementDefinition.binding)
   *
   * Any information provided in these elements on a Questionnaire Item overrides the information from the definition. */
  definition?: uri;
  /** A constraint indicating that this item should only be enabled (displayed/allow answers to be captured) when the specified condition is true. */
  enableWhen?: QuestionnaireEnableWhen[];
  initialAttachment?: Attachment;
  initialBoolean?: boolean;
  initialCoding?: Coding;
  initialDate?: date;
  initialDateTime?: dateTime;
  initialDecimal?: decimal;
  initialInteger?: integer;
  initialQuantity?: Quantity;
  initialReference?: Reference;
  initialString?: string;
  initialTime?: time;
  initialUri?: uri;
  /** Text, questions and other groups to be nested beneath a question or group. */
  item?: QuestionnaireItem[];
  /** An identifier that is unique within the Questionnaire allowing linkage to the equivalent item in a QuestionnaireResponse resource. */
  linkId: string;
  /** The maximum number of characters that are permitted in the answer to be considered a "valid" QuestionnaireResponse. */
  maxLength?: integer;
  /** One of the permitted answers for a "choice" or "open-choice" question. */
  option?: QuestionnaireOption[];
  /** A reference to a value set containing a list of codes representing permitted answers for a "choice" or "open-choice" question. */
  options?: Reference;
  /** A short label for a particular group, question or set of display text within the questionnaire used for reference by the individual completing the questionnaire. */
  prefix?: string;
  /** An indication, when true, that the value cannot be changed by a human respondent to the Questionnaire. */
  readOnly?: boolean;
  /** An indication, if true, that the item may occur multiple times in the response, collecting multiple answers answers for questions or multiple sets of answers for groups. */
  repeats?: boolean;
  /** An indication, if true, that the item must be present in a "completed" QuestionnaireResponse.  If false, the item may be skipped when answering the questionnaire. */
  required?: boolean;
  /** The name of a section, the text of a question or text content for a display item. */
  text?: string;
  _text?: Element;
  /** The type of questionnaire item this is - whether text for display, a grouping of other items or a particular type of data to be captured (string, integer, coded choice, etc.). */
  type: QuestionnaireItemTypeList;
  deactivated?: boolean;
}
export interface QuestionnaireItem extends _QuestionnaireItem {}
export var QuestionnaireItem: { new (): QuestionnaireItem };

/** Distinguishes groups from questions and display text and indicates data type for questionsIf the element is present, it must have either a @value, an @id, or extensions */
interface _QuestionnaireItemType extends _Element {
  value?: QuestionnaireItemTypeList;
}
export interface QuestionnaireItemType extends _QuestionnaireItemType {
  constructor: { new (): QuestionnaireItemType };
}
export var QuestionnaireItemType: { new (): QuestionnaireItemType };

export type QuestionnaireItemTypeList =
  | 'group'
  | 'display'
  | 'boolean'
  | 'decimal'
  | 'integer'
  | 'date'
  | 'dateTime'
  | 'time'
  | 'string'
  | 'text'
  | 'url'
  | 'choice'
  | 'open-choice'
  | 'attachment'
  | 'reference'
  | 'quantity';
interface _QuestionnaireItemTypeList extends _codePrimitive {
  content: QuestionnaireItemTypeList;
}

/** A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection. */
interface _QuestionnaireOption extends _BackboneElement {
  valueCoding: Coding;
  valueDate: date;
  valueInteger: integer;
  valueString: string;
  valueTime: time;
  valueReference: Reference;
}
export interface QuestionnaireOption extends _QuestionnaireOption {
  constructor: { new (): QuestionnaireOption };
}
export var QuestionnaireOption: { new (): QuestionnaireOption };

/** A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.If the element is present, it must have either a @value, an @id, or extensions */
interface _QuestionnaireResponse extends _DomainResource {
  /** Person who received the answers to the questions in the QuestionnaireResponse and recorded them in the system. */
  author?: Reference;
  /** The date and/or time that this set of answers were last changed. */
  authored?: dateTime;
  /** The order, proposal or plan that is fulfilled in whole or in part by this QuestionnaireResponse.  For example, a ProcedureRequest seeking an intake assessment or a decision support recommendation to assess for post-partum depression. */
  basedOn?: Reference[];
  /** The encounter or episode of care with primary association to the questionnaire response. */
  context?: Reference;
  /** A business identifier assigned to a particular completed (or partially completed) questionnaire. */
  identifier?: Identifier;
  /** A group or question item from the original questionnaire for which answers are provided. */
  item?: QuestionnaireResponseItem[];
  /** A procedure or observation that this questionnaire was performed as part of the execution of.  For example, the surgery a checklist was executed as part of. */
  parent?: Reference[];
  /** The Questionnaire that defines and organizes the questions for which answers are being provided. */
  questionnaire?: Reference;
  /** The person who answered the questions about the subject. */
  source?: Reference;
  /** The position of the questionnaire response within its overall lifecycle. */
  status: QuestionnaireResponseStatusList;
  /** The subject of the questionnaire response.  This could be a patient, organization, practitioner, device, etc.  This is who/what the answers apply to, but is not necessarily the source of information. */
  subject?: Reference;
  resourceType?: string;
}
export interface QuestionnaireResponse extends _QuestionnaireResponse {}
export var QuestionnaireResponse: { new (): QuestionnaireResponse };

/** A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to. */
interface _QuestionnaireResponseAnswer extends _BackboneElement {
  /** Nested groups and/or questions found within this particular answer. */
  item?: QuestionnaireResponseItem[];
  valueAttachment?: Attachment;
  valueBoolean?: boolean;
  valueCoding?: Coding;
  valueDate?: string;
  valueDateTime?: string;
  valueDecimal?: number;
  valueInteger?: number;
  valueQuantity?: Quantity;
  valueReference?: Reference;
  valueString?: string;
  valueTime?: string;
  valueUri?: uri;
}
export interface QuestionnaireResponseAnswer extends _QuestionnaireResponseAnswer {
  constructor: { new (): QuestionnaireResponseAnswer };
}
export var QuestionnaireResponseAnswer: { new (): QuestionnaireResponseAnswer };

/** A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to. */
interface _QuestionnaireResponseItem extends _BackboneElement {
  /** The respondent's answer(s) to the question. */
  answer?: QuestionnaireResponseAnswer[];
  /** A reference to an [[[ElementDefinition]]] that provides the details for the item. */
  definition?: uri;
  /** Questions or sub-groups nested beneath a question or group. */
  item?: QuestionnaireResponseItem[];
  /** The item from the Questionnaire that corresponds to this item in the QuestionnaireResponse resource. */
  linkId: string;
  /** More specific subject this section's answers are about, details the subject given in QuestionnaireResponse. */
  subject?: Reference;
  /** Text that is displayed above the contents of the group or as the text of the question being answered. */
  text?: string;
}
export interface QuestionnaireResponseItem extends _QuestionnaireResponseItem {}
export var QuestionnaireResponseItem: { new (): QuestionnaireResponseItem };

/** Lifecycle status of the questionnaire response.If the element is present, it must have either a @value, an @id, or extensions */
interface _QuestionnaireResponseStatus extends _Element {
  value?: QuestionnaireResponseStatusList;
}
export interface QuestionnaireResponseStatus extends _QuestionnaireResponseStatus {
  constructor: { new (): QuestionnaireResponseStatus };
}
export var QuestionnaireResponseStatus: { new (): QuestionnaireResponseStatus };

export type QuestionnaireResponseStatusList = 'in-progress' | 'completed' | 'amended' | 'entered-in-error' | 'stopped';
interface _QuestionnaireResponseStatusList extends _codePrimitive {
  content: QuestionnaireResponseStatusList;
}

/** A set of ordered Quantities defined by a low and high limit.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _Range extends _Element {
  /** The high limit. The boundary is inclusive. */
  high?: Quantity;
  /** The low limit. The boundary is inclusive. */
  low?: Quantity;
}
export interface Range extends _Range {
  constructor: { new (): Range };
}
export var Range: { new (): Range };

/** A relationship of two Quantity values - expressed as a numerator and a denominator.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _Ratio extends _Element {
  /** The value of the denominator. */
  denominator?: Quantity;
  /** The value of the numerator. */
  numerator?: Quantity;
}
export interface Ratio extends _Ratio {
  constructor: { new (): Ratio };
}
export var Ratio: { new (): Ratio };

/** A reference from one resource to another.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _Reference extends _Element {
  /** Plain text narrative that identifies the resource in addition to the resource reference. */
  display?: string;
  /** An identifier for the other resource. This is used when there is no way to reference the other resource directly, either because the entity is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference. */
  identifier?: Identifier;
  /** A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources. */
  reference?: string;
}
export interface Reference extends _Reference {
  constructor: { new (): Reference };
}
export var Reference: { new (): Reference };

/** A set of flags that defines how references are supported.If the element is present, it must have either a @value, an @id, or extensions */
interface _ReferenceHandlingPolicy extends _Element {
  value?: ReferenceHandlingPolicyList;
}
export interface ReferenceHandlingPolicy extends _ReferenceHandlingPolicy {
  constructor: { new (): ReferenceHandlingPolicy };
}
export var ReferenceHandlingPolicy: { new (): ReferenceHandlingPolicy };

export type ReferenceHandlingPolicyList = 'literal' | 'logical' | 'resolves' | 'enforced' | 'local';
interface _ReferenceHandlingPolicyList extends _codePrimitive {
  content: ReferenceHandlingPolicyList;
}

/** Whether a reference needs to be version specific or version independent, or whether either can be usedIf the element is present, it must have either a @value, an @id, or extensions */
interface _ReferenceVersionRules extends _Element {
  value?: ReferenceVersionRulesList;
}
export interface ReferenceVersionRules extends _ReferenceVersionRules {
  constructor: { new (): ReferenceVersionRules };
}
export var ReferenceVersionRules: { new (): ReferenceVersionRules };

export type ReferenceVersionRulesList = 'either' | 'independent' | 'specific';
interface _ReferenceVersionRulesList extends _codePrimitive {
  content: ReferenceVersionRulesList;
}

/** Used to record and send details about a request for referral service or transfer of a patient to the care of another provider or provider organization.If the element is present, it must have either a @value, an @id, or extensions */
interface _ReferralRequest extends _DomainResource {
  /** Date/DateTime of creation for draft requests and date of activation for active requests. */
  authoredOn?: dateTime;
  /** Indicates any plans, proposals or orders that this request is intended to satisfy - in whole or in part. */
  basedOn?: Reference[];
  /** The encounter at which the request for referral or transfer of care is initiated. */
  context?: Reference;
  /** A protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request. */
  definition?: Reference[];
  /** The reason element gives a short description of why the referral is being made, the description expands on this to support a more complete clinical summary. */
  description?: string;
  /** The business identifier of the logical "grouping" request/order that this referral is a part of. */
  groupIdentifier?: Identifier;
  /** Business identifier that uniquely identifies the referral/care transfer request instance. */
  identifier?: Identifier[];
  /** Distinguishes the "level" of authorization/demand implicit in this request. */
  intent: RequestIntent;
  /** Comments made about the referral request by any of the participants. */
  note?: Annotation[];
  occurrenceDateTime?: dateTime;
  occurrencePeriod?: Period;
  /** An indication of the urgency of referral (or where applicable the type of transfer of care) request. */
  priority?: RequestPriority;
  /** Description of clinical condition indicating why referral/transfer of care is requested.  For example:  Pathological Anomalies, Disabled (physical or mental),  Behavioral Management. */
  reasonCode?: CodeableConcept[];
  /** Indicates another resource whose existence justifies this request. */
  reasonReference?: Reference[];
  /** The healthcare provider(s) or provider organization(s) who/which is to receive the referral/transfer of care request. */
  recipient?: Reference[];
  /** Links to Provenance records for past versions of this resource or fulfilling request or event resources that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the resource. */
  relevantHistory?: Reference[];
  /** Completed or terminated request(s) whose function is taken by this new request. */
  replaces?: Reference[];
  /** The individual who initiated the request and has responsibility for its activation. */
  requester?: ReferralRequestRequester;
  /** The service(s) that is/are requested to be provided to the patient.  For example: cardiac pacemaker insertion. */
  serviceRequested?: CodeableConcept[];
  /** Indication of the clinical domain or discipline to which the referral or transfer of care request is sent.  For example: Cardiology Gastroenterology Diabetology. */
  specialty?: CodeableConcept;
  /** The status of the authorization/intention reflected by the referral request record. */
  status: RequestStatus;
  /** The patient who is the subject of a referral or transfer of care request. */
  subject: Reference;
  /** Any additional (administrative, financial or clinical) information required to support request for referral or transfer of care.  For example: Presenting problems/chief complaints Medical History Family History Alerts Allergy/Intolerance and Adverse Reactions Medications Observations/Assessments (may include cognitive and fundtional assessments) Diagnostic Reports Care Plan. */
  supportingInfo?: Reference[];
  /** An indication of the type of referral (or where applicable the type of transfer of care) request. */
  type?: CodeableConcept;
}
export interface ReferralRequest extends _ReferralRequest {
  constructor: { new (): ReferralRequest };
}
export var ReferralRequest: { new (): ReferralRequest };

/** Used to record and send details about a request for referral service or transfer of a patient to the care of another provider or provider organization. */
interface _ReferralRequestRequester extends _BackboneElement {
  /** The device, practitioner, etc. who initiated the request. */
  agent: Reference;
  /** The organization the device or practitioner was acting on behalf of. */
  onBehalfOf?: Reference;
}
export interface ReferralRequestRequester extends _ReferralRequestRequester {
  constructor: { new (): ReferralRequestRequester };
}
export var ReferralRequestRequester: { new (): ReferralRequestRequester };

/** Related artifacts such as additional documentation, justification, or bibliographic references.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _RelatedArtifact extends _Element {
  /** A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format. */
  citation?: string;
  /** A brief description of the document or knowledge resource being referenced, suitable for display to a consumer. */
  display?: string;
  /** The document being referenced, represented as an attachment. This is exclusive with the resource element. */
  document?: Attachment;
  /** The related resource, such as a library, value set, profile, or other knowledge resource. */
  resource?: Reference;
  /** The type of relationship to the related artifact. */
  type: RelatedArtifactType;
  /** A url for the artifact that can be followed to access the actual content. */
  url?: uri;
}
export interface RelatedArtifact extends _RelatedArtifact {
  constructor: { new (): RelatedArtifact };
}
export var RelatedArtifact: { new (): RelatedArtifact };

/** The type of relationship to the related artifactIf the element is present, it must have either a @value, an @id, or extensions */
interface _RelatedArtifactType extends _Element {
  value?: RelatedArtifactTypeList;
}
export interface RelatedArtifactType extends _RelatedArtifactType {
  constructor: { new (): RelatedArtifactType };
}
export var RelatedArtifactType: { new (): RelatedArtifactType };

export type RelatedArtifactTypeList =
  | 'documentation'
  | 'justification'
  | 'citation'
  | 'predecessor'
  | 'successor'
  | 'derived-from'
  | 'depends-on'
  | 'composed-of';
interface _RelatedArtifactTypeList extends _codePrimitive {
  content: RelatedArtifactTypeList;
}

/** Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.If the element is present, it must have either a @value, an @id, or extensions */
interface _RelatedPerson extends _DomainResource {
  /** Whether this related person record is in active use. */
  active?: boolean;
  /** Address where the related person can be contacted or visited. */
  address?: Address[];
  /** The date on which the related person was born. */
  birthDate?: date;
  /** Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes. */
  gender?: AdministrativeGender;
  /** Identifier for a person within a particular scope. */
  identifier?: Identifier[];
  /** A name associated with the person. */
  name?: HumanName[];
  /** The patient this person is related to. */
  patient: Reference;
  /** The period of time that this relationship is considered to be valid. If there are no dates defined, then the interval is unknown. */
  period?: Period;
  /** Image of the person. */
  photo?: Attachment[];
  /** The nature of the relationship between a patient and the related person. */
  relationship?: CodeableConcept;
  /** A contact detail for the person, e.g. a telephone number or an email address. */
  telecom?: ContactPoint[];
}
export interface RelatedPerson extends _RelatedPerson {
  constructor: { new (): RelatedPerson };
}
export var RelatedPerson: { new (): RelatedPerson };

/** If the element is present, it must have either a @value, an @id, or extensions */
interface _RemittanceOutcome extends _Element {
  value?: RemittanceOutcomeList;
}
export interface RemittanceOutcome extends _RemittanceOutcome {
  constructor: { new (): RemittanceOutcome };
}
export var RemittanceOutcome: { new (): RemittanceOutcome };

export type RemittanceOutcomeList = 'complete' | 'error' | 'partial';
interface _RemittanceOutcomeList extends _codePrimitive {
  content: RemittanceOutcomeList;
}

/** Type for access of external URIIf the element is present, it must have either a @value, an @id, or extensions */
interface _repositoryType extends _Element {
  value?: repositoryTypeList;
}
export interface repositoryType extends _repositoryType {
  constructor: { new (): repositoryType };
}
export var repositoryType: { new (): repositoryType };

export type repositoryTypeList = 'directlink' | 'openapi' | 'login' | 'oauth' | 'other';
interface _repositoryTypeList extends _codePrimitive {
  content: repositoryTypeList;
}

/** A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one".If the element is present, it must have either a @value, an @id, or extensions */
interface _RequestGroup extends _DomainResource {
  /** The actions, if any, produced by the evaluation of the artifact. */
  action?: RequestGroupAction[];
  /** Provides a reference to the author of the request group. */
  author?: Reference;
  /** Indicates when the request group was created. */
  authoredOn?: dateTime;
  /** A plan, proposal or order that is fulfilled in whole or in part by this request. */
  basedOn?: Reference[];
  /** Describes the context of the request group, if any. */
  context?: Reference;
  /** A protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request. */
  definition?: Reference[];
  /** A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition, prescription or similar form. */
  groupIdentifier?: Identifier;
  /** Allows a service to provide a unique, business identifier for the request. */
  identifier?: Identifier[];
  /** Indicates the level of authority/intentionality associated with the request and where the request fits into the workflow chain. */
  intent: RequestIntent;
  /** Provides a mechanism to communicate additional information about the response. */
  note?: Annotation[];
  /** Indicates how quickly the request should be addressed with respect to other requests. */
  priority?: RequestPriority;
  reasonCodeableConcept?: CodeableConcept;
  reasonReference?: Reference;
  /** Completed or terminated request(s) whose function is taken by this new request. */
  replaces?: Reference[];
  /** The current state of the request. For request groups, the status reflects the status of all the requests in the group. */
  status: RequestStatus;
  /** The subject for which the request group was created. */
  subject?: Reference;
}
export interface RequestGroup extends _RequestGroup {
  constructor: { new (): RequestGroup };
}
export var RequestGroup: { new (): RequestGroup };

/** A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one". */
interface _RequestGroupAction extends _BackboneElement {
  /** Sub actions. */
  action?: RequestGroupAction[];
  /** Defines whether the action can be selected multiple times. */
  cardinalityBehavior?: ActionCardinalityBehavior;
  /** A code that provides meaning for the action or action group. For example, a section may have a LOINC code for a the section of a documentation template. */
  code?: CodeableConcept[];
  /** An expression that describes applicability criteria, or start/stop conditions for the action. */
  condition?: RequestGroupCondition[];
  /** A short description of the action used to provide a summary to display to the user. */
  description?: string;
  /** Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources. */
  documentation?: RelatedArtifact[];
  /** Defines the grouping behavior for the action and its children. */
  groupingBehavior?: ActionGroupingBehavior;
  /** A user-visible label for the action. */
  label?: string;
  /** The participant that should perform or be responsible for this action. */
  participant?: Reference[];
  /** Defines whether the action should usually be preselected. */
  precheckBehavior?: ActionPrecheckBehavior;
  /** A relationship to another action such as "before" or "30-60 minutes after start of". */
  relatedAction?: RequestGroupRelatedAction[];
  /** Defines the requiredness behavior for the action. */
  requiredBehavior?: ActionRequiredBehavior;
  /** The resource that is the target of the action (e.g. CommunicationRequest). */
  resource?: Reference;
  /** Defines the selection behavior for the action and its children. */
  selectionBehavior?: ActionSelectionBehavior;
  /** A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that may not be capable of interpreting it dynamically. */
  textEquivalent?: string;
  timingDateTime?: dateTime;
  timingDuration?: Duration;
  timingPeriod?: Period;
  timingRange?: Range;
  timingTiming?: Timing;
  /** The title of the action displayed to a user. */
  title?: string;
  /** The type of action to perform (create, update, remove). */
  type?: Coding;
}
export interface RequestGroupAction extends _RequestGroupAction {
  constructor: { new (): RequestGroupAction };
}
export var RequestGroupAction: { new (): RequestGroupAction };

/** A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one". */
interface _RequestGroupCondition extends _BackboneElement {
  /** A brief, natural language description of the condition that effectively communicates the intended semantics. */
  description?: string;
  /** An expression that returns true or false, indicating whether or not the condition is satisfied. */
  expression?: string;
  /** The kind of condition. */
  kind: ActionConditionKind;
  /** The media type of the language for the expression. */
  language?: string;
}
export interface RequestGroupCondition extends _RequestGroupCondition {
  constructor: { new (): RequestGroupCondition };
}
export var RequestGroupCondition: { new (): RequestGroupCondition };

/** A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one". */
interface _RequestGroupRelatedAction extends _BackboneElement {
  /** The element id of the action this is related to. */
  actionId: id;
  offsetDuration?: Duration;
  offsetRange?: Range;
  /** The relationship of this action to the related action. */
  relationship: ActionRelationshipType;
}
export interface RequestGroupRelatedAction extends _RequestGroupRelatedAction {
  constructor: { new (): RequestGroupRelatedAction };
}
export var RequestGroupRelatedAction: { new (): RequestGroupRelatedAction };

/** The kind of procedure or diagnostic requestIf the element is present, it must have either a @value, an @id, or extensions */
interface _RequestIntent extends _Element {
  value?: RequestIntentList;
}
export interface RequestIntent extends _RequestIntent {
  constructor: { new (): RequestIntent };
}
export var RequestIntent: { new (): RequestIntent };

export type RequestIntentList =
  | 'proposal'
  | 'plan'
  | 'order'
  | 'original-order'
  | 'reflex-order'
  | 'filler-order'
  | 'instance-order'
  | 'option';
interface _RequestIntentList extends _codePrimitive {
  content: RequestIntentList;
}

/** Codes indicating the relative importance of a communication request.If the element is present, it must have either a @value, an @id, or extensions */
interface _RequestPriority extends _Element {
  value?: RequestPriorityList;
}
export interface RequestPriority extends _RequestPriority {
  constructor: { new (): RequestPriority };
}
export var RequestPriority: { new (): RequestPriority };

export type RequestPriorityList = 'routine' | 'urgent' | 'asap' | 'stat';
interface _RequestPriorityList extends _codePrimitive {
  content: RequestPriorityList;
}

/** The status of the communication request.If the element is present, it must have either a @value, an @id, or extensions */
interface _RequestStatus extends _Element {
  value?: RequestStatusList;
}
export interface RequestStatus extends _RequestStatus {
  constructor: { new (): RequestStatus };
}
export var RequestStatus: { new (): RequestStatus };

export type RequestStatusList = 'draft' | 'active' | 'suspended' | 'cancelled' | 'completed' | 'entered-in-error' | 'unknown';
interface _RequestStatusList extends _codePrimitive {
  content: RequestStatusList;
}

/** A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects.If the element is present, it must have either a @value, an @id, or extensions */
interface _ResearchStudy extends _DomainResource {
  /** Describes an expected sequence of events for one of the participants of a study.  E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up. */
  arm?: ResearchStudyArm[];
  /** Codes categorizing the type of study such as investigational vs. observational, type of blinding, type of randomization, safety vs. efficacy, etc. */
  category?: CodeableConcept[];
  /** Contact details to assist a user in learning more about or engaging with the study. */
  contact?: ContactDetail[];
  /** A full description of how the study is being conducted. */
  description?: markdown;
  /** Reference to a Group that defines the criteria for and quantity of subjects participating in the study.  E.g. " 200 female Europeans between the ages of 20 and 45 with early onset diabetes". */
  enrollment?: Reference[];
  /** The condition(s), medication(s), food(s), therapy(ies), device(s) or other concerns or interventions that the study is seeking to gain more information about. */
  focus?: CodeableConcept[];
  /** Identifiers assigned to this research study by the sponsor or other systems. */
  identifier?: Identifier[];
  /** Indicates a country, state or other region where the study is taking place. */
  jurisdiction?: CodeableConcept[];
  /** Key terms to aid in searching for or filtering the study. */
  keyword?: CodeableConcept[];
  /** Comments made about the event by the performer, subject or other participants. */
  note?: Annotation[];
  /** A larger research study of which this particular study is a component or step. */
  partOf?: Reference[];
  /** Identifies the start date and the expected (or actual, depending on status) end date for the study. */
  period?: Period;
  /** Indicates the individual who has primary oversite of the execution of the study. */
  principalInvestigator?: Reference;
  /** The set of steps expected to be performed as part of the execution of the study. */
  protocol?: Reference[];
  /** A description and/or code explaining the premature termination of the study. */
  reasonStopped?: CodeableConcept;
  /** Citations, references and other related documents. */
  relatedArtifact?: RelatedArtifact[];
  /** Clinic, hospital or other healthcare location that is participating in the study. */
  site?: Reference[];
  /** The organization responsible for the execution of the study. */
  sponsor?: Reference;
  /** The current state of the study. */
  status: ResearchStudyStatus;
  /** A short, descriptive user-friendly label for the study. */
  title?: string;
}
export interface ResearchStudy extends _ResearchStudy {
  constructor: { new (): ResearchStudy };
}
export var ResearchStudy: { new (): ResearchStudy };

/** A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects. */
interface _ResearchStudyArm extends _BackboneElement {
  /** Categorization of study arm, e.g. experimental, active comparator, placebo comparater. */
  code?: CodeableConcept;
  /** A succinct description of the path through the study that would be followed by a subject adhering to this arm. */
  description?: string;
  /** Unique, human-readable label for this arm of the study. */
  name: string;
}
export interface ResearchStudyArm extends _ResearchStudyArm {
  constructor: { new (): ResearchStudyArm };
}
export var ResearchStudyArm: { new (): ResearchStudyArm };

/** Codes that convey the current status of the research studyIf the element is present, it must have either a @value, an @id, or extensions */
interface _ResearchStudyStatus extends _Element {
  value?: ResearchStudyStatusList;
}
export interface ResearchStudyStatus extends _ResearchStudyStatus {
  constructor: { new (): ResearchStudyStatus };
}
export var ResearchStudyStatus: { new (): ResearchStudyStatus };

export type ResearchStudyStatusList = 'draft' | 'in-progress' | 'suspended' | 'stopped' | 'completed' | 'entered-in-error';
interface _ResearchStudyStatusList extends _codePrimitive {
  content: ResearchStudyStatusList;
}

/** A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects.If the element is present, it must have either a @value, an @id, or extensions */
interface _ResearchSubject extends _DomainResource {
  /** The name of the arm in the study the subject actually followed as part of this study. */
  actualArm?: string;
  /** The name of the arm in the study the subject is expected to follow as part of this study. */
  assignedArm?: string;
  /** A record of the patient's informed agreement to participate in the study. */
  consent?: Reference;
  /** Identifiers assigned to this research study by the sponsor or other systems. */
  identifier?: Identifier;
  /** The record of the person or animal who is involved in the study. */
  individual: Reference;
  /** The dates the subject began and ended their participation in the study. */
  period?: Period;
  /** The current state of the subject. */
  status: ResearchSubjectStatus;
  /** Reference to the study the subject is participating in. */
  study: Reference;
}
export interface ResearchSubject extends _ResearchSubject {
  constructor: { new (): ResearchSubject };
}
export var ResearchSubject: { new (): ResearchSubject };

/** Indicates the progression of a study subject through a studyIf the element is present, it must have either a @value, an @id, or extensions */
interface _ResearchSubjectStatus extends _Element {
  value?: ResearchSubjectStatusList;
}
export interface ResearchSubjectStatus extends _ResearchSubjectStatus {
  constructor: { new (): ResearchSubjectStatus };
}
export var ResearchSubjectStatus: { new (): ResearchSubjectStatus };

export type ResearchSubjectStatusList = 'candidate' | 'enrolled' | 'active' | 'suspended' | 'withdrawn' | 'completed';
interface _ResearchSubjectStatusList extends _codePrimitive {
  content: ResearchSubjectStatusList;
}

/** This is the base resource type for everything. */
interface _Resource extends BaseType {
  /** The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
  id?: id;
  /** A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. */
  implicitRules?: uri;
  /** The base language in which the resource is written. */
  language?: code;
  /** The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource. */
  meta?: Meta;
}
export interface Resource extends _Resource {
  constructor: { new (): Resource };
}
export var Resource: { new (): Resource };

interface _ResourceContainer extends BaseType {
  /** A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc. */
  Account: Account;
  /** This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context. */
  ActivityDefinition: ActivityDefinition;
  /** Actual or  potential/avoided event causing unintended physical injury resulting from or contributed to by medical care, a research study or other healthcare setting factors that requires additional monitoring, treatment, or hospitalization, or that results in death. */
  AdverseEvent: AdverseEvent;
  /** Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance. */
  AllergyIntolerance: AllergyIntolerance;
  /** A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s). */
  Appointment: Appointment;
  /** A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection. */
  AppointmentResponse: AppointmentResponse;
  /** A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage. */
  AuditEvent: AuditEvent;
  /** Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification. */
  Basic: Basic;
  /** A binary resource can contain any content, whether text, image, pdf, zip archive, etc. */
  Binary: Binary;
  /** Record details about the anatomical location of a specimen or body part.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case. */
  BodySite: BodySite;
  /** A container for a collection of resources. */
  Bundle: Bundle;
  /** A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
  CapabilityStatement: CapabilityStatement;
  /** Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions. */
  CarePlan: CarePlan;
  /** The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care for a patient. */
  CareTeam: CareTeam;
  /** The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation. */
  ChargeItem: ChargeItem;
  /** A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery. */
  Claim: Claim;
  /** This resource provides the adjudication details from the processing of a Claim resource. */
  ClaimResponse: ClaimResponse;
  /** A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score. */
  ClinicalImpression: ClinicalImpression;
  /** A code system resource specifies a set of codes drawn from one or more code systems. */
  CodeSystem: CodeSystem;
  /** An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency was notified about a reportable condition. */
  Communication: Communication;
  /** A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition. */
  CommunicationRequest: CommunicationRequest;
  /** A compartment definition that defines how resources are accessed on a server. */
  CompartmentDefinition: CompartmentDefinition;
  /** A set of healthcare-related information that is assembled together into a single logical document that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. While a Composition defines the structure, it does not actually contain the content: rather the full content of a document is contained in a Bundle, of which the Composition is the first resource contained. */
  Composition: Composition;
  /** A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models. */
  ConceptMap: ConceptMap;
  /** A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern. */
  Condition: Condition;
  /** A record of a healthcare consumer’s policy choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time. */
  Consent: Consent;
  /** A formal agreement between parties regarding the conduct of business, exchange of information or other matters. */
  Contract: Contract;
  /** Financial instrument which may be used to reimburse or pay for health care products and services. */
  Coverage: Coverage;
  /** The formal description of a single piece of information that can be gathered and reported. */
  DataElement: DataElement;
  /** Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc. */
  DetectedIssue: DetectedIssue;
  /** This resource identifies an instance or a type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.  Medical devices include durable (reusable) medical equipment, implantable devices, as well as disposable equipment used for diagnostic, treatment, and research for healthcare and public health.  Non-medical devices may include items such as a machine, cellphone, computer, application, etc. */
  Device: Device;
  /** The characteristics, operational status and capabilities of a medical-related component of a medical device. */
  DeviceComponent: DeviceComponent;
  /** Describes a measurement, calculation or setting capability of a medical device. */
  DeviceMetric: DeviceMetric;
  /** Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker. */
  DeviceRequest: DeviceRequest;
  /** A record of a device being used by a patient where the record is the result of a report from the patient or another clinician. */
  DeviceUseStatement: DeviceUseStatement;
  /** The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports. */
  DiagnosticReport: DiagnosticReport;
  /** A collection of documents compiled for a purpose together with metadata that applies to the collection. */
  DocumentManifest: DocumentManifest;
  /** A reference to a document. */
  DocumentReference: DocumentReference;
  /** The EligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an EligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy. */
  EligibilityRequest: EligibilityRequest;
  /** This resource provides eligibility and plan details from the processing of an Eligibility resource. */
  EligibilityResponse: EligibilityResponse;
  /** An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient. */
  Encounter: Encounter;
  /** The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b or a REST endpoint for another FHIR server. This may include any security context information. */
  Endpoint: Endpoint;
  /** This resource provides the insurance enrollment details to the insurer regarding a specified coverage. */
  EnrollmentRequest: EnrollmentRequest;
  /** This resource provides enrollment and plan details from the processing of an Enrollment resource. */
  EnrollmentResponse: EnrollmentResponse;
  /** An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time. */
  EpisodeOfCare: EpisodeOfCare;
  /** Resource to define constraints on the Expansion of a FHIR ValueSet. */
  ExpansionProfile: ExpansionProfile;
  /** This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
  ExplanationOfBenefit: ExplanationOfBenefit;
  /** Significant health events and conditions for a person related to the patient relevant in the context of care for the patient. */
  FamilyMemberHistory: FamilyMemberHistory;
  /** Prospective warnings of potential issues when providing care to the patient. */
  Flag: Flag;
  /** Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc. */
  Goal: Goal;
  /** A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set. */
  GraphDefinition: GraphDefinition;
  /** Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization. */
  Group: Group;
  /** A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken. */
  GuidanceResponse: GuidanceResponse;
  /** The details of a healthcare service available at a location. */
  HealthcareService: HealthcareService;
  /** A text description of the DICOM SOP instances selected in the ImagingManifest; or the reason for, or significance of, the selection. */
  ImagingManifest: ImagingManifest;
  /** Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities. */
  ImagingStudy: ImagingStudy;
  /** Describes the event of a patient being administered a vaccination or a record of a vaccination as reported by a patient, a clinician or another party and may include vaccine reaction information and what vaccination protocol was followed. */
  Immunization: Immunization;
  /** A patient's point-in-time immunization and recommendation (i.e. forecasting a patient's immunization eligibility according to a published schedule) with optional supporting justification. */
  ImmunizationRecommendation: ImmunizationRecommendation;
  /** A set of rules of how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts. */
  ImplementationGuide: ImplementationGuide;
  /** The Library resource is a general-purpose container for knowledge asset definitions. It can be used to describe and expose existing knowledge assets such as logic libraries and information model descriptions, as well as to describe a collection of knowledge assets. */
  Library: Library;
  /** Identifies two or more records (resource instances) that are referring to the same real-world "occurrence". */
  Linkage: Linkage;
  /** A set of information summarized from a list of other resources. */
  List: List;
  /** Details and position information for a physical place where services are provided  and resources and participants may be stored, found, contained or accommodated. */
  Location: Location;
  /** The Measure resource provides the definition of a quality measure. */
  Measure: Measure;
  /** The MeasureReport resource contains the results of evaluating a measure. */
  MeasureReport: MeasureReport;
  /** A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference. */
  Media: Media;
  /** This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication. */
  Medication: Medication;
  /** Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner. */
  MedicationAdministration: MedicationAdministration;
  /** Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order. */
  MedicationDispense: MedicationDispense;
  /** An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns. */
  MedicationRequest: MedicationRequest;
  /** A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now, or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from sources such as the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains
   *
   * The primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information. */
  MedicationStatement: MedicationStatement;
  /** Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted. */
  MessageDefinition: MessageDefinition;
  /** The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle. */
  MessageHeader: MessageHeader;
  /** A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types. */
  NamingSystem: NamingSystem;
  /** A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident. */
  NutritionOrder: NutritionOrder;
  /** Measurements and simple assertions made about a patient, device or other subject. */
  Observation: Observation;
  /** A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction). */
  OperationDefinition: OperationDefinition;
  /** A collection of error, warning or information messages that result from a system action. */
  OperationOutcome: OperationOutcome;
  /** A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, etc. */
  Organization: Organization;
  /** This special resource type is used to represent an operation request and response (operations.html). It has no other use, and there is no RESTful endpoint associated with it. */
  Parameters: Parameters;
  /** Demographics and other administrative information about an individual or animal receiving care or other health-related services. */
  Patient: Patient;
  /** This resource provides the status of the payment for goods and services rendered, and the request and response resource references. */
  PaymentNotice: PaymentNotice;
  /** This resource provides payment details and claim references supporting a bulk payment. */
  PaymentReconciliation: PaymentReconciliation;
  /** Demographics and administrative information about a person independent of a specific health-related context. */
  Person: Person;
  /** This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols. */
  PlanDefinition: PlanDefinition;
  /** A person who is directly or indirectly involved in the provisioning of healthcare. */
  Practitioner: Practitioner;
  /** A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time. */
  PractitionerRole: PractitionerRole;
  /** An action that is or was performed on a patient. This can be a physical intervention like an operation, or less invasive like counseling or hypnotherapy. */
  Procedure: Procedure;
  /** A record of a request for diagnostic investigations, treatments, or operations to be performed. */
  ProcedureRequest: ProcedureRequest;
  /** This resource provides the target, request and response, and action details for an action to be performed by the target on or about existing resources. */
  ProcessRequest: ProcessRequest;
  /** This resource provides processing status, errors and notes from the processing of a resource. */
  ProcessResponse: ProcessResponse;
  /** Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies. */
  Provenance: Provenance;
  /** A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection. */
  Questionnaire: Questionnaire;
  /** A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to. */
  QuestionnaireResponse: QuestionnaireResponse;
  /** Used to record and send details about a request for referral service or transfer of a patient to the care of another provider or provider organization. */
  ReferralRequest: ReferralRequest;
  /** Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process. */
  RelatedPerson: RelatedPerson;
  /** A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one". */
  RequestGroup: RequestGroup;
  /** A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects. */
  ResearchStudy: ResearchStudy;
  /** A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects. */
  ResearchSubject: ResearchSubject;
  /** An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome. */
  RiskAssessment: RiskAssessment;
  /** A container for slots of time that may be available for booking appointments. */
  Schedule: Schedule;
  /** A search parameter that defines a named search item that can be used to search/filter on a resource. */
  SearchParameter: SearchParameter;
  /** Raw data describing a biological sequence. */
  Sequence: Sequence;
  /** The ServiceDefinition describes a unit of decision support functionality that is made available as a service, such as immunization modules or drug-drug interaction checking. */
  ServiceDefinition: ServiceDefinition;
  /** A slot of time on a schedule that may be available for booking appointments. */
  Slot: Slot;
  /** A sample to be used for analysis. */
  Specimen: Specimen;
  /** A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types. */
  StructureDefinition: StructureDefinition;
  /** A Map of relationships between 2 structures that can be used to transform data. */
  StructureMap: StructureMap;
  /** The subscription resource is used to define a push based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system is able to take an appropriate action. */
  Subscription: Subscription;
  /** A homogeneous material with a definite composition. */
  Substance: Substance;
  /** Record of delivery of what is supplied. */
  SupplyDelivery: SupplyDelivery;
  /** A record of a request for a medication, substance or device used in the healthcare setting. */
  SupplyRequest: SupplyRequest;
  /** A task to be performed. */
  Task: Task;
  /** A summary of information based on the results of executing a TestScript. */
  TestReport: TestReport;
  /** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
  TestScript: TestScript;
  /** A value set specifies a set of codes drawn from one or more code systems. */
  ValueSet: ValueSet;
  /** An authorization for the supply of glasses and/or contact lenses to a patient. */
  VisionPrescription: VisionPrescription;
}
export interface ResourceContainer extends _ResourceContainer {
  constructor: { new (): ResourceContainer };
}
export var ResourceContainer: { new (): ResourceContainer };

/** The kind of activity the definition is describingIf the element is present, it must have either a @value, an @id, or extensions */
interface _ResourceType extends _Element {
  value?: ResourceTypeList;
}
export interface ResourceType extends _ResourceType {
  constructor: { new (): ResourceType };
}
export var ResourceType: { new (): ResourceType };

export type ResourceTypeList =
  | 'Account'
  | 'ActivityDefinition'
  | 'AdverseEvent'
  | 'AllergyIntolerance'
  | 'Appointment'
  | 'AppointmentResponse'
  | 'AuditEvent'
  | 'Basic'
  | 'Binary'
  | 'BodySite'
  | 'Bundle'
  | 'CapabilityStatement'
  | 'CarePlan'
  | 'CareTeam'
  | 'ChargeItem'
  | 'Claim'
  | 'ClaimResponse'
  | 'ClinicalImpression'
  | 'CodeSystem'
  | 'Communication'
  | 'CommunicationRequest'
  | 'CompartmentDefinition'
  | 'Composition'
  | 'ConceptMap'
  | 'Condition'
  | 'Consent'
  | 'Contract'
  | 'Coverage'
  | 'DataElement'
  | 'DetectedIssue'
  | 'Device'
  | 'DeviceComponent'
  | 'DeviceMetric'
  | 'DeviceRequest'
  | 'DeviceUseStatement'
  | 'DiagnosticReport'
  | 'DocumentManifest'
  | 'DocumentReference'
  | 'DomainResource'
  | 'EligibilityRequest'
  | 'EligibilityResponse'
  | 'Encounter'
  | 'Endpoint'
  | 'EnrollmentRequest'
  | 'EnrollmentResponse'
  | 'EpisodeOfCare'
  | 'ExpansionProfile'
  | 'ExplanationOfBenefit'
  | 'FamilyMemberHistory'
  | 'Flag'
  | 'Goal'
  | 'GraphDefinition'
  | 'Group'
  | 'GuidanceResponse'
  | 'HealthcareService'
  | 'ImagingManifest'
  | 'ImagingStudy'
  | 'Immunization'
  | 'ImmunizationRecommendation'
  | 'ImplementationGuide'
  | 'Library'
  | 'Linkage'
  | 'List'
  | 'Location'
  | 'Measure'
  | 'MeasureReport'
  | 'Media'
  | 'Medication'
  | 'MedicationAdministration'
  | 'MedicationDispense'
  | 'MedicationRequest'
  | 'MedicationStatement'
  | 'MessageDefinition'
  | 'MessageHeader'
  | 'NamingSystem'
  | 'NutritionOrder'
  | 'Observation'
  | 'OperationDefinition'
  | 'OperationOutcome'
  | 'Organization'
  | 'Parameters'
  | 'Patient'
  | 'PaymentNotice'
  | 'PaymentReconciliation'
  | 'Person'
  | 'PlanDefinition'
  | 'Practitioner'
  | 'PractitionerRole'
  | 'Procedure'
  | 'ProcedureRequest'
  | 'ProcessRequest'
  | 'ProcessResponse'
  | 'Provenance'
  | 'Questionnaire'
  | 'QuestionnaireResponse'
  | 'ReferralRequest'
  | 'RelatedPerson'
  | 'RequestGroup'
  | 'ResearchStudy'
  | 'ResearchSubject'
  | 'Resource'
  | 'RiskAssessment'
  | 'Schedule'
  | 'SearchParameter'
  | 'Sequence'
  | 'ServiceDefinition'
  | 'Slot'
  | 'Specimen'
  | 'StructureDefinition'
  | 'StructureMap'
  | 'Subscription'
  | 'Substance'
  | 'SupplyDelivery'
  | 'SupplyRequest'
  | 'Task'
  | 'TestReport'
  | 'TestScript'
  | 'ValueSet'
  | 'VisionPrescription';
interface _ResourceTypeList extends _codePrimitive {
  content: ResourceTypeList;
}

/** How the system supports versioning for a resource.If the element is present, it must have either a @value, an @id, or extensions */
interface _ResourceVersionPolicy extends _Element {
  value?: ResourceVersionPolicyList;
}
export interface ResourceVersionPolicy extends _ResourceVersionPolicy {
  constructor: { new (): ResourceVersionPolicy };
}
export var ResourceVersionPolicy: { new (): ResourceVersionPolicy };

export type ResourceVersionPolicyList = 'no-version' | 'versioned' | 'versioned-update';
interface _ResourceVersionPolicyList extends _codePrimitive {
  content: ResourceVersionPolicyList;
}

/** The kind of response to a messageIf the element is present, it must have either a @value, an @id, or extensions */
interface _ResponseType extends _Element {
  value?: ResponseTypeList;
}
export interface ResponseType extends _ResponseType {
  constructor: { new (): ResponseType };
}
export var ResponseType: { new (): ResponseType };

export type ResponseTypeList = 'ok' | 'transient-error' | 'fatal-error';
interface _ResponseTypeList extends _codePrimitive {
  content: ResponseTypeList;
}

/** The mode of a RESTful capability statement.If the element is present, it must have either a @value, an @id, or extensions */
interface _RestfulCapabilityMode extends _Element {
  value?: RestfulCapabilityModeList;
}
export interface RestfulCapabilityMode extends _RestfulCapabilityMode {
  constructor: { new (): RestfulCapabilityMode };
}
export var RestfulCapabilityMode: { new (): RestfulCapabilityMode };

export type RestfulCapabilityModeList = 'client' | 'server';
interface _RestfulCapabilityModeList extends _codePrimitive {
  content: RestfulCapabilityModeList;
}

/** An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.If the element is present, it must have either a @value, an @id, or extensions */
interface _RiskAssessment extends _DomainResource {
  /** A reference to the request that is fulfilled by this risk assessment. */
  basedOn?: Reference;
  /** Indicates the source data considered as part of the assessment (FamilyHistory, Observations, Procedures, Conditions, etc.). */
  basis?: Reference[];
  /** The type of the risk assessment performed. */
  code?: CodeableConcept;
  /** Additional comments about the risk assessment. */
  comment?: string;
  /** For assessments or prognosis specific to a particular condition, indicates the condition being assessed. */
  condition?: Reference;
  /** The encounter where the assessment was performed. */
  context?: Reference;
  /** Business identifier assigned to the risk assessment. */
  identifier?: Identifier;
  /** The algorithm, process or mechanism used to evaluate the risk. */
  method?: CodeableConcept;
  /** A description of the steps that might be taken to reduce the identified risk(s). */
  mitigation?: string;
  occurrenceDateTime?: dateTime;
  occurrencePeriod?: Period;
  /** A reference to a resource that this risk assessment is part of, such as a Procedure. */
  parent?: Reference;
  /** The provider or software application that performed the assessment. */
  performer?: Reference;
  /** Describes the expected outcome for the subject. */
  prediction?: RiskAssessmentPrediction[];
  reasonCodeableConcept?: CodeableConcept;
  reasonReference?: Reference;
  /** The status of the RiskAssessment, using the same statuses as an Observation. */
  status: ObservationStatus;
  /** The patient or group the risk assessment applies to. */
  subject?: Reference;
}
export interface RiskAssessment extends _RiskAssessment {
  constructor: { new (): RiskAssessment };
}
export var RiskAssessment: { new (): RiskAssessment };

/** An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome. */
interface _RiskAssessmentPrediction extends _BackboneElement {
  /** One of the potential outcomes for the patient (e.g. remission, death,  a particular condition). */
  outcome: CodeableConcept;
  probabilityDecimal?: decimal;
  probabilityRange?: Range;
  /** How likely is the outcome (in the specified timeframe), expressed as a qualitative value (e.g. low, medium, high). */
  qualitativeRisk?: CodeableConcept;
  /** Additional information explaining the basis for the prediction. */
  rationale?: string;
  /** Indicates the risk for this particular subject (with their specific characteristics) divided by the risk of the population in general.  (Numbers greater than 1 = higher risk than the population, numbers less than 1 = lower risk.). */
  relativeRisk?: decimal;
  whenPeriod?: Period;
  whenRange?: Range;
}
export interface RiskAssessmentPrediction extends _RiskAssessmentPrediction {
  constructor: { new (): RiskAssessmentPrediction };
}
export var RiskAssessmentPrediction: { new (): RiskAssessmentPrediction };

/** A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _SampledData extends _Element {
  /** A series of data points which are decimal values separated by a single space (character u20). The special values "E" (error), "L" (below detection limit) and "U" (above detection limit) can also be used in place of a decimal value. */
  data: SampledDataDataType;
  /** The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once. */
  dimensions: positiveInt;
  /** A correction factor that is applied to the sampled data points before they are added to the origin. */
  factor?: decimal;
  /** The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit). */
  lowerLimit?: decimal;
  /** The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series. */
  origin: Quantity;
  /** The length of time between sampling times, measured in milliseconds. */
  period: decimal;
  /** The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit). */
  upperLimit?: decimal;
}
export interface SampledData extends _SampledData {
  constructor: { new (): SampledData };
}
export var SampledData: { new (): SampledData };

interface _SampledDataDataType extends _Element {
  value?: string;
}
export interface SampledDataDataType extends _SampledDataDataType {
  constructor: { new (): SampledDataDataType };
}
export var SampledDataDataType: { new (): SampledDataDataType };

export type SampledDataDataTypePrimitive = string;
type _SampledDataDataTypePrimitive = Primitive._string;

/** A container for slots of time that may be available for booking appointments.If the element is present, it must have either a @value, an @id, or extensions */
interface _Schedule extends _DomainResource {
  /** Whether this schedule record is in active use, or should not be used (such as was entered in error). */
  active?: boolean;
  /** The resource this Schedule resource is providing availability information for. These are expected to usually be one of HealthcareService, Location, Practitioner, PractitionerRole, Device, Patient or RelatedPerson. */
  actor: Reference[];
  /** Comments on the availability to describe any extended information. Such as custom constraints on the slots that may be associated. */
  comment?: string;
  /** External Ids for this item. */
  identifier?: Identifier[];
  /** The period of time that the slots that are attached to this Schedule resource cover (even if none exist). These  cover the amount of time that an organization's planning horizon; the interval for which they are currently accepting appointments. This does not define a "template" for planning outside these dates. */
  planningHorizon?: Period;
  /** A broad categorisation of the service that is to be performed during this appointment. */
  serviceCategory?: CodeableConcept;
  /** The specific service that is to be performed during this appointment. */
  serviceType?: CodeableConcept[];
  /** The specialty of a practitioner that would be required to perform the service requested in this appointment. */
  specialty?: CodeableConcept[];
}
export interface Schedule extends _Schedule {
  constructor: { new (): Schedule };
}
export var Schedule: { new (): Schedule };

/** What Search Comparator Codes are supported in searchIf the element is present, it must have either a @value, an @id, or extensions */
interface _SearchComparator extends _Element {
  value?: SearchComparatorList;
}
export interface SearchComparator extends _SearchComparator {
  constructor: { new (): SearchComparator };
}
export var SearchComparator: { new (): SearchComparator };

export type SearchComparatorList = 'eq' | 'ne' | 'gt' | 'lt' | 'ge' | 'le' | 'sa' | 'eb' | 'ap';
interface _SearchComparatorList extends _codePrimitive {
  content: SearchComparatorList;
}

/** Why an entry is in the result set - whether it's included as a match or because of an _include requirement.If the element is present, it must have either a @value, an @id, or extensions */
interface _SearchEntryMode extends _Element {
  value?: SearchEntryModeList;
}
export interface SearchEntryMode extends _SearchEntryMode {
  constructor: { new (): SearchEntryMode };
}
export var SearchEntryMode: { new (): SearchEntryMode };

export type SearchEntryModeList = 'match' | 'include' | 'outcome';
interface _SearchEntryModeList extends _codePrimitive {
  content: SearchEntryModeList;
}

/** A supported modifier for a search parameter.If the element is present, it must have either a @value, an @id, or extensions */
interface _SearchModifierCode extends _Element {
  value?: SearchModifierCodeList;
}
export interface SearchModifierCode extends _SearchModifierCode {
  constructor: { new (): SearchModifierCode };
}
export var SearchModifierCode: { new (): SearchModifierCode };

export type SearchModifierCodeList = 'missing' | 'exact' | 'contains' | 'not' | 'text' | 'in' | 'not-in' | 'below' | 'above' | 'type';
interface _SearchModifierCodeList extends _codePrimitive {
  content: SearchModifierCodeList;
}

/** A search parameter that defines a named search item that can be used to search/filter on a resource.If the element is present, it must have either a @value, an @id, or extensions */
interface _SearchParameter extends _DomainResource {
  /** The base resource type(s) that this search parameter can be used against. */
  base: ResourceType[];
  /** Contains the names of any search parameters which may be chained to the containing search parameter. Chained parameters may be added to search parameters of type reference, and specify that resources will only be returned if they contain a reference to a resource which matches the chained parameter value. Values for this field should be drawn from SearchParameter.code for a parameter on the target resource type. */
  chain?: string[];
  /** The code used in the URL or the parameter name in a parameters resource for this search parameter. */
  code: code;
  /** Comparators supported for the search parameter. */
  comparator?: SearchComparator[];
  /** Used to define the parts of a composite search parameter. */
  component?: SearchParameterComponent[];
  /** Contact details to assist a user in finding and communicating with the publisher. */
  contact?: ContactDetail[];
  /** The date  (and optionally time) when the search parameter was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the search parameter changes. */
  date?: dateTime;
  /** Where this search parameter is originally defined. If a derivedFrom is provided, then the details in the search parameter must be consistent with the definition from which it is defined. I.e. the parameter should have the same meaning, and (usually) the functionality should be a proper subset of the underlying search parameter. */
  derivedFrom?: uri;
  /** A free text natural language description of the search parameter from a consumer's perspective. and how it used. */
  description: markdown;
  /** A boolean value to indicate that this search parameter is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage. */
  experimental?: boolean;
  /** A FHIRPath expression that returns a set of elements for the search parameter. */
  expression?: string;
  /** A legal or geographic region in which the search parameter is intended to be used. */
  jurisdiction?: CodeableConcept[];
  /** A modifier supported for the search parameter. */
  modifier?: SearchModifierCode[];
  /** A natural language name identifying the search parameter. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
  name: string;
  /** The name of the individual or organization that published the search parameter. */
  publisher?: string;
  /** Explaination of why this search parameter is needed and why it has been designed as it has. */
  purpose?: markdown;
  /** The status of this search parameter. Enables tracking the life-cycle of the content. */
  status: PublicationStatus;
  /** Types of resource (if a resource is referenced). */
  target?: ResourceType[];
  /** The type of value a search parameter refers to, and how the content is interpreted. */
  type: SearchParamType;
  /** An absolute URI that is used to identify this search parameter when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this search parameter is (or will be) published. The URL SHOULD include the major version of the search parameter. For more information see [Technical and Business Versions](resource.html#versions). */
  url: uri;
  /** The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate search parameter instances. */
  useContext?: UsageContext[];
  /** The identifier that is used to identify this version of the search parameter when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the search parameter author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
  version?: string;
  /** An XPath expression that returns a set of elements for the search parameter. */
  xpath?: string;
  /** How the search parameter relates to the set of elements returned by evaluating the xpath query. */
  xpathUsage?: XPathUsageType;
}
export interface SearchParameter extends _SearchParameter {
  constructor: { new (): SearchParameter };
}
export var SearchParameter: { new (): SearchParameter };

/** A search parameter that defines a named search item that can be used to search/filter on a resource. */
interface _SearchParameterComponent extends _BackboneElement {
  /** The definition of the search parameter that describes this part. */
  definition: Reference;
  /** A sub-expression that defines how to extract values for this component from the output of the main SearchParameter.expression. */
  expression: string;
}
export interface SearchParameterComponent extends _SearchParameterComponent {
  constructor: { new (): SearchParameterComponent };
}
export var SearchParameterComponent: { new (): SearchParameterComponent };

/** If the element is present, it must have either a @value, an @id, or extensions */
interface _SearchParamType extends _Element {
  value?: SearchParamTypeList;
}
export interface SearchParamType extends _SearchParamType {
  constructor: { new (): SearchParamType };
}
export var SearchParamType: { new (): SearchParamType };

export type SearchParamTypeList = 'number' | 'date' | 'string' | 'token' | 'reference' | 'composite' | 'quantity' | 'uri';
interface _SearchParamTypeList extends _codePrimitive {
  content: SearchParamTypeList;
}

/** Raw data describing a biological sequence.If the element is present, it must have either a @value, an @id, or extensions */
interface _Sequence extends _DomainResource {
  /** Whether the sequence is numbered starting at 0 (0-based numbering or coordinates, inclusive start, exclusive end) or starting at 1 (1-based numbering, inclusive start and inclusive end). */
  coordinateSystem: integer;
  /** The method for sequencing, for example, chip information. */
  device?: Reference;
  /** A unique identifier for this particular sequence instance. This is a FHIR-defined id. */
  identifier?: Identifier[];
  /** Sequence that was observed. It is the result marked by referenceSeq along with variant records on referenceSeq. This shall starts from referenceSeq.windowStart and end by referenceSeq.windowEnd. */
  observedSeq?: string;
  /** The patient whose sequencing results are described by this resource. */
  patient?: Reference;
  /** The organization or lab that should be responsible for this result. */
  performer?: Reference;
  /** Pointer to next atomic sequence which at most contains one variant. */
  pointer?: Reference[];
  /** An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)). */
  quality?: SequenceQuality[];
  /** The number of copies of the seqeunce of interest. (RNASeq). */
  quantity?: Quantity;
  /** Coverage (read depth or depth) is the average number of reads representing a given nucleotide in the reconstructed sequence. */
  readCoverage?: integer;
  /** A sequence that is used as a reference to describe variants that are present in a sequence analyzed. */
  referenceSeq?: SequenceReferenceSeq;
  /** Configurations of the external repository. The repository shall store target's observedSeq or records related with target's observedSeq. */
  repository?: SequenceRepository[];
  /** Specimen used for sequencing. */
  specimen?: Reference;
  /** Amino Acid Sequence/ DNA Sequence / RNA Sequence. */
  type?: code;
  /** The definition of variant here originates from Sequence ontology ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)). This element can represent amino acid or nucleic sequence change(including insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment variation with the assist of CIGAR string. */
  variant?: SequenceVariant[];
}
export interface Sequence extends _Sequence {
  constructor: { new (): Sequence };
}
export var Sequence: { new (): Sequence };

/** Raw data describing a biological sequence. */
interface _SequenceQuality extends _BackboneElement {
  /** End position of the sequence.If the coordinate system is 0-based then end is is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position. */
  end?: integer;
  /** Harmonic mean of Recall and Precision, computed as: 2 * precision * recall / (precision + recall). */
  fScore?: decimal;
  /** The number of false positives where the non-REF alleles in the Truth and Query Call Sets match (i.e. cases where the truth is 1/1 and the query is 0/1 or similar). */
  gtFP?: decimal;
  /** Which method is used to get sequence quality. */
  method?: CodeableConcept;
  /** QUERY.TP / (QUERY.TP + QUERY.FP). */
  precision?: decimal;
  /** False positives, i.e. the number of sites in the Query Call Set for which there is no path through the Truth Call Set that is consistent with this site. Sites with correct variant but incorrect genotype are counted here. */
  queryFP?: decimal;
  /** True positives, from the perspective of the query data, i.e. the number of sites in the Query Call Set for which there are paths through the Truth Call Set that are consistent with all of the alleles at this site, and for which there is an accurate genotype call for the event. */
  queryTP?: decimal;
  /** TRUTH.TP / (TRUTH.TP + TRUTH.FN). */
  recall?: decimal;
  /** The score of an experimentally derived feature such as a p-value ([SO:0001685](http://www.sequenceontology.org/browser/current_svn/term/SO:0001685)). */
  score?: Quantity;
  /** Gold standard sequence used for comparing against. */
  standardSequence?: CodeableConcept;
  /** Start position of the sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive. */
  start?: integer;
  /** False negatives, i.e. the number of sites in the Truth Call Set for which there is no path through the Query Call Set that is consistent with all of the alleles at this site, or sites for which there is an inaccurate genotype call for the event. Sites with correct variant but incorrect genotype are counted here. */
  truthFN?: decimal;
  /** True positives, from the perspective of the truth data, i.e. the number of sites in the Truth Call Set for which there are paths through the Query Call Set that are consistent with all of the alleles at this site, and for which there is an accurate genotype call for the event. */
  truthTP?: decimal;
  /** INDEL / SNP / Undefined variant. */
  type: qualityType;
}
export interface SequenceQuality extends _SequenceQuality {
  constructor: { new (): SequenceQuality };
}
export var SequenceQuality: { new (): SequenceQuality };

/** Raw data describing a biological sequence. */
interface _SequenceReferenceSeq extends _BackboneElement {
  /** Structural unit composed of a nucleic acid molecule which controls its own replication through the interaction of specific proteins at one or more origins of replication ([SO:0000340](http://www.sequenceontology.org/browser/current_svn/term/SO:0000340)). */
  chromosome?: CodeableConcept;
  /** The Genome Build used for reference, following GRCh build versions e.g. 'GRCh 37'.  Version number must be included if a versioned release of a primary build was used. */
  genomeBuild?: string;
  /** Reference identifier of reference sequence submitted to NCBI. It must match the type in the Sequence.type field. For example, the prefix, “NG_” identifies reference sequence for genes, “NM_” for messenger RNA transcripts, and “NP_” for amino acid sequences. */
  referenceSeqId?: CodeableConcept;
  /** A Pointer to another Sequence entity as reference sequence. */
  referenceSeqPointer?: Reference;
  /** A string like "ACGT". */
  referenceSeqString?: string;
  /** Directionality of DNA sequence. Available values are "1" for the plus strand (5' to 3')/Watson/Sense/positive  and "-1" for the minus strand(3' to 5')/Crick/Antisense/negative. */
  strand?: integer;
  /** End position of the window on the reference sequence. If the coordinate system is 0-based then end is is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position. */
  windowEnd: integer;
  /** Start position of the window on the reference sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive. */
  windowStart: integer;
}
export interface SequenceReferenceSeq extends _SequenceReferenceSeq {
  constructor: { new (): SequenceReferenceSeq };
}
export var SequenceReferenceSeq: { new (): SequenceReferenceSeq };

/** Raw data describing a biological sequence. */
interface _SequenceRepository extends _BackboneElement {
  /** Id of the variant in this external repository. The server will understand how to use this id to call for more info about datasets in external repository. */
  datasetId?: string;
  /** URI of an external repository which contains further details about the genetics data. */
  name?: string;
  /** Id of the read in this external repository. */
  readsetId?: string;
  /** Click and see / RESTful API / Need login to see / RESTful API with authentication / Other ways to see resource. */
  type: repositoryType;
  /** URI of an external repository which contains further details about the genetics data. */
  url?: uri;
  /** Id of the variantset in this external repository. The server will understand how to use this id to call for more info about variantsets in external repository. */
  variantsetId?: string;
}
export interface SequenceRepository extends _SequenceRepository {
  constructor: { new (): SequenceRepository };
}
export var SequenceRepository: { new (): SequenceRepository };

/** Raw data describing a biological sequence. */
interface _SequenceVariant extends _BackboneElement {
  /** Extended CIGAR string for aligning the sequence with reference bases. See detailed documentation [here](http://support.illumina.com/help/SequencingAnalysisWorkflow/Content/Vault/Informatics/Sequencing_Analysis/CASAVA/swSEQ_mCA_ExtendedCIGARFormat.htm). */
  cigar?: string;
  /** End position of the variant on the reference sequence.If the coordinate system is 0-based then end is is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position. */
  end?: integer;
  /** An allele is one of a set of coexisting sequence variants of a gene ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)).  Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the observed  sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end. */
  observedAllele?: string;
  /** An allele is one of a set of coexisting sequence variants of a gene ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)). Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the reference sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end. */
  referenceAllele?: string;
  /** Start position of the variant on the  reference sequence.If the coordinate system is either 0-based or 1-based, then start position is inclusive. */
  start?: integer;
  /** A pointer to an Observation containing variant information. */
  variantPointer?: Reference;
}
export interface SequenceVariant extends _SequenceVariant {
  constructor: { new (): SequenceVariant };
}
export var SequenceVariant: { new (): SequenceVariant };

/** The ServiceDefinition describes a unit of decision support functionality that is made available as a service, such as immunization modules or drug-drug interaction checking.If the element is present, it must have either a @value, an @id, or extensions */
interface _ServiceDefinition extends _DomainResource {
  /** The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
  approvalDate?: date;
  /** Contact details to assist a user in finding and communicating with the publisher. */
  contact?: ContactDetail[];
  /** A contributor to the content of the module, including authors, editors, reviewers, and endorsers. */
  contributor?: Contributor[];
  /** A copyright statement relating to the service definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the service definition. */
  copyright?: markdown;
  /** Data requirements are a machine processable description of the data required by the module in order to perform a successful evaluation. */
  dataRequirement?: DataRequirement[];
  /** The date  (and optionally time) when the service definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the service definition changes. */
  date?: dateTime;
  /** A free text natural language description of the service definition from a consumer's perspective. */
  description?: markdown;
  /** The period during which the service definition content was or is planned to be in active use. */
  effectivePeriod?: Period;
  /** A boolean value to indicate that this service definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage. */
  experimental?: boolean;
  /** A formal identifier that is used to identify this service definition when it is represented in other formats, or referenced in a specification, model, design or an instance. This is used for CMS or NQF identifiers for a measure artifact. Note that at least one identifier is required for non-experimental active artifacts. */
  identifier?: Identifier[];
  /** A legal or geographic region in which the service definition is intended to be used. */
  jurisdiction?: CodeableConcept[];
  /** The date on which the resource content was last reviewed. Review happens periodically after approval, but doesn't change the original approval date. */
  lastReviewDate?: date;
  /** A natural language name identifying the service definition. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
  name?: string;
  /** A reference to the operation that is used to invoke this service. */
  operationDefinition?: Reference;
  /** The name of the individual or organization that published the service definition. */
  publisher?: string;
  /** Explaination of why this service definition is needed and why it has been designed as it has. */
  purpose?: markdown;
  /** Related resources such as additional documentation, justification, or bibliographic references. */
  relatedArtifact?: RelatedArtifact[];
  /** The status of this service definition. Enables tracking the life-cycle of the content. */
  status: PublicationStatus;
  /** A short, descriptive, user-friendly title for the service definition. */
  title?: string;
  /** Descriptive topics related to the module. Topics provide a high-level categorization of the module that can be useful for filtering and searching. */
  topic?: CodeableConcept[];
  /** The trigger element defines when the rule should be invoked. This information is used by consumers of the rule to determine how to integrate the rule into a specific workflow. */
  trigger?: TriggerDefinition[];
  /** An absolute URI that is used to identify this service definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this service definition is (or will be) published. The URL SHOULD include the major version of the service definition. For more information see [Technical and Business Versions](resource.html#versions). */
  url?: uri;
  /** A detailed description of how the module is used from a clinical perspective. */
  usage?: string;
  /** The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate service definition instances. */
  useContext?: UsageContext[];
  /** The identifier that is used to identify this version of the service definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the service definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
  version?: string;
}
export interface ServiceDefinition extends _ServiceDefinition {
  constructor: { new (): ServiceDefinition };
}
export var ServiceDefinition: { new (): ServiceDefinition };

/** A digital signature along with supporting context. The signature may be electronic/cryptographic in nature, or a graphical image representing a hand-written signature, or a signature process. Different signature approaches have different utilities.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _Signature extends _Element {
  /** The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty. */
  blob?: base64Binary;
  /** A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jwt for JWT, and image/* for a graphical image of a signature, etc. */
  contentType?: code;
  onBehalfOfReference?: Reference;
  onBehalfOfUri?: uri;
  /** An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document. */
  type: Coding[];
  /** When the digital signature was signed. */
  when: instant;
  whoReference: Reference;
  whoUri: uri;
}
export interface Signature extends _Signature {
  constructor: { new (): Signature };
}
export var Signature: { new (): Signature };

/** How slices are interpreted when evaluating an instance.If the element is present, it must have either a @value, an @id, or extensions */
interface _SlicingRules extends _Element {
  value?: SlicingRulesList;
}
export interface SlicingRules extends _SlicingRules {
  constructor: { new (): SlicingRules };
}
export var SlicingRules: { new (): SlicingRules };

export type SlicingRulesList = 'closed' | 'open' | 'openAtEnd';
interface _SlicingRulesList extends _codePrimitive {
  content: SlicingRulesList;
}

/** A slot of time on a schedule that may be available for booking appointments.If the element is present, it must have either a @value, an @id, or extensions */
interface _Slot extends _DomainResource {
  /** The style of appointment or patient that may be booked in the slot (not service type). */
  appointmentType?: CodeableConcept;
  /** Comments on the slot to describe any extended information. Such as custom constraints on the slot. */
  comment?: string;
  /** Date/Time that the slot is to conclude. */
  end: instant;
  /** External Ids for this item. */
  identifier?: Identifier[];
  /** This slot has already been overbooked, appointments are unlikely to be accepted for this time. */
  overbooked?: boolean;
  /** The schedule resource that this slot defines an interval of status information. */
  schedule: Reference;
  /** A broad categorisation of the service that is to be performed during this appointment. */
  serviceCategory?: CodeableConcept;
  /** The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource. */
  serviceType?: CodeableConcept[];
  /** The specialty of a practitioner that would be required to perform the service requested in this appointment. */
  specialty?: CodeableConcept[];
  /** Date/Time that the slot is to begin. */
  start: instant;
  /** busy | free | busy-unavailable | busy-tentative | entered-in-error. */
  status: SlotStatus;
}
export interface Slot extends _Slot {
  constructor: { new (): Slot };
}
export var Slot: { new (): Slot };

/** The free/busy status of the slot.If the element is present, it must have either a @value, an @id, or extensions */
interface _SlotStatus extends _Element {
  value?: SlotStatusList;
}
export interface SlotStatus extends _SlotStatus {
  constructor: { new (): SlotStatus };
}
export var SlotStatus: { new (): SlotStatus };

export type SlotStatusList = 'busy' | 'free' | 'busy-unavailable' | 'busy-tentative' | 'entered-in-error';
interface _SlotStatusList extends _codePrimitive {
  content: SlotStatusList;
}

/** A sample to be used for analysis.If the element is present, it must have either a @value, an @id, or extensions */
interface _Specimen extends _DomainResource {
  /** The identifier assigned by the lab when accessioning specimen(s). This is not necessarily the same as the specimen identifier, depending on local lab procedures. */
  accessionIdentifier?: Identifier;
  /** Details concerning the specimen collection. */
  collection?: SpecimenCollection;
  /** The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here. */
  container?: SpecimenContainer[];
  /** Id for specimen. */
  identifier?: Identifier[];
  /** To communicate any details or issues about the specimen or during the specimen collection. (for example: broken vial, sent with patient, frozen). */
  note?: Annotation[];
  /** Reference to the parent (source) specimen which is used when the specimen was either derived from or a component of another specimen. */
  parent?: Reference[];
  /** Details concerning processing and processing steps for the specimen. */
  processing?: SpecimenProcessing[];
  /** Time when specimen was received for processing or testing. */
  receivedTime?: dateTime;
  /** Details concerning a test or procedure request that required a specimen to be collected. */
  request?: Reference[];
  /** The availability of the specimen. */
  status?: SpecimenStatus;
  /** Where the specimen came from. This may be from the patient(s) or from the environment or a device. */
  subject: Reference;
  /** The kind of material that forms the specimen. */
  type?: CodeableConcept;
}
export interface Specimen extends _Specimen {
  constructor: { new (): Specimen };
}
export var Specimen: { new (): Specimen };

/** A sample to be used for analysis. */
interface _SpecimenCollection extends _BackboneElement {
  /** Anatomical location from which the specimen was collected (if subject is a patient). This is the target site.  This element is not used for environmental specimens. */
  bodySite?: CodeableConcept;
  collectedDateTime?: dateTime;
  collectedPeriod?: Period;
  /** Person who collected the specimen. */
  collector?: Reference;
  /** A coded value specifying the technique that is used to perform the procedure. */
  method?: CodeableConcept;
  /** The quantity of specimen collected; for instance the volume of a blood sample, or the physical measurement of an anatomic pathology sample. */
  quantity?: Quantity;
}
export interface SpecimenCollection extends _SpecimenCollection {
  constructor: { new (): SpecimenCollection };
}
export var SpecimenCollection: { new (): SpecimenCollection };

/** A sample to be used for analysis. */
interface _SpecimenContainer extends _BackboneElement {
  additiveCodeableConcept?: CodeableConcept;
  additiveReference?: Reference;
  /** The capacity (volume or other measure) the container may contain. */
  capacity?: Quantity;
  /** Textual description of the container. */
  description?: string;
  /** Id for container. There may be multiple; a manufacturer's bar code, lab assigned identifier, etc. The container ID may differ from the specimen id in some circumstances. */
  identifier?: Identifier[];
  /** The quantity of specimen in the container; may be volume, dimensions, or other appropriate measurements, depending on the specimen type. */
  specimenQuantity?: Quantity;
  /** The type of container associated with the specimen (e.g. slide, aliquot, etc.). */
  type?: CodeableConcept;
}
export interface SpecimenContainer extends _SpecimenContainer {
  constructor: { new (): SpecimenContainer };
}
export var SpecimenContainer: { new (): SpecimenContainer };

/** A sample to be used for analysis. */
interface _SpecimenProcessing extends _BackboneElement {
  /** Material used in the processing step. */
  additive?: Reference[];
  /** Textual description of procedure. */
  description?: string;
  /** A coded value specifying the procedure used to process the specimen. */
  procedure?: CodeableConcept;
  timeDateTime?: dateTime;
  timePeriod?: Period;
}
export interface SpecimenProcessing extends _SpecimenProcessing {
  constructor: { new (): SpecimenProcessing };
}
export var SpecimenProcessing: { new (): SpecimenProcessing };

/** Codes providing the status/availability of a specimen.If the element is present, it must have either a @value, an @id, or extensions */
interface _SpecimenStatus extends _Element {
  value?: SpecimenStatusList;
}
export interface SpecimenStatus extends _SpecimenStatus {
  constructor: { new (): SpecimenStatus };
}
export var SpecimenStatus: { new (): SpecimenStatus };

export type SpecimenStatusList = 'available' | 'unavailable' | 'unsatisfactory' | 'entered-in-error';
interface _SpecimenStatusList extends _codePrimitive {
  content: SpecimenStatusList;
}

/** A sequence of Unicode charactersNote that FHIR strings may not exceed 1MB in sizeIf the element is present, it must have either a @value, an @id, or extensions */
interface _string extends _Element {
  value?: string;
}
export interface fhirstring extends _string {
  constructor: { new (): string };
}
export var string: { new (): string };

export type stringPrimitive = string;
type _stringPrimitive = Primitive._string;

/** A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.If the element is present, it must have either a @value, an @id, or extensions */
interface _StructureDefinition extends _DomainResource {
  /** Whether structure this definition describes is abstract or not  - that is, whether the structure is not intended to be instantiated. For Resources and Data types, abstract types will never be exchanged  between systems. */
  abstract: boolean;
  /** An absolute URI that is the base structure from which this type is derived, either by specialization or constraint. */
  baseDefinition?: uri;
  /** Contact details to assist a user in finding and communicating with the publisher. */
  contact?: ContactDetail[];
  /** Identifies the types of resource or data type elements to which the extension can be applied. */
  context?: string[];
  /** A set of rules as Fluent Invariants about when the extension can be used (e.g. co-occurrence variants for the extension). */
  contextInvariant?: string[];
  /** If this is an extension, Identifies the context within FHIR resources where the extension can be used. */
  contextType?: ExtensionContext;
  /** A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure definition. */
  copyright?: markdown;
  /** The date  (and optionally time) when the structure definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure definition changes. */
  date?: dateTime;
  /** How the type relates to the baseDefinition. */
  derivation?: TypeDerivationRule;
  /** A free text natural language description of the structure definition from a consumer's perspective. */
  description?: markdown;
  /** A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies. */
  differential?: StructureDefinitionDifferential;
  /** A boolean value to indicate that this structure definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage. */
  experimental?: boolean;
  /** The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 3.0.1 for this version. */
  fhirVersion?: id;
  /** A formal identifier that is used to identify this structure definition when it is represented in other formats, or referenced in a specification, model, design or an instance. */
  identifier?: Identifier[];
  /** A legal or geographic region in which the structure definition is intended to be used. */
  jurisdiction?: CodeableConcept[];
  /** A set of key words or terms from external terminologies that may be used to assist with indexing and searching of templates. */
  keyword?: Coding[];
  /** Defines the kind of structure that this definition is describing. */
  kind: StructureDefinitionKind;
  /** An external specification that the content is mapped to. */
  mapping?: StructureDefinitionMapping[];
  /** A natural language name identifying the structure definition. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
  name: string;
  /** The name of the individual or organization that published the structure definition. */
  publisher?: string;
  /** Explaination of why this structure definition is needed and why it has been designed as it has. */
  purpose?: markdown;
  /** A snapshot view is expressed in a stand alone form that can be used and interpreted without considering the base StructureDefinition. */
  snapshot?: StructureDefinitionSnapshot;
  /** The status of this structure definition. Enables tracking the life-cycle of the content. */
  status: PublicationStatus;
  /** A short, descriptive, user-friendly title for the structure definition. */
  title?: string;
  /** The type this structure describes. If the derivation kind is 'specialization' then this is the master definition for a type, and there is always one of these (a data type, an extension, a resource, including abstract ones). Otherwise the structure definition is a constraint on the stated type (and in this case, the type cannot be an abstract type). */
  type: code;
  /** An absolute URI that is used to identify this structure definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this structure definition is (or will be) published. The URL SHOULD include the major version of the structure definition. For more information see [Technical and Business Versions](resource.html#versions). */
  url: uri;
  /** The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate structure definition instances. */
  useContext?: UsageContext[];
  /** The identifier that is used to identify this version of the structure definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
  version?: string;
}
export interface StructureDefinition extends _StructureDefinition {
  constructor: { new (): StructureDefinition };
}
export var StructureDefinition: { new (): StructureDefinition };

/** A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types. */
interface _StructureDefinitionDifferential extends _BackboneElement {
  /** Captures constraints on each element within the resource. */
  element: ElementDefinition[];
}
export interface StructureDefinitionDifferential extends _StructureDefinitionDifferential {
  constructor: { new (): StructureDefinitionDifferential };
}
export var StructureDefinitionDifferential: { new (): StructureDefinitionDifferential };

/** Defines the type of structure that a definition is describing.If the element is present, it must have either a @value, an @id, or extensions */
interface _StructureDefinitionKind extends _Element {
  value?: StructureDefinitionKindList;
}
export interface StructureDefinitionKind extends _StructureDefinitionKind {
  constructor: { new (): StructureDefinitionKind };
}
export var StructureDefinitionKind: { new (): StructureDefinitionKind };

export type StructureDefinitionKindList = 'primitive-type' | 'complex-type' | 'resource' | 'logical';
interface _StructureDefinitionKindList extends _codePrimitive {
  content: StructureDefinitionKindList;
}

/** A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types. */
interface _StructureDefinitionMapping extends _BackboneElement {
  /** Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage. */
  comment?: string;
  /** An Internal id that is used to identify this mapping set when specific mappings are made. */
  identity: id;
  /** A name for the specification that is being mapped to. */
  name?: string;
  /** An absolute URI that identifies the specification that this mapping is expressed to. */
  uri?: uri;
}
export interface StructureDefinitionMapping extends _StructureDefinitionMapping {
  constructor: { new (): StructureDefinitionMapping };
}
export var StructureDefinitionMapping: { new (): StructureDefinitionMapping };

/** A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types. */
interface _StructureDefinitionSnapshot extends _BackboneElement {
  /** Captures constraints on each element within the resource. */
  element: ElementDefinition[];
}
export interface StructureDefinitionSnapshot extends _StructureDefinitionSnapshot {
  constructor: { new (): StructureDefinitionSnapshot };
}
export var StructureDefinitionSnapshot: { new (): StructureDefinitionSnapshot };

/** A Map of relationships between 2 structures that can be used to transform data.If the element is present, it must have either a @value, an @id, or extensions */
interface _StructureMap extends _DomainResource {
  /** Contact details to assist a user in finding and communicating with the publisher. */
  contact?: ContactDetail[];
  /** A copyright statement relating to the structure map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure map. */
  copyright?: markdown;
  /** The date  (and optionally time) when the structure map was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure map changes. */
  date?: dateTime;
  /** A free text natural language description of the structure map from a consumer's perspective. */
  description?: markdown;
  /** A boolean value to indicate that this structure map is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage. */
  experimental?: boolean;
  /** Organizes the mapping into managable chunks for human review/ease of maintenance. */
  group: StructureMapGroup[];
  /** A formal identifier that is used to identify this structure map when it is represented in other formats, or referenced in a specification, model, design or an instance. */
  identifier?: Identifier[];
  /** Other maps used by this map (canonical URLs). */
  import?: uri[];
  /** A legal or geographic region in which the structure map is intended to be used. */
  jurisdiction?: CodeableConcept[];
  /** A natural language name identifying the structure map. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
  name: string;
  /** The name of the individual or organization that published the structure map. */
  publisher?: string;
  /** Explaination of why this structure map is needed and why it has been designed as it has. */
  purpose?: markdown;
  /** The status of this structure map. Enables tracking the life-cycle of the content. */
  status: PublicationStatus;
  /** A structure definition used by this map. The structure definition may describe instances that are converted, or the instances that are produced. */
  structure?: StructureMapStructure[];
  /** A short, descriptive, user-friendly title for the structure map. */
  title?: string;
  /** An absolute URI that is used to identify this structure map when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this structure map is (or will be) published. The URL SHOULD include the major version of the structure map. For more information see [Technical and Business Versions](resource.html#versions). */
  url: uri;
  /** The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate structure map instances. */
  useContext?: UsageContext[];
  /** The identifier that is used to identify this version of the structure map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
  version?: string;
}
export interface StructureMap extends _StructureMap {
  constructor: { new (): StructureMap };
}
export var StructureMap: { new (): StructureMap };

/** How to interpret the contextIf the element is present, it must have either a @value, an @id, or extensions */
interface _StructureMapContextType extends _Element {
  value?: StructureMapContextTypeList;
}
export interface StructureMapContextType extends _StructureMapContextType {
  constructor: { new (): StructureMapContextType };
}
export var StructureMapContextType: { new (): StructureMapContextType };

export type StructureMapContextTypeList = 'type' | 'variable';
interface _StructureMapContextTypeList extends _codePrimitive {
  content: StructureMapContextTypeList;
}

/** A Map of relationships between 2 structures that can be used to transform data. */
interface _StructureMapDependent extends _BackboneElement {
  /** Name of a rule or group to apply. */
  name: id;
  /** Variable to pass to the rule or group. */
  variable: string[];
}
export interface StructureMapDependent extends _StructureMapDependent {
  constructor: { new (): StructureMapDependent };
}
export var StructureMapDependent: { new (): StructureMapDependent };

/** A Map of relationships between 2 structures that can be used to transform data. */
interface _StructureMapGroup extends _BackboneElement {
  /** Additional supporting documentation that explains the purpose of the group and the types of mappings within it. */
  documentation?: string;
  /** Another group that this group adds rules to. */
  extends?: id;
  /** A name assigned to an instance of data. The instance must be provided when the mapping is invoked. */
  input: StructureMapInput[];
  /** A unique name for the group for the convenience of human readers. */
  name: id;
  /** Transform Rule from source to target. */
  rule: StructureMapRule[];
  /** If this is the default rule set to apply for thie source type, or this combination of types. */
  typeMode: StructureMapGroupTypeMode;
}
export interface StructureMapGroup extends _StructureMapGroup {
  constructor: { new (): StructureMapGroup };
}
export var StructureMapGroup: { new (): StructureMapGroup };

/** If this is the default rule set to apply for the source type, or this combination of typesIf the element is present, it must have either a @value, an @id, or extensions */
interface _StructureMapGroupTypeMode extends _Element {
  value?: StructureMapGroupTypeModeList;
}
export interface StructureMapGroupTypeMode extends _StructureMapGroupTypeMode {
  constructor: { new (): StructureMapGroupTypeMode };
}
export var StructureMapGroupTypeMode: { new (): StructureMapGroupTypeMode };

export type StructureMapGroupTypeModeList = 'none' | 'types' | 'type-and-types';
interface _StructureMapGroupTypeModeList extends _codePrimitive {
  content: StructureMapGroupTypeModeList;
}

/** A Map of relationships between 2 structures that can be used to transform data. */
interface _StructureMapInput extends _BackboneElement {
  /** Documentation for this instance of data. */
  documentation?: string;
  /** Mode for this instance of data. */
  mode: StructureMapInputMode;
  /** Name for this instance of data. */
  name: id;
  /** Type for this instance of data. */
  type?: string;
}
export interface StructureMapInput extends _StructureMapInput {
  constructor: { new (): StructureMapInput };
}
export var StructureMapInput: { new (): StructureMapInput };

/** Mode for this instance of dataIf the element is present, it must have either a @value, an @id, or extensions */
interface _StructureMapInputMode extends _Element {
  value?: StructureMapInputModeList;
}
export interface StructureMapInputMode extends _StructureMapInputMode {
  constructor: { new (): StructureMapInputMode };
}
export var StructureMapInputMode: { new (): StructureMapInputMode };

export type StructureMapInputModeList = 'source' | 'target';
interface _StructureMapInputModeList extends _codePrimitive {
  content: StructureMapInputModeList;
}

/** How the referenced structure is used in this mappingIf the element is present, it must have either a @value, an @id, or extensions */
interface _StructureMapModelMode extends _Element {
  value?: StructureMapModelModeList;
}
export interface StructureMapModelMode extends _StructureMapModelMode {
  constructor: { new (): StructureMapModelMode };
}
export var StructureMapModelMode: { new (): StructureMapModelMode };

export type StructureMapModelModeList = 'source' | 'queried' | 'target' | 'produced';
interface _StructureMapModelModeList extends _codePrimitive {
  content: StructureMapModelModeList;
}

/** A Map of relationships between 2 structures that can be used to transform data. */
interface _StructureMapParameter extends _BackboneElement {
  valueBoolean: boolean;
  valueDecimal: decimal;
  valueId: id;
  valueInteger: integer;
  valueString: string;
}
export interface StructureMapParameter extends _StructureMapParameter {
  constructor: { new (): StructureMapParameter };
}
export var StructureMapParameter: { new (): StructureMapParameter };

/** A Map of relationships between 2 structures that can be used to transform data. */
interface _StructureMapRule extends _BackboneElement {
  /** Which other rules to apply in the context of this rule. */
  dependent?: StructureMapDependent[];
  /** Documentation for this instance of data. */
  documentation?: string;
  /** Name of the rule for internal references. */
  name: id;
  /** Rules contained in this rule. */
  rule?: StructureMapRule[];
  /** Source inputs to the mapping. */
  source: StructureMapSource[];
  /** Content to create because of this mapping rule. */
  target?: StructureMapTarget[];
}
export interface StructureMapRule extends _StructureMapRule {
  constructor: { new (): StructureMapRule };
}
export var StructureMapRule: { new (): StructureMapRule };

/** A Map of relationships between 2 structures that can be used to transform data. */
interface _StructureMapSource extends _BackboneElement {
  /** FHIRPath expression  - must be true or the mapping engine throws an error instead of completing. */
  check?: string;
  /** FHIRPath expression  - must be true or the rule does not apply. */
  condition?: string;
  /** Type or variable this rule applies to. */
  context: id;
  defaultValueAddress?: Address;
  defaultValueAge?: Age;
  defaultValueAnnotation?: Annotation;
  defaultValueAttachment?: Attachment;
  defaultValueBase64Binary?: base64Binary;
  defaultValueBoolean?: boolean;
  defaultValueCode?: code;
  defaultValueCodeableConcept?: CodeableConcept;
  defaultValueCoding?: Coding;
  defaultValueContactPoint?: ContactPoint;
  defaultValueCount?: Count;
  defaultValueDate?: date;
  defaultValueDateTime?: dateTime;
  defaultValueDecimal?: decimal;
  defaultValueDistance?: Distance;
  defaultValueDuration?: Duration;
  defaultValueHumanName?: HumanName;
  defaultValueId?: id;
  defaultValueIdentifier?: Identifier;
  defaultValueInstant?: instant;
  defaultValueInteger?: integer;
  defaultValueMarkdown?: markdown;
  defaultValueMeta?: Meta;
  defaultValueMoney?: Money;
  defaultValueOid?: oid;
  defaultValuePeriod?: Period;
  defaultValuePositiveInt?: positiveInt;
  defaultValueQuantity?: Quantity;
  defaultValueRange?: Range;
  defaultValueRatio?: Ratio;
  defaultValueReference?: Reference;
  defaultValueSampledData?: SampledData;
  defaultValueSignature?: Signature;
  defaultValueString?: string;
  defaultValueTime?: time;
  defaultValueTiming?: Timing;
  defaultValueUnsignedInt?: unsignedInt;
  defaultValueUri?: uri;
  /** Optional field for this source. */
  element?: string;
  /** How to handle the list mode for this element. */
  listMode?: StructureMapSourceListMode;
  /** Specified maximum cardinality for the element - a number or a "*". This is optional; if present, it acts an implicit check on the input content (* just serves as documentation; it's the default value). */
  max?: string;
  /** Specified minimum cardinality for the element. This is optional; if present, it acts an implicit check on the input content. */
  min?: integer;
  /** Specified type for the element. This works as a condition on the mapping - use for polymorphic elements. */
  type?: string;
  /** Named context for field, if a field is specified. */
  variable?: id;
}
export interface StructureMapSource extends _StructureMapSource {
  constructor: { new (): StructureMapSource };
}
export var StructureMapSource: { new (): StructureMapSource };

/** If field is a list, how to manage the sourceIf the element is present, it must have either a @value, an @id, or extensions */
interface _StructureMapSourceListMode extends _Element {
  value?: StructureMapSourceListModeList;
}
export interface StructureMapSourceListMode extends _StructureMapSourceListMode {
  constructor: { new (): StructureMapSourceListMode };
}
export var StructureMapSourceListMode: { new (): StructureMapSourceListMode };

export type StructureMapSourceListModeList = 'first' | 'not_first' | 'last' | 'not_last' | 'only_one';
interface _StructureMapSourceListModeList extends _codePrimitive {
  content: StructureMapSourceListModeList;
}

/** A Map of relationships between 2 structures that can be used to transform data. */
interface _StructureMapStructure extends _BackboneElement {
  /** The name used for this type in the map. */
  alias?: string;
  /** Documentation that describes how the structure is used in the mapping. */
  documentation?: string;
  /** How the referenced structure is used in this mapping. */
  mode: StructureMapModelMode;
  /** The canonical URL that identifies the structure. */
  url: uri;
}
export interface StructureMapStructure extends _StructureMapStructure {
  constructor: { new (): StructureMapStructure };
}
export var StructureMapStructure: { new (): StructureMapStructure };

/** A Map of relationships between 2 structures that can be used to transform data. */
interface _StructureMapTarget extends _BackboneElement {
  /** Type or variable this rule applies to. */
  context?: id;
  /** How to interpret the context. */
  contextType?: StructureMapContextType;
  /** Field to create in the context. */
  element?: string;
  /** If field is a list, how to manage the list. */
  listMode?: StructureMapTargetListMode[];
  /** Internal rule reference for shared list items. */
  listRuleId?: id;
  /** Parameters to the transform. */
  parameter?: StructureMapParameter[];
  /** How the data is copied / created. */
  transform?: StructureMapTransform;
  /** Named context for field, if desired, and a field is specified. */
  variable?: id;
}
export interface StructureMapTarget extends _StructureMapTarget {
  constructor: { new (): StructureMapTarget };
}
export var StructureMapTarget: { new (): StructureMapTarget };

/** If field is a list, how to manage the productionIf the element is present, it must have either a @value, an @id, or extensions */
interface _StructureMapTargetListMode extends _Element {
  value?: StructureMapTargetListModeList;
}
export interface StructureMapTargetListMode extends _StructureMapTargetListMode {
  constructor: { new (): StructureMapTargetListMode };
}
export var StructureMapTargetListMode: { new (): StructureMapTargetListMode };

export type StructureMapTargetListModeList = 'first' | 'share' | 'last' | 'collate';
interface _StructureMapTargetListModeList extends _codePrimitive {
  content: StructureMapTargetListModeList;
}

/** How data is copied/createdIf the element is present, it must have either a @value, an @id, or extensions */
interface _StructureMapTransform extends _Element {
  value?: StructureMapTransformList;
}
export interface StructureMapTransform extends _StructureMapTransform {
  constructor: { new (): StructureMapTransform };
}
export var StructureMapTransform: { new (): StructureMapTransform };

export type StructureMapTransformList =
  | 'create'
  | 'copy'
  | 'truncate'
  | 'escape'
  | 'cast'
  | 'append'
  | 'translate'
  | 'reference'
  | 'dateOp'
  | 'uuid'
  | 'pointer'
  | 'evaluate'
  | 'cc'
  | 'c'
  | 'qty'
  | 'id'
  | 'cp';
interface _StructureMapTransformList extends _codePrimitive {
  content: StructureMapTransformList;
}

/** The subscription resource is used to define a push based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system is able to take an appropriate action.If the element is present, it must have either a @value, an @id, or extensions */
interface _Subscription extends _DomainResource {
  /** Details where to send notifications when resources are received that meet the criteria. */
  channel: SubscriptionChannel;
  /** Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting. */
  contact?: ContactPoint[];
  /** The rules that the server should use to determine when to generate notifications for this subscription. */
  criteria: string;
  /** The time for the server to turn the subscription off. */
  end?: instant;
  /** A record of the last error that occurred when the server processed a notification. */
  error?: string;
  /** A description of why this subscription is defined. */
  reason: string;
  /** The status of the subscription, which marks the server state for managing the subscription. */
  status: SubscriptionStatus;
  /** A tag to add to any resource that matches the criteria, after the subscription is processed. */
  tag?: Coding[];
}
export interface Subscription extends _Subscription {
  constructor: { new (): Subscription };
}
export var Subscription: { new (): Subscription };

/** The subscription resource is used to define a push based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system is able to take an appropriate action. */
interface _SubscriptionChannel extends _BackboneElement {
  /** The uri that describes the actual end-point to send messages to. */
  endpoint?: uri;
  /** Additional headers / information to send as part of the notification. */
  header?: string[];
  /** The mime type to send the payload in - either application/fhir+xml, or application/fhir+json. If the payload is not present, then there is no payload in the notification, just a notification. */
  payload?: string;
  /** The type of channel to send notifications on. */
  type: SubscriptionChannelType;
}
export interface SubscriptionChannel extends _SubscriptionChannel {
  constructor: { new (): SubscriptionChannel };
}
export var SubscriptionChannel: { new (): SubscriptionChannel };

/** The type of method used to execute a subscription.If the element is present, it must have either a @value, an @id, or extensions */
interface _SubscriptionChannelType extends _Element {
  value?: SubscriptionChannelTypeList;
}
export interface SubscriptionChannelType extends _SubscriptionChannelType {
  constructor: { new (): SubscriptionChannelType };
}
export var SubscriptionChannelType: { new (): SubscriptionChannelType };

export type SubscriptionChannelTypeList = 'rest-hook' | 'websocket' | 'email' | 'sms' | 'message';
interface _SubscriptionChannelTypeList extends _codePrimitive {
  content: SubscriptionChannelTypeList;
}

/** The status of a subscription.If the element is present, it must have either a @value, an @id, or extensions */
interface _SubscriptionStatus extends _Element {
  value?: SubscriptionStatusList;
}
export interface SubscriptionStatus extends _SubscriptionStatus {
  constructor: { new (): SubscriptionStatus };
}
export var SubscriptionStatus: { new (): SubscriptionStatus };

export type SubscriptionStatusList = 'requested' | 'active' | 'error' | 'off';
interface _SubscriptionStatusList extends _codePrimitive {
  content: SubscriptionStatusList;
}

/** A homogeneous material with a definite composition.If the element is present, it must have either a @value, an @id, or extensions */
interface _Substance extends _DomainResource {
  /** A code that classifies the general type of substance.  This is used  for searching, sorting and display purposes. */
  category?: CodeableConcept[];
  /** A code (or set of codes) that identify this substance. */
  code: CodeableConcept;
  /** A description of the substance - its appearance, handling requirements, and other usage notes. */
  description?: string;
  /** Unique identifier for the substance. */
  identifier?: Identifier[];
  /** A substance can be composed of other substances. */
  ingredient?: SubstanceIngredient[];
  /** Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance. */
  instance?: SubstanceInstance[];
  /** A code to indicate if the substance is actively used. */
  status?: FHIRSubstanceStatus;
}
export interface Substance extends _Substance {
  constructor: { new (): Substance };
}
export var Substance: { new (): Substance };

/** A homogeneous material with a definite composition. */
interface _SubstanceIngredient extends _BackboneElement {
  /** The amount of the ingredient in the substance - a concentration ratio. */
  quantity?: Ratio;
  substanceCodeableConcept: CodeableConcept;
  substanceReference: Reference;
}
export interface SubstanceIngredient extends _SubstanceIngredient {
  constructor: { new (): SubstanceIngredient };
}
export var SubstanceIngredient: { new (): SubstanceIngredient };

/** A homogeneous material with a definite composition. */
interface _SubstanceInstance extends _BackboneElement {
  /** When the substance is no longer valid to use. For some substances, a single arbitrary date is used for expiry. */
  expiry?: dateTime;
  /** Identifier associated with the package/container (usually a label affixed directly). */
  identifier?: Identifier;
  /** The amount of the substance. */
  quantity?: Quantity;
}
export interface SubstanceInstance extends _SubstanceInstance {
  constructor: { new (): SubstanceInstance };
}
export var SubstanceInstance: { new (): SubstanceInstance };

/** Record of delivery of what is supplied.If the element is present, it must have either a @value, an @id, or extensions */
interface _SupplyDelivery extends _DomainResource {
  /** A plan, proposal or order that is fulfilled in whole or in part by this event. */
  basedOn?: Reference[];
  /** Identification of the facility/location where the Supply was shipped to, as part of the dispense event. */
  destination?: Reference;
  /** Identifier assigned by the dispensing facility when the item(s) is dispensed. */
  identifier?: Identifier;
  occurrenceDateTime?: dateTime;
  occurrencePeriod?: Period;
  occurrenceTiming?: Timing;
  /** A larger event of which this particular event is a component or step. */
  partOf?: Reference[];
  /** A link to a resource representing the person whom the delivered item is for. */
  patient?: Reference;
  /** Identifies the person who picked up the Supply. */
  receiver?: Reference[];
  /** A code specifying the state of the dispense event. */
  status?: SupplyDeliveryStatus;
  /** The item that is being delivered or has been supplied. */
  suppliedItem?: SupplyDeliverySuppliedItem;
  /** The individual responsible for dispensing the medication, supplier or device. */
  supplier?: Reference;
  /** Indicates the type of dispensing event that is performed. Examples include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc. */
  type?: CodeableConcept;
}
export interface SupplyDelivery extends _SupplyDelivery {
  constructor: { new (): SupplyDelivery };
}
export var SupplyDelivery: { new (): SupplyDelivery };

/** Status of the supply delivery.If the element is present, it must have either a @value, an @id, or extensions */
interface _SupplyDeliveryStatus extends _Element {
  value?: SupplyDeliveryStatusList;
}
export interface SupplyDeliveryStatus extends _SupplyDeliveryStatus {
  constructor: { new (): SupplyDeliveryStatus };
}
export var SupplyDeliveryStatus: { new (): SupplyDeliveryStatus };

export type SupplyDeliveryStatusList = 'in-progress' | 'completed' | 'abandoned' | 'entered-in-error';
interface _SupplyDeliveryStatusList extends _codePrimitive {
  content: SupplyDeliveryStatusList;
}

/** Record of delivery of what is supplied. */
interface _SupplyDeliverySuppliedItem extends _BackboneElement {
  itemCodeableConcept?: CodeableConcept;
  itemReference?: Reference;
  /** The amount of supply that has been dispensed. Includes unit of measure. */
  quantity?: Quantity;
}
export interface SupplyDeliverySuppliedItem extends _SupplyDeliverySuppliedItem {
  constructor: { new (): SupplyDeliverySuppliedItem };
}
export var SupplyDeliverySuppliedItem: { new (): SupplyDeliverySuppliedItem };

/** A record of a request for a medication, substance or device used in the healthcare setting.If the element is present, it must have either a @value, an @id, or extensions */
interface _SupplyRequest extends _DomainResource {
  /** When the request was made. */
  authoredOn?: dateTime;
  /** Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process. */
  category?: CodeableConcept;
  /** Where the supply is expected to come from. */
  deliverFrom?: Reference;
  /** Where the supply is destined to go. */
  deliverTo?: Reference;
  /** Unique identifier for this supply request. */
  identifier?: Identifier;
  occurrenceDateTime?: dateTime;
  occurrencePeriod?: Period;
  occurrenceTiming?: Timing;
  /** The item being requested. */
  orderedItem?: SupplyRequestOrderedItem;
  /** Indicates how quickly this SupplyRequest should be addressed with respect to other requests. */
  priority?: RequestPriority;
  reasonCodeableConcept?: CodeableConcept;
  reasonReference?: Reference;
  /** The individual who initiated the request and has responsibility for its activation. */
  requester?: SupplyRequestRequester;
  /** Status of the supply request. */
  status?: SupplyRequestStatus;
  /** Who is intended to fulfill the request. */
  supplier?: Reference[];
}
export interface SupplyRequest extends _SupplyRequest {
  constructor: { new (): SupplyRequest };
}
export var SupplyRequest: { new (): SupplyRequest };

/** A record of a request for a medication, substance or device used in the healthcare setting. */
interface _SupplyRequestOrderedItem extends _BackboneElement {
  itemCodeableConcept?: CodeableConcept;
  itemReference?: Reference;
  /** The amount that is being ordered of the indicated item. */
  quantity: Quantity;
}
export interface SupplyRequestOrderedItem extends _SupplyRequestOrderedItem {
  constructor: { new (): SupplyRequestOrderedItem };
}
export var SupplyRequestOrderedItem: { new (): SupplyRequestOrderedItem };

/** A record of a request for a medication, substance or device used in the healthcare setting. */
interface _SupplyRequestRequester extends _BackboneElement {
  /** The device, practitioner, etc. who initiated the request. */
  agent: Reference;
  /** The organization the device or practitioner was acting on behalf of. */
  onBehalfOf?: Reference;
}
export interface SupplyRequestRequester extends _SupplyRequestRequester {
  constructor: { new (): SupplyRequestRequester };
}
export var SupplyRequestRequester: { new (): SupplyRequestRequester };

/** Status of the supply requestIf the element is present, it must have either a @value, an @id, or extensions */
interface _SupplyRequestStatus extends _Element {
  value?: SupplyRequestStatusList;
}
export interface SupplyRequestStatus extends _SupplyRequestStatus {
  constructor: { new (): SupplyRequestStatus };
}
export var SupplyRequestStatus: { new (): SupplyRequestStatus };

export type SupplyRequestStatusList = 'draft' | 'active' | 'suspended' | 'cancelled' | 'completed' | 'entered-in-error' | 'unknown';
interface _SupplyRequestStatusList extends _codePrimitive {
  content: SupplyRequestStatusList;
}

/** Operations supported by REST at the system level.If the element is present, it must have either a @value, an @id, or extensions */
interface _SystemRestfulInteraction extends _Element {
  value?: SystemRestfulInteractionList;
}
export interface SystemRestfulInteraction extends _SystemRestfulInteraction {
  constructor: { new (): SystemRestfulInteraction };
}
export var SystemRestfulInteraction: { new (): SystemRestfulInteraction };

export type SystemRestfulInteractionList = 'transaction' | 'batch' | 'search-system' | 'history-system';
interface _SystemRestfulInteractionList extends _codePrimitive {
  content: SystemRestfulInteractionList;
}

/** How to manage the intersection between a fixed version in a value set, and a fixed version of the system in the expansion profileIf the element is present, it must have either a @value, an @id, or extensions */
interface _SystemVersionProcessingMode extends _Element {
  value?: SystemVersionProcessingModeList;
}
export interface SystemVersionProcessingMode extends _SystemVersionProcessingMode {
  constructor: { new (): SystemVersionProcessingMode };
}
export var SystemVersionProcessingMode: { new (): SystemVersionProcessingMode };

export type SystemVersionProcessingModeList = 'default' | 'check' | 'override';
interface _SystemVersionProcessingModeList extends _codePrimitive {
  content: SystemVersionProcessingModeList;
}

/** A task to be performed.If the element is present, it must have either a @value, an @id, or extensions */
interface _Task extends _DomainResource {
  /** The date and time this task was created. */
  authoredOn?: dateTime;
  /** BasedOn refers to a higher-level authorization that triggered the creation of the task.  It references a "request" resource such as a ProcedureRequest, MedicationRequest, ProcedureRequest, CarePlan, etc. which is distinct from the "request" resource the task is seeking to fulfil.  This latter resource is referenced by FocusOn.  For example, based on a ProcedureRequest (= BasedOn), a task is created to fulfil a procedureRequest ( = FocusOn ) to collect a specimen from a patient. */
  basedOn?: Reference[];
  /** Contains business-specific nuances of the business state. */
  businessStatus?: CodeableConcept;
  /** A name or code (or both) briefly describing what the task involves. */
  code?: CodeableConcept;
  /** The healthcare event  (e.g. a patient and healthcare provider interaction) during which this task was created. */
  context?: Reference;
  definitionReference?: Reference;
  definitionUri?: uri;
  /** A free-text description of what is to be performed. */
  description?: string;
  /** Identifies the time action was first taken against the task (start) and/or the time final action was taken against the task prior to marking it as completed (end). */
  executionPeriod?: Period;
  /** The request being actioned or the resource being manipulated by this task. */
  focus?: Reference;
  /** The entity who benefits from the performance of the service specified in the task (e.g., the patient). */
  for?: Reference;
  /** An identifier that links together multiple tasks and other requests that were created in the same context. */
  groupIdentifier?: Identifier;
  /** The business identifier for this task. */
  identifier?: Identifier[];
  /** Additional information that may be needed in the execution of the task. */
  input?: TaskInput[];
  /** Indicates the "level" of actionability associated with the Task.  I.e. Is this a proposed task, a planned task, an actionable task, etc. */
  intent: RequestIntent;
  /** The date and time of last modification to this task. */
  lastModified?: dateTime;
  /** Free-text information captured about the task as it progresses. */
  note?: Annotation[];
  /** Outputs produced by the Task. */
  output?: TaskOutput[];
  /** Individual organization or Device currently responsible for task execution. */
  owner?: Reference;
  /** Task that this particular task is part of. */
  partOf?: Reference[];
  /** The type of participant that can execute the task. */
  performerType?: CodeableConcept[];
  /** Indicates how quickly the Task should be addressed with respect to other requests. */
  priority?: RequestPriority;
  /** A description or code indicating why this task needs to be performed. */
  reason?: CodeableConcept;
  /** Links to Provenance records for past versions of this Task that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the task. */
  relevantHistory?: Reference[];
  /** The creator of the task. */
  requester?: TaskRequester;
  /** If the Task.focus is a request resource and the task is seeking fulfillment (i.e is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned. */
  restriction?: TaskRestriction;
  /** The current status of the task. */
  status: TaskStatus;
  /** An explanation as to why this task is held, failed, was refused, etc. */
  statusReason?: CodeableConcept;
}
export interface Task extends _Task {
  constructor: { new (): Task };
}
export var Task: { new (): Task };

/** A task to be performed. */
interface _TaskInput extends _BackboneElement {
  /** A code or description indicating how the input is intended to be used as part of the task execution. */
  type: CodeableConcept;
  valueAddress: Address;
  valueAge: Age;
  valueAnnotation: Annotation;
  valueAttachment: Attachment;
  valueBase64Binary: base64Binary;
  valueBoolean: boolean;
  valueCode: code;
  valueCodeableConcept: CodeableConcept;
  valueCoding: Coding;
  valueContactPoint: ContactPoint;
  valueCount: Count;
  valueDate: date;
  valueDateTime: dateTime;
  valueDecimal: decimal;
  valueDistance: Distance;
  valueDuration: Duration;
  valueHumanName: HumanName;
  valueId: id;
  valueIdentifier: Identifier;
  valueInstant: instant;
  valueInteger: integer;
  valueMarkdown: markdown;
  valueMeta: Meta;
  valueMoney: Money;
  valueOid: oid;
  valuePeriod: Period;
  valuePositiveInt: positiveInt;
  valueQuantity: Quantity;
  valueRange: Range;
  valueRatio: Ratio;
  valueReference: Reference;
  valueSampledData: SampledData;
  valueSignature: Signature;
  valueString: string;
  valueTime: time;
  valueTiming: Timing;
  valueUnsignedInt: unsignedInt;
  valueUri: uri;
}
export interface TaskInput extends _TaskInput {
  constructor: { new (): TaskInput };
}
export var TaskInput: { new (): TaskInput };

/** A task to be performed. */
interface _TaskOutput extends _BackboneElement {
  /** The name of the Output parameter. */
  type: CodeableConcept;
  valueAddress: Address;
  valueAge: Age;
  valueAnnotation: Annotation;
  valueAttachment: Attachment;
  valueBase64Binary: base64Binary;
  valueBoolean: boolean;
  valueCode: code;
  valueCodeableConcept: CodeableConcept;
  valueCoding: Coding;
  valueContactPoint: ContactPoint;
  valueCount: Count;
  valueDate: date;
  valueDateTime: dateTime;
  valueDecimal: decimal;
  valueDistance: Distance;
  valueDuration: Duration;
  valueHumanName: HumanName;
  valueId: id;
  valueIdentifier: Identifier;
  valueInstant: instant;
  valueInteger: integer;
  valueMarkdown: markdown;
  valueMeta: Meta;
  valueMoney: Money;
  valueOid: oid;
  valuePeriod: Period;
  valuePositiveInt: positiveInt;
  valueQuantity: Quantity;
  valueRange: Range;
  valueRatio: Ratio;
  valueReference: Reference;
  valueSampledData: SampledData;
  valueSignature: Signature;
  valueString: string;
  valueTime: time;
  valueTiming: Timing;
  valueUnsignedInt: unsignedInt;
  valueUri: uri;
}
export interface TaskOutput extends _TaskOutput {
  constructor: { new (): TaskOutput };
}
export var TaskOutput: { new (): TaskOutput };

/** A task to be performed. */
interface _TaskRequester extends _BackboneElement {
  /** The device, practitioner, etc. who initiated the task. */
  agent: Reference;
  /** The organization the device or practitioner was acting on behalf of when they initiated the task. */
  onBehalfOf?: Reference;
}
export interface TaskRequester extends _TaskRequester {
  constructor: { new (): TaskRequester };
}
export var TaskRequester: { new (): TaskRequester };

/** A task to be performed. */
interface _TaskRestriction extends _BackboneElement {
  /** Over what time-period is fulfillment sought. */
  period?: Period;
  /** For requests that are targeted to more than on potential recipient/target, for whom is fulfillment sought? */
  recipient?: Reference[];
  /** Indicates the number of times the requested action should occur. */
  repetitions?: positiveInt;
}
export interface TaskRestriction extends _TaskRestriction {
  constructor: { new (): TaskRestriction };
}
export var TaskRestriction: { new (): TaskRestriction };

/** The current status of the task.If the element is present, it must have either a @value, an @id, or extensions */
interface _TaskStatus extends _Element {
  value?: TaskStatusList;
}
export interface TaskStatus extends _TaskStatus {
  constructor: { new (): TaskStatus };
}
export var TaskStatus: { new (): TaskStatus };

export type TaskStatusList =
  | 'draft'
  | 'requested'
  | 'received'
  | 'accepted'
  | 'rejected'
  | 'ready'
  | 'cancelled'
  | 'in-progress'
  | 'on-hold'
  | 'failed'
  | 'completed'
  | 'entered-in-error';
interface _TaskStatusList extends _codePrimitive {
  content: TaskStatusList;
}

/** A summary of information based on the results of executing a TestScript.If the element is present, it must have either a @value, an @id, or extensions */
interface _TestReport extends _DomainResource {
  /** Identifier for the TestScript assigned for external purposes outside the context of FHIR. */
  identifier?: Identifier;
  /** When the TestScript was executed and this TestReport was generated. */
  issued?: dateTime;
  /** A free text natural language name identifying the executed TestScript. */
  name?: string;
  /** A participant in the test execution, either the execution engine, a client, or a server. */
  participant?: TestReportParticipant[];
  /** The overall result from the execution of the TestScript. */
  result: TestReportResult;
  /** The final score (percentage of tests passed) resulting from the execution of the TestScript. */
  score?: decimal;
  /** The results of the series of required setup operations before the tests were executed. */
  setup?: TestReportSetup;
  /** The current state of this test report. */
  status: TestReportStatus;
  /** The results of the series of operations required to clean up after the all the tests were executed (successfully or otherwise). */
  teardown?: TestReportTeardown;
  /** A test executed from the test script. */
  test?: TestReportTest[];
  /** Name of the tester producing this report (Organization or individual). */
  tester?: string;
  /** Ideally this is an absolute URL that is used to identify the version-specific TestScript that was executed, matching the `TestScript.url`. */
  testScript: Reference;
}
export interface TestReport extends _TestReport {
  constructor: { new (): TestReport };
}
export var TestReport: { new (): TestReport };

/** A summary of information based on the results of executing a TestScript. */
interface _TestReportAction extends _BackboneElement {
  /** The results of the assertion performed on the previous operations. */
  assert?: TestReportAssert;
  /** The operation performed. */
  operation?: TestReportOperation;
}
export interface TestReportAction extends _TestReportAction {
  constructor: { new (): TestReportAction };
}
export var TestReportAction: { new (): TestReportAction };

/** A summary of information based on the results of executing a TestScript. */
interface _TestReportAction1 extends _BackboneElement {
  /** The results of the assertion performed on the previous operations. */
  assert?: TestReportAssert;
  /** An operation would involve a REST request to a server. */
  operation?: TestReportOperation;
}
export interface TestReportAction1 extends _TestReportAction1 {
  constructor: { new (): TestReportAction1 };
}
export var TestReportAction1: { new (): TestReportAction1 };

/** A summary of information based on the results of executing a TestScript. */
interface _TestReportAction2 extends _BackboneElement {
  /** An operation would involve a REST request to a server. */
  operation: TestReportOperation;
}
export interface TestReportAction2 extends _TestReportAction2 {
  constructor: { new (): TestReportAction2 };
}
export var TestReportAction2: { new (): TestReportAction2 };

/** The results of executing an action.If the element is present, it must have either a @value, an @id, or extensions */
interface _TestReportActionResult extends _Element {
  value?: TestReportActionResultList;
}
export interface TestReportActionResult extends _TestReportActionResult {
  constructor: { new (): TestReportActionResult };
}
export var TestReportActionResult: { new (): TestReportActionResult };

export type TestReportActionResultList = 'pass' | 'skip' | 'fail' | 'warning' | 'error';
interface _TestReportActionResultList extends _codePrimitive {
  content: TestReportActionResultList;
}

/** A summary of information based on the results of executing a TestScript. */
interface _TestReportAssert extends _BackboneElement {
  /** A link to further details on the result. */
  detail?: string;
  /** An explanatory message associated with the result. */
  message?: markdown;
  /** The result of this assertion. */
  result: TestReportActionResult;
}
export interface TestReportAssert extends _TestReportAssert {
  constructor: { new (): TestReportAssert };
}
export var TestReportAssert: { new (): TestReportAssert };

/** A summary of information based on the results of executing a TestScript. */
interface _TestReportOperation extends _BackboneElement {
  /** A link to further details on the result. */
  detail?: uri;
  /** An explanatory message associated with the result. */
  message?: markdown;
  /** The result of this operation. */
  result: TestReportActionResult;
}
export interface TestReportOperation extends _TestReportOperation {
  constructor: { new (): TestReportOperation };
}
export var TestReportOperation: { new (): TestReportOperation };

/** A summary of information based on the results of executing a TestScript. */
interface _TestReportParticipant extends _BackboneElement {
  /** The display name of the participant. */
  display?: string;
  /** The type of participant. */
  type: TestReportParticipantType;
  /** The uri of the participant. An absolute URL is preferred. */
  uri: uri;
}
export interface TestReportParticipant extends _TestReportParticipant {
  constructor: { new (): TestReportParticipant };
}
export var TestReportParticipant: { new (): TestReportParticipant };

/** The type of participant.If the element is present, it must have either a @value, an @id, or extensions */
interface _TestReportParticipantType extends _Element {
  value?: TestReportParticipantTypeList;
}
export interface TestReportParticipantType extends _TestReportParticipantType {
  constructor: { new (): TestReportParticipantType };
}
export var TestReportParticipantType: { new (): TestReportParticipantType };

export type TestReportParticipantTypeList = 'test-engine' | 'client' | 'server';
interface _TestReportParticipantTypeList extends _codePrimitive {
  content: TestReportParticipantTypeList;
}

/** The reported execution result.If the element is present, it must have either a @value, an @id, or extensions */
interface _TestReportResult extends _Element {
  value?: TestReportResultList;
}
export interface TestReportResult extends _TestReportResult {
  constructor: { new (): TestReportResult };
}
export var TestReportResult: { new (): TestReportResult };

export type TestReportResultList = 'pass' | 'fail' | 'pending';
interface _TestReportResultList extends _codePrimitive {
  content: TestReportResultList;
}

/** A summary of information based on the results of executing a TestScript. */
interface _TestReportSetup extends _BackboneElement {
  /** Action would contain either an operation or an assertion. */
  action: TestReportAction[];
}
export interface TestReportSetup extends _TestReportSetup {
  constructor: { new (): TestReportSetup };
}
export var TestReportSetup: { new (): TestReportSetup };

/** The current status of the test report.If the element is present, it must have either a @value, an @id, or extensions */
interface _TestReportStatus extends _Element {
  value?: TestReportStatusList;
}
export interface TestReportStatus extends _TestReportStatus {
  constructor: { new (): TestReportStatus };
}
export var TestReportStatus: { new (): TestReportStatus };

export type TestReportStatusList = 'completed' | 'in-progress' | 'waiting' | 'stopped' | 'entered-in-error';
interface _TestReportStatusList extends _codePrimitive {
  content: TestReportStatusList;
}

/** A summary of information based on the results of executing a TestScript. */
interface _TestReportTeardown extends _BackboneElement {
  /** The teardown action will only contain an operation. */
  action: TestReportAction2[];
}
export interface TestReportTeardown extends _TestReportTeardown {
  constructor: { new (): TestReportTeardown };
}
export var TestReportTeardown: { new (): TestReportTeardown };

/** A summary of information based on the results of executing a TestScript. */
interface _TestReportTest extends _BackboneElement {
  /** Action would contain either an operation or an assertion. */
  action: TestReportAction1[];
  /** A short description of the test used by test engines for tracking and reporting purposes. */
  description?: string;
  /** The name of this test used for tracking/logging purposes by test engines. */
  name?: string;
}
export interface TestReportTest extends _TestReportTest {
  constructor: { new (): TestReportTest };
}
export var TestReportTest: { new (): TestReportTest };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification.If the element is present, it must have either a @value, an @id, or extensions */
interface _TestScript extends _DomainResource {
  /** Contact details to assist a user in finding and communicating with the publisher. */
  contact?: ContactDetail[];
  /** A copyright statement relating to the test script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the test script. */
  copyright?: markdown;
  /** The date  (and optionally time) when the test script was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the test script changes. */
  date?: dateTime;
  /** A free text natural language description of the test script from a consumer's perspective. */
  description?: markdown;
  /** An abstract server used in operations within this test script in the destination element. */
  destination?: TestScriptDestination[];
  /** A boolean value to indicate that this test script is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage. */
  experimental?: boolean;
  /** Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute. */
  fixture?: TestScriptFixture[];
  /** A formal identifier that is used to identify this test script when it is represented in other formats, or referenced in a specification, model, design or an instance. */
  identifier?: Identifier;
  /** A legal or geographic region in which the test script is intended to be used. */
  jurisdiction?: CodeableConcept[];
  /** The required capability must exist and are assumed to function correctly on the FHIR server being tested. */
  metadata?: TestScriptMetadata;
  /** A natural language name identifying the test script. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
  name: string;
  /** An abstract server used in operations within this test script in the origin element. */
  origin?: TestScriptOrigin[];
  /** Reference to the profile to be used for validation. */
  profile?: Reference[];
  /** The name of the individual or organization that published the test script. */
  publisher?: string;
  /** Explaination of why this test script is needed and why it has been designed as it has. */
  purpose?: markdown;
  /** Assert rule to be used in one or more asserts within the test script. */
  rule?: TestScriptRule[];
  /** Contains one or more rules.  Offers a way to group rules so assertions could reference the group of rules and have them all applied. */
  ruleset?: TestScriptRuleset[];
  /** A series of required setup operations before tests are executed. */
  setup?: TestScriptSetup;
  /** The status of this test script. Enables tracking the life-cycle of the content. */
  status: PublicationStatus;
  /** A series of operations required to clean up after the all the tests are executed (successfully or otherwise). */
  teardown?: TestScriptTeardown;
  /** A test in this script. */
  test?: TestScriptTest[];
  /** A short, descriptive, user-friendly title for the test script. */
  title?: string;
  /** An absolute URI that is used to identify this test script when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this test script is (or will be) published. The URL SHOULD include the major version of the test script. For more information see [Technical and Business Versions](resource.html#versions). */
  url: uri;
  /** The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate test script instances. */
  useContext?: UsageContext[];
  /** Variable is set based either on element value in response body or on header field value in the response headers. */
  variable?: TestScriptVariable[];
  /** The identifier that is used to identify this version of the test script when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the test script author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
  version?: string;
}
export interface TestScript extends _TestScript {
  constructor: { new (): TestScript };
}
export var TestScript: { new (): TestScript };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptAction extends _BackboneElement {
  /** Evaluates the results of previous operations to determine if the server under test behaves appropriately. */
  assert?: TestScriptAssert;
  /** The operation to perform. */
  operation?: TestScriptOperation;
}
export interface TestScriptAction extends _TestScriptAction {
  constructor: { new (): TestScriptAction };
}
export var TestScriptAction: { new (): TestScriptAction };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptAction1 extends _BackboneElement {
  /** Evaluates the results of previous operations to determine if the server under test behaves appropriately. */
  assert?: TestScriptAssert;
  /** An operation would involve a REST request to a server. */
  operation?: TestScriptOperation;
}
export interface TestScriptAction1 extends _TestScriptAction1 {
  constructor: { new (): TestScriptAction1 };
}
export var TestScriptAction1: { new (): TestScriptAction1 };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptAction2 extends _BackboneElement {
  /** An operation would involve a REST request to a server. */
  operation: TestScriptOperation;
}
export interface TestScriptAction2 extends _TestScriptAction2 {
  constructor: { new (): TestScriptAction2 };
}
export var TestScriptAction2: { new (): TestScriptAction2 };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptAssert extends _BackboneElement {
  /** The fluentpath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both. */
  compareToSourceExpression?: string;
  /** Id of the source fixture used as the contents to be evaluated by either the "source/expression" or "sourceId/path" definition. */
  compareToSourceId?: string;
  /** XPath or JSONPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both. */
  compareToSourcePath?: string;
  /** The content-type or mime-type to use for RESTful operation in the 'Content-Type' header. */
  contentType?: ContentType;
  /** The description would be used by test engines for tracking and reporting purposes. */
  description?: string;
  /** The direction to use for the assertion. */
  direction?: AssertionDirectionType;
  /** The fluentpath expression to be evaluated against the request or response message contents - HTTP headers and payload. */
  expression?: string;
  /** The HTTP header field name e.g. 'Location'. */
  headerField?: string;
  /** The label would be used for tracking/logging purposes by test engines. */
  label?: string;
  /** The ID of a fixture.  Asserts that the response contains at a minimum the fixture specified by minimumId. */
  minimumId?: string;
  /** Whether or not the test execution performs validation on the bundle navigation links. */
  navigationLinks?: boolean;
  /** The operator type defines the conditional behavior of the assert. If not defined, the default is equals. */
  operator?: AssertionOperatorType;
  /** The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server. */
  path?: string;
  /** The request method or HTTP operation code to compare against that used by the client system under test. */
  requestMethod?: TestScriptRequestMethodCode;
  /** The value to use in a comparison against the request URL path string. */
  requestURL?: string;
  /** The type of the resource.  See http://hl7.org/fhir/resourcelist.html. */
  resource?: FHIRDefinedType;
  /** okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable. */
  response?: AssertionResponseTypes;
  /** The value of the HTTP response code to be tested. */
  responseCode?: string;
  /** The TestScript.rule this assert will evaluate. */
  rule?: TestScriptRule2;
  /** The TestScript.ruleset this assert will evaluate. */
  ruleset?: TestScriptRuleset1;
  /** Fixture to evaluate the XPath/JSONPath expression or the headerField  against. */
  sourceId?: id;
  /** The ID of the Profile to validate against. */
  validateProfileId?: id;
  /** The value to compare to. */
  value?: string;
  /** Whether or not the test execution will produce a warning only on error for this assert. */
  warningOnly?: boolean;
}
export interface TestScriptAssert extends _TestScriptAssert {
  constructor: { new (): TestScriptAssert };
}
export var TestScriptAssert: { new (): TestScriptAssert };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptCapability extends _BackboneElement {
  /** Minimum capabilities required of server for test script to execute successfully.   If server does not meet at a minimum the referenced capability statement, then all tests in this script are skipped. */
  capabilities: Reference;
  /** Description of the capabilities that this test script is requiring the server to support. */
  description?: string;
  /** Which server these requirements apply to. */
  destination?: integer;
  /** Links to the FHIR specification that describes this interaction and the resources involved in more detail. */
  link?: uri[];
  /** Which origin server these requirements apply to. */
  origin?: integer[];
  /** Whether or not the test execution will require the given capabilities of the server in order for this test script to execute. */
  required?: boolean;
  /** Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute. */
  validated?: boolean;
}
export interface TestScriptCapability extends _TestScriptCapability {
  constructor: { new (): TestScriptCapability };
}
export var TestScriptCapability: { new (): TestScriptCapability };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptDestination extends _BackboneElement {
  /** Abstract name given to a destination server in this test script.  The name is provided as a number starting at 1. */
  index: integer;
  /** The type of destination profile the test system supports. */
  profile: Coding;
}
export interface TestScriptDestination extends _TestScriptDestination {
  constructor: { new (): TestScriptDestination };
}
export var TestScriptDestination: { new (): TestScriptDestination };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptFixture extends _BackboneElement {
  /** Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section. */
  autocreate?: boolean;
  /** Whether or not to implicitly delete the fixture during teardown. If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section. */
  autodelete?: boolean;
  /** Reference to the resource (containing the contents of the resource needed for operations). */
  resource?: Reference;
}
export interface TestScriptFixture extends _TestScriptFixture {
  constructor: { new (): TestScriptFixture };
}
export var TestScriptFixture: { new (): TestScriptFixture };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptLink extends _BackboneElement {
  /** Short description of the link. */
  description?: string;
  /** URL to a particular requirement or feature within the FHIR specification. */
  url: uri;
}
export interface TestScriptLink extends _TestScriptLink {
  constructor: { new (): TestScriptLink };
}
export var TestScriptLink: { new (): TestScriptLink };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptMetadata extends _BackboneElement {
  /** Capabilities that must exist and are assumed to function correctly on the FHIR server being tested. */
  capability: TestScriptCapability[];
  /** A link to the FHIR specification that this test is covering. */
  link?: TestScriptLink[];
}
export interface TestScriptMetadata extends _TestScriptMetadata {
  constructor: { new (): TestScriptMetadata };
}
export var TestScriptMetadata: { new (): TestScriptMetadata };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptOperation extends _BackboneElement {
  /** The content-type or mime-type to use for RESTful operation in the 'Accept' header. */
  accept?: ContentType;
  /** The content-type or mime-type to use for RESTful operation in the 'Content-Type' header. */
  contentType?: ContentType;
  /** The description would be used by test engines for tracking and reporting purposes. */
  description?: string;
  /** The server where the request message is destined for.  Must be one of the server numbers listed in TestScript.destination section. */
  destination?: integer;
  /** Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths. */
  encodeRequestUrl?: boolean;
  /** The label would be used for tracking/logging purposes by test engines. */
  label?: string;
  /** The server where the request message originates from.  Must be one of the server numbers listed in TestScript.origin section. */
  origin?: integer;
  /** Path plus parameters after [type].  Used to set parts of the request URL explicitly. */
  params?: string;
  /** Header elements would be used to set HTTP headers. */
  requestHeader?: TestScriptRequestHeader[];
  /** The fixture id (maybe new) to map to the request. */
  requestId?: id;
  /** The type of the resource.  See http://hl7.org/fhir/resourcelist.html. */
  resource?: FHIRDefinedType;
  /** The fixture id (maybe new) to map to the response. */
  responseId?: id;
  /** The id of the fixture used as the body of a PUT or POST request. */
  sourceId?: id;
  /** Id of fixture used for extracting the [id],  [type], and [vid] for GET requests. */
  targetId?: id;
  /** Server interaction or operation type. */
  type?: Coding;
  /** Complete request URL. */
  url?: string;
}
export interface TestScriptOperation extends _TestScriptOperation {
  constructor: { new (): TestScriptOperation };
}
export var TestScriptOperation: { new (): TestScriptOperation };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptOrigin extends _BackboneElement {
  /** Abstract name given to an origin server in this test script.  The name is provided as a number starting at 1. */
  index: integer;
  /** The type of origin profile the test system supports. */
  profile: Coding;
}
export interface TestScriptOrigin extends _TestScriptOrigin {
  constructor: { new (): TestScriptOrigin };
}
export var TestScriptOrigin: { new (): TestScriptOrigin };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptParam extends _BackboneElement {
  /** Descriptive name for this parameter that matches the external assert rule parameter name. */
  name: string;
  /** The explicit or dynamic value for the parameter that will be passed on to the external rule template. */
  value?: string;
}
export interface TestScriptParam extends _TestScriptParam {
  constructor: { new (): TestScriptParam };
}
export var TestScriptParam: { new (): TestScriptParam };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptParam1 extends _BackboneElement {
  /** Descriptive name for this parameter that matches the external assert ruleset rule parameter name. */
  name: string;
  /** The value for the parameter that will be passed on to the external ruleset rule template. */
  value?: string;
}
export interface TestScriptParam1 extends _TestScriptParam1 {
  constructor: { new (): TestScriptParam1 };
}
export var TestScriptParam1: { new (): TestScriptParam1 };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptParam2 extends _BackboneElement {
  /** Descriptive name for this parameter that matches the external assert rule parameter name. */
  name: string;
  /** The value for the parameter that will be passed on to the external rule template. */
  value: string;
}
export interface TestScriptParam2 extends _TestScriptParam2 {
  constructor: { new (): TestScriptParam2 };
}
export var TestScriptParam2: { new (): TestScriptParam2 };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptParam3 extends _BackboneElement {
  /** Descriptive name for this parameter that matches the external assert ruleset rule parameter name. */
  name: string;
  /** The value for the parameter that will be passed on to the external ruleset rule template. */
  value: string;
}
export interface TestScriptParam3 extends _TestScriptParam3 {
  constructor: { new (): TestScriptParam3 };
}
export var TestScriptParam3: { new (): TestScriptParam3 };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptRequestHeader extends _BackboneElement {
  /** The HTTP header field e.g. "Accept". */
  field: string;
  /** The value of the header e.g. "application/fhir+xml". */
  value: string;
}
export interface TestScriptRequestHeader extends _TestScriptRequestHeader {
  constructor: { new (): TestScriptRequestHeader };
}
export var TestScriptRequestHeader: { new (): TestScriptRequestHeader };

/** The allowable request method or HTTP operation codes.If the element is present, it must have either a @value, an @id, or extensions */
interface _TestScriptRequestMethodCode extends _Element {
  value?: TestScriptRequestMethodCodeList;
}
export interface TestScriptRequestMethodCode extends _TestScriptRequestMethodCode {
  constructor: { new (): TestScriptRequestMethodCode };
}
export var TestScriptRequestMethodCode: { new (): TestScriptRequestMethodCode };

export type TestScriptRequestMethodCodeList = 'delete' | 'get' | 'options' | 'patch' | 'post' | 'put';
interface _TestScriptRequestMethodCodeList extends _codePrimitive {
  content: TestScriptRequestMethodCodeList;
}

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptRule extends _BackboneElement {
  /** Each rule template can take one or more parameters for rule evaluation. */
  param?: TestScriptParam[];
  /** Reference to the resource (containing the contents of the rule needed for assertions). */
  resource: Reference;
}
export interface TestScriptRule extends _TestScriptRule {
  constructor: { new (): TestScriptRule };
}
export var TestScriptRule: { new (): TestScriptRule };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptRule1 extends _BackboneElement {
  /** Each rule template can take one or more parameters for rule evaluation. */
  param?: TestScriptParam1[];
  /** Id of the referenced rule within the external ruleset template. */
  ruleId: id;
}
export interface TestScriptRule1 extends _TestScriptRule1 {
  constructor: { new (): TestScriptRule1 };
}
export var TestScriptRule1: { new (): TestScriptRule1 };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptRule2 extends _BackboneElement {
  /** Each rule template can take one or more parameters for rule evaluation. */
  param?: TestScriptParam2[];
  /** The TestScript.rule id value this assert will evaluate. */
  ruleId: id;
}
export interface TestScriptRule2 extends _TestScriptRule2 {
  constructor: { new (): TestScriptRule2 };
}
export var TestScriptRule2: { new (): TestScriptRule2 };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptRule3 extends _BackboneElement {
  /** Each rule template can take one or more parameters for rule evaluation. */
  param?: TestScriptParam3[];
  /** Id of the referenced rule within the external ruleset template. */
  ruleId: id;
}
export interface TestScriptRule3 extends _TestScriptRule3 {
  constructor: { new (): TestScriptRule3 };
}
export var TestScriptRule3: { new (): TestScriptRule3 };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptRuleset extends _BackboneElement {
  /** Reference to the resource (containing the contents of the ruleset needed for assertions). */
  resource: Reference;
  /** The referenced rule within the external ruleset template. */
  rule: TestScriptRule1[];
}
export interface TestScriptRuleset extends _TestScriptRuleset {
  constructor: { new (): TestScriptRuleset };
}
export var TestScriptRuleset: { new (): TestScriptRuleset };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptRuleset1 extends _BackboneElement {
  /** The referenced rule within the external ruleset template. */
  rule?: TestScriptRule3[];
  /** The TestScript.ruleset id value this assert will evaluate. */
  rulesetId: id;
}
export interface TestScriptRuleset1 extends _TestScriptRuleset1 {
  constructor: { new (): TestScriptRuleset1 };
}
export var TestScriptRuleset1: { new (): TestScriptRuleset1 };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptSetup extends _BackboneElement {
  /** Action would contain either an operation or an assertion. */
  action: TestScriptAction[];
}
export interface TestScriptSetup extends _TestScriptSetup {
  constructor: { new (): TestScriptSetup };
}
export var TestScriptSetup: { new (): TestScriptSetup };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptTeardown extends _BackboneElement {
  /** The teardown action will only contain an operation. */
  action: TestScriptAction2[];
}
export interface TestScriptTeardown extends _TestScriptTeardown {
  constructor: { new (): TestScriptTeardown };
}
export var TestScriptTeardown: { new (): TestScriptTeardown };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptTest extends _BackboneElement {
  /** Action would contain either an operation or an assertion. */
  action: TestScriptAction1[];
  /** A short description of the test used by test engines for tracking and reporting purposes. */
  description?: string;
  /** The name of this test used for tracking/logging purposes by test engines. */
  name?: string;
}
export interface TestScriptTest extends _TestScriptTest {
  constructor: { new (): TestScriptTest };
}
export var TestScriptTest: { new (): TestScriptTest };

/** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
interface _TestScriptVariable extends _BackboneElement {
  /** A default, hard-coded, or user-defined value for this variable. */
  defaultValue?: string;
  /** A free text natural language description of the variable and its purpose. */
  description?: string;
  /** The fluentpath expression to evaluate against the fixture body. When variables are defined, only one of either expression, headerField or path must be specified. */
  expression?: string;
  /** Will be used to grab the HTTP header field value from the headers that sourceId is pointing to. */
  headerField?: string;
  /** Displayable text string with hint help information to the user when entering a default value. */
  hint?: string;
  /** Descriptive name for this variable. */
  name: string;
  /** XPath or JSONPath to evaluate against the fixture body.  When variables are defined, only one of either expression, headerField or path must be specified. */
  path?: string;
  /** Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this variable. */
  sourceId?: id;
}
export interface TestScriptVariable extends _TestScriptVariable {
  constructor: { new (): TestScriptVariable };
}
export var TestScriptVariable: { new (): TestScriptVariable };

/** A time during the day, with no date specifiedIf the element is present, it must have either a @value, an @id, or extensions */
interface _time extends _Element {
  value?: string;
}
export interface time extends _time {
  constructor: { new (): time };
}
export var time: { new (): time };

export type timePrimitive = string;
type _timePrimitive = Primitive._string;

/** Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _Timing extends _Element {
  /** A code for the timing schedule. Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code). */
  code?: CodeableConcept;
  /** Identifies specific times when the event occurs. */
  event?: dateTime[];
  /** A set of rules that describe when the event is scheduled. */
  repeat?: TimingRepeat;
}
export interface Timing extends _Timing {
  constructor: { new (): Timing };
}
export var Timing: { new (): Timing };

/** Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _TimingRepeat extends _Element {
  boundsDuration?: Duration;
  boundsPeriod?: Period;
  boundsRange?: Range;
  /** A total count of the desired number of repetitions. */
  count?: integer;
  /** A maximum value for the count of the desired repetitions (e.g. do something 6-8 times). */
  countMax?: integer;
  /** If one or more days of week is provided, then the action happens only on the specified day(s). */
  dayOfWeek?: code[];
  /** How long this thing happens for when it happens. */
  duration?: decimal;
  /** The upper limit of how long this thing happens for when it happens. */
  durationMax?: decimal;
  /** The units of time for the duration, in UCUM units. */
  durationUnit?: UnitsOfTime;
  /** The number of times to repeat the action within the specified period / period range (i.e. both period and periodMax provided). */
  frequency?: integer;
  /** If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range. */
  frequencyMax?: integer;
  /** The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event. */
  offset?: unsignedInt;
  /** Indicates the duration of time over which repetitions are to occur; e.g. to express "3 times per day", 3 would be the frequency and "1 day" would be the period. */
  period?: decimal;
  /** If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as "do this once every 3-5 days. */
  periodMax?: decimal;
  /** The units of time for the period in UCUM units. */
  periodUnit?: UnitsOfTime;
  /** Specified time of day for action to take place. */
  timeOfDay?: time[];
  /** Real world events that the occurrence of the event should be tied to. */
  when?: EventTiming[];
}
export interface TimingRepeat extends _TimingRepeat {
  constructor: { new (): TimingRepeat };
}
export var TimingRepeat: { new (): TimingRepeat };

/** A description of a triggering event.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _TriggerDefinition extends _Element {
  /** The triggering data of the event (if this is a data trigger). */
  eventData?: DataRequirement;
  /** The name of the event (if this is a named-event trigger). */
  eventName?: string;
  eventTimingDate?: date;
  eventTimingDateTime?: dateTime;
  eventTimingReference?: Reference;
  eventTimingTiming?: Timing;
  /** The type of triggering event. */
  type: TriggerType;
}
export interface TriggerDefinition extends _TriggerDefinition {
  constructor: { new (): TriggerDefinition };
}
export var TriggerDefinition: { new (): TriggerDefinition };

/** The type of triggerIf the element is present, it must have either a @value, an @id, or extensions */
interface _TriggerType extends _Element {
  value?: TriggerTypeList;
}
export interface TriggerType extends _TriggerType {
  constructor: { new (): TriggerType };
}
export var TriggerType: { new (): TriggerType };

export type TriggerTypeList =
  | 'named-event'
  | 'periodic'
  | 'data-added'
  | 'data-modified'
  | 'data-removed'
  | 'data-accessed'
  | 'data-access-ended';
interface _TriggerTypeList extends _codePrimitive {
  content: TriggerTypeList;
}

/** How a type relates to its baseDefinition.If the element is present, it must have either a @value, an @id, or extensions */
interface _TypeDerivationRule extends _Element {
  value?: TypeDerivationRuleList;
}
export interface TypeDerivationRule extends _TypeDerivationRule {
  constructor: { new (): TypeDerivationRule };
}
export var TypeDerivationRule: { new (): TypeDerivationRule };

export type TypeDerivationRuleList = 'specialization' | 'constraint';
interface _TypeDerivationRuleList extends _codePrimitive {
  content: TypeDerivationRuleList;
}

/** Operations supported by REST at the type or instance level.If the element is present, it must have either a @value, an @id, or extensions */
interface _TypeRestfulInteraction extends _Element {
  value?: TypeRestfulInteractionList;
}
export interface TypeRestfulInteraction extends _TypeRestfulInteraction {
  constructor: { new (): TypeRestfulInteraction };
}
export var TypeRestfulInteraction: { new (): TypeRestfulInteraction };

export type TypeRestfulInteractionList =
  | 'read'
  | 'vread'
  | 'update'
  | 'patch'
  | 'delete'
  | 'history-instance'
  | 'history-type'
  | 'create'
  | 'search-type';
interface _TypeRestfulInteractionList extends _codePrimitive {
  content: TypeRestfulInteractionList;
}

/** Codes to identify how UDI data was enteredIf the element is present, it must have either a @value, an @id, or extensions */
interface _UDIEntryType extends _Element {
  value?: UDIEntryTypeList;
}
export interface UDIEntryType extends _UDIEntryType {
  constructor: { new (): UDIEntryType };
}
export var UDIEntryType: { new (): UDIEntryType };

export type UDIEntryTypeList = 'barcode' | 'rfid' | 'manual' | 'card' | 'self-reported' | 'unknown';
interface _UDIEntryTypeList extends _codePrimitive {
  content: UDIEntryTypeList;
}

/** A unit of time (units from UCUM).If the element is present, it must have either a @value, an @id, or extensions */
interface _UnitsOfTime extends _Element {
  value?: UnitsOfTimeList;
}
export interface UnitsOfTime extends _UnitsOfTime {
  constructor: { new (): UnitsOfTime };
}
export var UnitsOfTime: { new (): UnitsOfTime };

export type UnitsOfTimeList = 's' | 'min' | 'h' | 'd' | 'wk' | 'mo' | 'a';
interface _UnitsOfTimeList extends _codePrimitive {
  content: UnitsOfTimeList;
}

/** A code that indicates whether an application accepts unknown elements or extensions when reading resources.If the element is present, it must have either a @value, an @id, or extensions */
interface _UnknownContentCode extends _Element {
  value?: UnknownContentCodeList;
}
export interface UnknownContentCode extends _UnknownContentCode {
  constructor: { new (): UnknownContentCode };
}
export var UnknownContentCode: { new (): UnknownContentCode };

export type UnknownContentCodeList = 'no' | 'extensions' | 'elements' | 'both';
interface _UnknownContentCodeList extends _codePrimitive {
  content: UnknownContentCodeList;
}

/** An integer with a value that is not negative (e.g. >= 0)If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions */
interface _unsignedInt extends _Element {
  value: number;
}
export interface unsignedInt extends _unsignedInt {
  constructor: { new (): unsignedInt };
}
export var unsignedInt: { new (): unsignedInt };

export type unsignedIntPrimitive = number;
type _unsignedIntPrimitive = Primitive._number;

/** String of characters used to identify a name or a resourcesee http://en.wikipedia.org/wiki/Uniform_resource_identifierIf the element is present, it must have either a @value, an @id, or extensions */
interface _uri extends _Element {
  value?: string;
}
export interface uri extends _uri {
  constructor: { new (): uri };
}
export var uri: { new (): uri };

export type uriPrimitive = string;
type _uriPrimitive = Primitive._string;

/** Specifies clinical/business/etc metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions */
interface _UsageContext extends _Element {
  /** A code that identifies the type of context being specified by this usage context. */
  code: Coding;
  valueCodeableConcept: CodeableConcept;
  valueQuantity: Quantity;
  valueRange: Range;
}
export interface UsageContext extends _UsageContext {
  constructor: { new (): UsageContext };
}
export var UsageContext: { new (): UsageContext };

/** Complete, proposed, exploratory, otherIf the element is present, it must have either a @value, an @id, or extensions */
interface _Use extends _Element {
  value?: UseList;
}
export interface Use extends _Use {
  constructor: { new (): Use };
}
export var Use: { new (): Use };

export type UseList = 'complete' | 'proposed' | 'exploratory' | 'other';
interface _UseList extends _codePrimitive {
  content: UseList;
}

/** A UUID, represented as a URISee The Open Group, CDE 1.1 Remote Procedure Call specification, Appendix A.If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions */
interface _uuid extends _Element {
  value: string;
}
export interface uuid extends _uuid {
  constructor: { new (): uuid };
}
export var uuid: { new (): uuid };

export type uuidPrimitive = string;
type _uuidPrimitive = Primitive._string;

/** A value set specifies a set of codes drawn from one or more code systems.If the element is present, it must have either a @value, an @id, or extensions */
interface _ValueSet extends _DomainResource {
  /** A set of criteria that define the content logical definition of the value set by including or excluding codes from outside this value set. This I also known as the "Content Logical Definition" (CLD). */
  compose?: ValueSetCompose;
  /** Contact details to assist a user in finding and communicating with the publisher. */
  contact?: ContactDetail[];
  /** A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set. */
  copyright?: markdown;
  /** The date  (and optionally time) when the value set was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the value set changes. (e.g. the 'content logical definition'). */
  date?: dateTime;
  /** A free text natural language description of the value set from a consumer's perspective. */
  description?: markdown;
  /** A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed. */
  expansion?: ValueSetExpansion;
  /** A boolean value to indicate that this value set is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage. */
  experimental?: boolean;
  /** Whether this is intended to be used with an extensible binding or not. */
  extensible?: boolean;
  /** A formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance. */
  identifier?: Identifier[];
  /** If this is set to 'true', then no new versions of the content logical definition can be created.  Note: Other metadata might still change. */
  immutable?: boolean;
  /** A legal or geographic region in which the value set is intended to be used. */
  jurisdiction?: CodeableConcept[];
  /** A natural language name identifying the value set. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
  name?: string;
  /** The name of the individual or organization that published the value set. */
  publisher?: string;
  /** Explaination of why this value set is needed and why it has been designed as it has. */
  purpose?: markdown;
  /** The status of this value set. Enables tracking the life-cycle of the content. */
  status: PublicationStatus;
  /** A short, descriptive, user-friendly title for the value set. */
  title?: string;
  /** An absolute URI that is used to identify this value set when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this value set is (or will be) published. The URL SHOULD include the major version of the value set. For more information see [Technical and Business Versions](resource.html#versions). */
  url?: uri;
  /** The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate value set instances. */
  useContext?: UsageContext[];
  /** The identifier that is used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the value set author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
  version?: string;
}
export interface ValueSet extends _ValueSet {
  constructor: { new (): ValueSet };
}
export var ValueSet: { new (): ValueSet };

/** A value set specifies a set of codes drawn from one or more code systems. */
interface _ValueSetCompose extends _BackboneElement {
  /** Exclude one or more codes from the value set based on code system filters and/or other value sets. */
  exclude?: ValueSetInclude[];
  /** Whether inactive codes - codes that are not approved for current use - are in the value set. If inactive = true, inactive codes are to be included in the expansion, if inactive = false, the inactive codes will not be included in the expansion. If absent, the behavior is determined by the implementation, or by the applicable ExpansionProfile (but generally, inactive codes would be expected to be included). */
  inactive?: boolean;
  /** Include one or more codes from a code system or other value set(s). */
  include: ValueSetInclude[];
  /** If a locked date is defined, then the Content Logical Definition must be evaluated using the current version as of the locked date for referenced code system(s) and value set instances where ValueSet.compose.include.version is not defined. */
  lockedDate?: date;
}
export interface ValueSetCompose extends _ValueSetCompose {
  constructor: { new (): ValueSetCompose };
}
export var ValueSetCompose: { new (): ValueSetCompose };

/** A value set specifies a set of codes drawn from one or more code systems. */
interface _ValueSetConcept extends _BackboneElement {
  /** Specifies a code for the concept to be included or excluded. */
  code: code;
  /** Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc. */
  designation?: ValueSetDesignation[];
  /** The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system. */
  display?: string;
}
export interface ValueSetConcept extends _ValueSetConcept {
  constructor: { new (): ValueSetConcept };
}
export var ValueSetConcept: { new (): ValueSetConcept };

/** A value set specifies a set of codes drawn from one or more code systems. */
interface _ValueSetContains extends _BackboneElement {
  /** If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value. */
  abstract?: boolean;
  /** The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set. */
  code?: code;
  /** Other codes and entries contained under this entry in the hierarchy. */
  contains?: ValueSetContains[];
  /** Additional representations for this item - other languages, aliases, specialized purposes, used for particular purposes, etc. These are relevant when the conditions of the expansion do not fix to a single correct representation. */
  designation?: ValueSetDesignation[];
  /** The recommended display for this item in the expansion. */
  display?: string;
  /** If the concept is inactive in the code system that defines it. Inactive codes are those that are no longer to be used, but are maintained by the code system for understanding legacy data. */
  inactive?: boolean;
  /** An absolute URI which is the code system in which the code for this item in the expansion is defined. */
  system?: uri;
  /** The version of this code system that defined this code and/or display. This should only be used with code systems that do not enforce concept permanence. */
  version?: string;
}
export interface ValueSetContains extends _ValueSetContains {
  constructor: { new (): ValueSetContains };
}
export var ValueSetContains: { new (): ValueSetContains };

/** A value set specifies a set of codes drawn from one or more code systems. */
interface _ValueSetDesignation extends _BackboneElement {
  /** The language this designation is defined for. */
  language?: code;
  /** A code that details how this designation would be used. */
  use?: Coding;
  /** The text value for this designation. */
  value: string;
}
export interface ValueSetDesignation extends _ValueSetDesignation {
  constructor: { new (): ValueSetDesignation };
}
export var ValueSetDesignation: { new (): ValueSetDesignation };

/** A value set specifies a set of codes drawn from one or more code systems. */
interface _ValueSetExpansion extends _BackboneElement {
  /** The codes that are contained in the value set expansion. */
  contains?: ValueSetContains[];
  /** An identifier that uniquely identifies this expansion of the valueset. Systems may re-use the same identifier as long as the expansion and the definition remain the same, but are not required to do so. */
  identifier: uri;
  /** If paging is being used, the offset at which this resource starts.  I.e. this resource is a partial view into the expansion. If paging is not being used, this element SHALL not be present. */
  offset?: integer;
  /** A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion. */
  parameter?: ValueSetParameter[];
  /** The time at which the expansion was produced by the expanding system. */
  timestamp: dateTime;
  /** The total number of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter. */
  total?: integer;
}
export interface ValueSetExpansion extends _ValueSetExpansion {
  constructor: { new (): ValueSetExpansion };
}
export var ValueSetExpansion: { new (): ValueSetExpansion };

/** A value set specifies a set of codes drawn from one or more code systems. */
interface _ValueSetFilter extends _BackboneElement {
  /** The kind of operation to perform as a part of the filter criteria. */
  op: FilterOperator;
  /** A code that identifies a property defined in the code system. */
  property: code;
  /** The match value may be either a code defined by the system, or a string value, which is a regex match on the literal string of the property value when the operation is 'regex', or one of the values (true and false), when the operation is 'exists'. */
  value: code;
}
export interface ValueSetFilter extends _ValueSetFilter {
  constructor: { new (): ValueSetFilter };
}
export var ValueSetFilter: { new (): ValueSetFilter };

/** A value set specifies a set of codes drawn from one or more code systems. */
interface _ValueSetInclude extends _BackboneElement {
  /** Specifies a concept to be included or excluded. */
  concept?: ValueSetConcept[];
  /** Select concepts by specify a matching criteria based on the properties (including relationships) defined by the system. If multiple filters are specified, they SHALL all be true. */
  filter?: ValueSetFilter[];
  /** An absolute URI which is the code system from which the selected codes come from. */
  system?: uri;
  /** Selects concepts found in this value set. This is an absolute URI that is a reference to ValueSet.url. */
  valueSet?: uri[];
  /** The version of the code system that the codes are selected from. */
  version?: string;
}
export interface ValueSetInclude extends _ValueSetInclude {
  constructor: { new (): ValueSetInclude };
}
export var ValueSetInclude: { new (): ValueSetInclude };

/** A value set specifies a set of codes drawn from one or more code systems. */
interface _ValueSetParameter extends _BackboneElement {
  /** The name of the parameter. */
  name: string;
  valueBoolean?: boolean;
  valueCode?: code;
  valueDecimal?: decimal;
  valueInteger?: integer;
  valueString?: string;
  valueUri?: uri;
}
export interface ValueSetParameter extends _ValueSetParameter {
  constructor: { new (): ValueSetParameter };
}
export var ValueSetParameter: { new (): ValueSetParameter };

/** A coded concept listing the base codes.If the element is present, it must have either a @value, an @id, or extensions */
interface _VisionBase extends _Element {
  value?: VisionBaseList;
}
export interface VisionBase extends _VisionBase {
  constructor: { new (): VisionBase };
}
export var VisionBase: { new (): VisionBase };

export type VisionBaseList = 'up' | 'down' | 'in' | 'out';
interface _VisionBaseList extends _codePrimitive {
  content: VisionBaseList;
}

/** A coded concept listing the eye codes.If the element is present, it must have either a @value, an @id, or extensions */
interface _VisionEyes extends _Element {
  value?: VisionEyesList;
}
export interface VisionEyes extends _VisionEyes {
  constructor: { new (): VisionEyes };
}
export var VisionEyes: { new (): VisionEyes };

export type VisionEyesList = 'right' | 'left';
interface _VisionEyesList extends _codePrimitive {
  content: VisionEyesList;
}

/** An authorization for the supply of glasses and/or contact lenses to a patient.If the element is present, it must have either a @value, an @id, or extensions */
interface _VisionPrescription extends _DomainResource {
  /** The date (and perhaps time) when the prescription was written. */
  dateWritten?: dateTime;
  /** Deals with details of the dispense part of the supply specification. */
  dispense?: VisionPrescriptionDispense[];
  /** A link to a resource that identifies the particular occurrence of contact between patient and health care provider. */
  encounter?: Reference;
  /** Business identifier which may be used by other parties to reference or identify the prescription. */
  identifier?: Identifier[];
  /** A link to a resource representing the person to whom the vision products will be supplied. */
  patient?: Reference;
  /** The healthcare professional responsible for authorizing the prescription. */
  prescriber?: Reference;
  reasonCodeableConcept?: CodeableConcept;
  reasonReference?: Reference;
  /** The status of the resource instance. */
  status?: FinancialResourceStatusCodes;
}
export interface VisionPrescription extends _VisionPrescription {
  constructor: { new (): VisionPrescription };
}
export var VisionPrescription: { new (): VisionPrescription };

/** An authorization for the supply of glasses and/or contact lenses to a patient. */
interface _VisionPrescriptionDispense extends _BackboneElement {
  /** Power adjustment for multifocal lenses measured in diopters (0.25 units). */
  add?: decimal;
  /** Adjustment for astigmatism measured in integer degrees. */
  axis?: integer;
  /** Back curvature measured in millimeters. */
  backCurve?: decimal;
  /** The relative base, or reference lens edge, for the prism. */
  base?: VisionBase;
  /** Brand recommendations or restrictions. */
  brand?: string;
  /** Special color or pattern. */
  color?: string;
  /** Power adjustment for astigmatism measured in diopters (0.25 units). */
  cylinder?: decimal;
  /** Contact lens diameter measured in millimeters. */
  diameter?: decimal;
  /** The recommended maximum wear period for the lens. */
  duration?: Quantity;
  /** The eye for which the lens applies. */
  eye?: VisionEyes;
  /** Notes for special requirements such as coatings and lens materials. */
  note?: Annotation[];
  /** Contact lens power measured in diopters (0.25 units). */
  power?: decimal;
  /** Amount of prism to compensate for eye alignment in fractional units. */
  prism?: decimal;
  /** Identifies the type of vision correction product which is required for the patient. */
  product?: CodeableConcept;
  /** Lens power measured in diopters (0.25 units). */
  sphere?: decimal;
}
export interface VisionPrescriptionDispense extends _VisionPrescriptionDispense {
  constructor: { new (): VisionPrescriptionDispense };
}
export var VisionPrescriptionDispense: { new (): VisionPrescriptionDispense };

/** How a search parameter relates to the set of elements returned by evaluating its xpath query.If the element is present, it must have either a @value, an @id, or extensions */
interface _XPathUsageType extends _Element {
  value?: XPathUsageTypeList;
}
export interface XPathUsageType extends _XPathUsageType {
  constructor: { new (): XPathUsageType };
}
export var XPathUsageType: { new (): XPathUsageType };

export type XPathUsageTypeList = 'normal' | 'phonetic' | 'nearby' | 'distance' | 'other';
interface _XPathUsageTypeList extends _codePrimitive {
  content: XPathUsageTypeList;
}

export interface document extends BaseType {
  /** A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc. */
  Account: Account;
  /** This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context. */
  ActivityDefinition: ActivityDefinition;
  /** Actual or  potential/avoided event causing unintended physical injury resulting from or contributed to by medical care, a research study or other healthcare setting factors that requires additional monitoring, treatment, or hospitalization, or that results in death. */
  AdverseEvent: AdverseEvent;
  /** Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance. */
  AllergyIntolerance: AllergyIntolerance;
  /** A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s). */
  Appointment: Appointment;
  /** A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection. */
  AppointmentResponse: AppointmentResponse;
  /** A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage. */
  AuditEvent: AuditEvent;
  /** Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification. */
  Basic: Basic;
  /** A binary resource can contain any content, whether text, image, pdf, zip archive, etc. */
  Binary: Binary;
  /** Record details about the anatomical location of a specimen or body part.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case. */
  BodySite: BodySite;
  /** A container for a collection of resources. */
  Bundle: Bundle;
  /** A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
  CapabilityStatement: CapabilityStatement;
  /** Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions. */
  CarePlan: CarePlan;
  /** The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care for a patient. */
  CareTeam: CareTeam;
  /** The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation. */
  ChargeItem: ChargeItem;
  /** A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery. */
  Claim: Claim;
  /** This resource provides the adjudication details from the processing of a Claim resource. */
  ClaimResponse: ClaimResponse;
  /** A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score. */
  ClinicalImpression: ClinicalImpression;
  /** A code system resource specifies a set of codes drawn from one or more code systems. */
  CodeSystem: CodeSystem;
  /** An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency was notified about a reportable condition. */
  Communication: Communication;
  /** A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition. */
  CommunicationRequest: CommunicationRequest;
  /** A compartment definition that defines how resources are accessed on a server. */
  CompartmentDefinition: CompartmentDefinition;
  /** A set of healthcare-related information that is assembled together into a single logical document that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. While a Composition defines the structure, it does not actually contain the content: rather the full content of a document is contained in a Bundle, of which the Composition is the first resource contained. */
  Composition: Composition;
  /** A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models. */
  ConceptMap: ConceptMap;
  /** A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern. */
  Condition: Condition;
  /** A record of a healthcare consumer’s policy choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time. */
  Consent: Consent;
  /** A formal agreement between parties regarding the conduct of business, exchange of information or other matters. */
  Contract: Contract;
  /** Financial instrument which may be used to reimburse or pay for health care products and services. */
  Coverage: Coverage;
  /** The formal description of a single piece of information that can be gathered and reported. */
  DataElement: DataElement;
  /** Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc. */
  DetectedIssue: DetectedIssue;
  /** This resource identifies an instance or a type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.  Medical devices include durable (reusable) medical equipment, implantable devices, as well as disposable equipment used for diagnostic, treatment, and research for healthcare and public health.  Non-medical devices may include items such as a machine, cellphone, computer, application, etc. */
  Device: Device;
  /** The characteristics, operational status and capabilities of a medical-related component of a medical device. */
  DeviceComponent: DeviceComponent;
  /** Describes a measurement, calculation or setting capability of a medical device. */
  DeviceMetric: DeviceMetric;
  /** Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker. */
  DeviceRequest: DeviceRequest;
  /** A record of a device being used by a patient where the record is the result of a report from the patient or another clinician. */
  DeviceUseStatement: DeviceUseStatement;
  /** The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports. */
  DiagnosticReport: DiagnosticReport;
  /** A collection of documents compiled for a purpose together with metadata that applies to the collection. */
  DocumentManifest: DocumentManifest;
  /** A reference to a document. */
  DocumentReference: DocumentReference;
  /** The EligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an EligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy. */
  EligibilityRequest: EligibilityRequest;
  /** This resource provides eligibility and plan details from the processing of an Eligibility resource. */
  EligibilityResponse: EligibilityResponse;
  /** An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient. */
  Encounter: Encounter;
  /** The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b or a REST endpoint for another FHIR server. This may include any security context information. */
  Endpoint: Endpoint;
  /** This resource provides the insurance enrollment details to the insurer regarding a specified coverage. */
  EnrollmentRequest: EnrollmentRequest;
  /** This resource provides enrollment and plan details from the processing of an Enrollment resource. */
  EnrollmentResponse: EnrollmentResponse;
  /** An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time. */
  EpisodeOfCare: EpisodeOfCare;
  /** Resource to define constraints on the Expansion of a FHIR ValueSet. */
  ExpansionProfile: ExpansionProfile;
  /** This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
  ExplanationOfBenefit: ExplanationOfBenefit;
  /** Significant health events and conditions for a person related to the patient relevant in the context of care for the patient. */
  FamilyMemberHistory: FamilyMemberHistory;
  /** Prospective warnings of potential issues when providing care to the patient. */
  Flag: Flag;
  /** Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc. */
  Goal: Goal;
  /** A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set. */
  GraphDefinition: GraphDefinition;
  /** Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization. */
  Group: Group;
  /** A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken. */
  GuidanceResponse: GuidanceResponse;
  /** The details of a healthcare service available at a location. */
  HealthcareService: HealthcareService;
  /** A text description of the DICOM SOP instances selected in the ImagingManifest; or the reason for, or significance of, the selection. */
  ImagingManifest: ImagingManifest;
  /** Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities. */
  ImagingStudy: ImagingStudy;
  /** Describes the event of a patient being administered a vaccination or a record of a vaccination as reported by a patient, a clinician or another party and may include vaccine reaction information and what vaccination protocol was followed. */
  Immunization: Immunization;
  /** A patient's point-in-time immunization and recommendation (i.e. forecasting a patient's immunization eligibility according to a published schedule) with optional supporting justification. */
  ImmunizationRecommendation: ImmunizationRecommendation;
  /** A set of rules of how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts. */
  ImplementationGuide: ImplementationGuide;
  /** The Library resource is a general-purpose container for knowledge asset definitions. It can be used to describe and expose existing knowledge assets such as logic libraries and information model descriptions, as well as to describe a collection of knowledge assets. */
  Library: Library;
  /** Identifies two or more records (resource instances) that are referring to the same real-world "occurrence". */
  Linkage: Linkage;
  /** A set of information summarized from a list of other resources. */
  List: List;
  /** Details and position information for a physical place where services are provided  and resources and participants may be stored, found, contained or accommodated. */
  Location: Location;
  /** The Measure resource provides the definition of a quality measure. */
  Measure: Measure;
  /** The MeasureReport resource contains the results of evaluating a measure. */
  MeasureReport: MeasureReport;
  /** A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference. */
  Media: Media;
  /** This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication. */
  Medication: Medication;
  /** Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner. */
  MedicationAdministration: MedicationAdministration;
  /** Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order. */
  MedicationDispense: MedicationDispense;
  /** An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns. */
  MedicationRequest: MedicationRequest;
  /** A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now, or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from sources such as the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains
   *
   * The primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information. */
  MedicationStatement: MedicationStatement;
  /** Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted. */
  MessageDefinition: MessageDefinition;
  /** The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle. */
  MessageHeader: MessageHeader;
  /** A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types. */
  NamingSystem: NamingSystem;
  /** A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident. */
  NutritionOrder: NutritionOrder;
  /** Measurements and simple assertions made about a patient, device or other subject. */
  Observation: Observation;
  /** A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction). */
  OperationDefinition: OperationDefinition;
  /** A collection of error, warning or information messages that result from a system action. */
  OperationOutcome: OperationOutcome;
  /** A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, etc. */
  Organization: Organization;
  /** This special resource type is used to represent an operation request and response (operations.html). It has no other use, and there is no RESTful endpoint associated with it. */
  Parameters: Parameters;
  /** Demographics and other administrative information about an individual or animal receiving care or other health-related services. */
  Patient: Patient;
  /** This resource provides the status of the payment for goods and services rendered, and the request and response resource references. */
  PaymentNotice: PaymentNotice;
  /** This resource provides payment details and claim references supporting a bulk payment. */
  PaymentReconciliation: PaymentReconciliation;
  /** Demographics and administrative information about a person independent of a specific health-related context. */
  Person: Person;
  /** This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols. */
  PlanDefinition: PlanDefinition;
  /** A person who is directly or indirectly involved in the provisioning of healthcare. */
  Practitioner: Practitioner;
  /** A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time. */
  PractitionerRole: PractitionerRole;
  /** An action that is or was performed on a patient. This can be a physical intervention like an operation, or less invasive like counseling or hypnotherapy. */
  Procedure: Procedure;
  /** A record of a request for diagnostic investigations, treatments, or operations to be performed. */
  ProcedureRequest: ProcedureRequest;
  /** This resource provides the target, request and response, and action details for an action to be performed by the target on or about existing resources. */
  ProcessRequest: ProcessRequest;
  /** This resource provides processing status, errors and notes from the processing of a resource. */
  ProcessResponse: ProcessResponse;
  /** Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies. */
  Provenance: Provenance;
  /** A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection. */
  Questionnaire: Questionnaire;
  /** A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to. */
  QuestionnaireResponse: QuestionnaireResponse;
  /** Used to record and send details about a request for referral service or transfer of a patient to the care of another provider or provider organization. */
  ReferralRequest: ReferralRequest;
  /** Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process. */
  RelatedPerson: RelatedPerson;
  /** A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one". */
  RequestGroup: RequestGroup;
  /** A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects. */
  ResearchStudy: ResearchStudy;
  /** A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects. */
  ResearchSubject: ResearchSubject;
  /** An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome. */
  RiskAssessment: RiskAssessment;
  /** A container for slots of time that may be available for booking appointments. */
  Schedule: Schedule;
  /** A search parameter that defines a named search item that can be used to search/filter on a resource. */
  SearchParameter: SearchParameter;
  /** Raw data describing a biological sequence. */
  Sequence: Sequence;
  /** The ServiceDefinition describes a unit of decision support functionality that is made available as a service, such as immunization modules or drug-drug interaction checking. */
  ServiceDefinition: ServiceDefinition;
  /** A slot of time on a schedule that may be available for booking appointments. */
  Slot: Slot;
  /** A sample to be used for analysis. */
  Specimen: Specimen;
  /** A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types. */
  StructureDefinition: StructureDefinition;
  /** A Map of relationships between 2 structures that can be used to transform data. */
  StructureMap: StructureMap;
  /** The subscription resource is used to define a push based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system is able to take an appropriate action. */
  Subscription: Subscription;
  /** A homogeneous material with a definite composition. */
  Substance: Substance;
  /** Record of delivery of what is supplied. */
  SupplyDelivery: SupplyDelivery;
  /** A record of a request for a medication, substance or device used in the healthcare setting. */
  SupplyRequest: SupplyRequest;
  /** A task to be performed. */
  Task: Task;
  /** A summary of information based on the results of executing a TestScript. */
  TestReport: TestReport;
  /** A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification. */
  TestScript: TestScript;
  /** A value set specifies a set of codes drawn from one or more code systems. */
  ValueSet: ValueSet;
  /** An authorization for the supply of glasses and/or contact lenses to a patient. */
  VisionPrescription: VisionPrescription;
}
export var document: document;
